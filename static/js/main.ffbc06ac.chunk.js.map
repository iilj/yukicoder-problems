{"version":3,"sources":["interfaces/Problem.ts","components/NavigationBar.tsx","utils/TypedCachedApiClient.ts","interfaces/MergedProblem.ts","utils/index.ts","components/ListPaginationPanel.tsx","components/Ranking.tsx","utils/OpenContest.ts","pages/ShortRanking.tsx","components/WellPositionedDropdownMenu.tsx","pages/PureShortRanking.tsx","pages/FastestRanking.tsx","utils/Url.ts","components/NewTabLink.tsx","components/ContestLink.tsx","components/DifficultyStars.tsx","components/SubmitTimespan.tsx","components/ProblemTypeIcon.tsx","utils/RatingColor.ts","components/TopcoderLikeCircle.tsx","components/DifficultyCircle.tsx","pages/TablePage/TableTab.tsx","components/TexRenderer.tsx","components/ProblemLink.tsx","pages/TablePage/YukicoderRegularTable.tsx","components/SolvedCheckIcon.tsx","pages/TablePage/ContestTable.tsx","pages/TablePage/AllProblemsTable.tsx","utils/DifficultyDataClient.ts","utils/LocalStorage.ts","utils/MergeProcs.ts","pages/TablePage/index.tsx","pages/ListPage/DifficultyLevelTable.tsx","pages/ListPage/ProblemTypeTable.tsx","components/SubmissionLink.tsx","components/ProblemDetailModal.tsx","pages/ListPage/ListTable.tsx","components/DateRangePicker.tsx","pages/ListPage/index.tsx","components/SinglePieChart.tsx","pages/UserPage/SmallPieChart.tsx","pages/UserPage/ProblemLevelPieChart.tsx","pages/UserPage/DailyEffortBarChart.tsx","pages/UserPage/DailyEffortTooltip.tsx","pages/UserPage/DailyEffortStackedBarChart.tsx","pages/UserPage/TabbedDailyEffortBarChart.tsx","pages/UserPage/ClimbingLineChart.tsx","pages/UserPage/ClimbingAreaChart.tsx","pages/UserPage/TabbedClimbingLineChart.tsx","pages/UserPage/CalendarHeatmap.tsx","pages/UserPage/TabbedHeatmap.tsx","pages/UserPage/SolvedProblemList.tsx","pages/UserPage/index.tsx","pages/ProblemDetailPage/DifficultyStatisticsDataTooltip.tsx","pages/ProblemDetailPage/DifficultyBarChart.tsx","pages/ProblemDetailPage/DifficultyScatterChart.tsx","pages/ProblemDetailPage/TabbedDifficultyChart.tsx","pages/ProblemDetailPage/index.tsx","utils/UseResetScroll.ts","App.tsx","index.tsx"],"names":["ProblemType","regexpUser","regexpList","regexpTable","generatePath","kind","param","user","encodeURIComponent","NavigationBar","pathname","useLocation","navigate","useNavigate","initialPageKind","exec","extractPageKind","initialState","params","split","length","decodeURIComponent","extractParams","useState","pageKind","setPageKind","setParam","setUser","isOpen","setIsOpen","submit","nextKind","Navbar","color","light","expand","fixed","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","className","Form","inline","onSubmit","e","preventDefault","UncontrolledDropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","FormGroup","Input","style","width","onKeyPress","key","value","type","name","id","placeholder","onChange","target","Button","tag","RouterLink","to","disabled","nav","inNavbar","right","href","CACHED_CONTESTS","CACHED_PROBLEMS","CACHED_SOLVED_PROBLEMS","CACHED_SOLVED_PROBLEMS_PARAM","CACHED_SOLVED_PROBLEMS_USER","CACHED_FIRST_SOLVED_PROBLEMS","CACHED_FIRST_SOLVED_PROBLEMS_PARAM","CACHED_FIRST_SOLVED_PROBLEMS_USER","CACHED_USER_INFO","CACHED_USER_INFO_PARAM","CACHED_USER_INFO_USER","CACHED_GOLFER_RANKING","CACHED_GOLFER_RANKING_PURE","CACHED_SPEEDER_RANKING","CACHED_LANGUAGES","CACHED_CONTESTS_MAP","CACHED_PROBLEM_CONTEST_MAP","CACHED_SOLVED_PROBLEMS_MAP","CACHED_SOLVED_PROBLEMS_MAP_PARAM","CACHED_SOLVED_PROBLEMS_MAP_USER","CACHED_FIRST_SOLVED_PROBLEMS_MAP","CACHED_FIRST_SOLVED_PROBLEMS_MAP_PARAM","CACHED_FIRST_SOLVED_PROBLEMS_MAP_USER","CACHED_GOLFER_RANKING_MAP","CACHED_GOLFER_RANKING_PURE_MAP","CACHED_SPEEDER_RANKING_MAP","CACHED_GOLFER_RANKING_PROBLEM_MAP","CACHED_GOLFER_RANKING_PURE_PROBLEM_MAP","CACHED_SPEEDER_RANKING_PROBLEM_MAP","ProblemSolveStatus","ProblemTypes","Normal","Educational","Scoring","Joke","Unproved","ProblemLevels","getLevelList","ret","i","push","getDifficultyLevelColor","level","getDifficultyLevelColorClass","ordinalSuffixOf","j","k","getProblemTypeName","problemType","range","start","end","Array","from","v","header","getHeaderFromNum","num","idx","r","Math","floor","getHeader","bytesLengthToString","ListPaginationPanel","props","pageNumbers","currPage","pageStartIndex","totalPage","tmpExp","tmpPageNumber","unshift","slice","pageList","totalPages","sizePerPage","sizePerPageList","map","p","changeSizePerPage","text","display","Pagination","flexWrap","justifyContent","pageNumber","PaginationItem","active","PaginationLink","changePage","Ranking","Row","title","universalStateLoaded","Spinner","height","marginLeft","data","ranking","sort","a","b","count","reduce","list","entry","index","last","rank","pagination","striped","hover","search","options","paginationPosition","paginationPanel","paginationPanelProps","dataField","isKey","OpenContests","Id","Name","Date","EndDate","ProblemIdList","BASE_URL","STATIC_API_BASE_URL_V1","STATIC_API_BASE_URL_V2","assertResultIsValid","obj","Error","Message","fetchJson","url","fetch","res","ok","statusText","json","fetchUserInfo","fetchSolvedProblems","then","solvedProblems","solvedProblem","First","fetchFirstSolvedProblems","fetchSingleProblem","problemId","cachedContestArray","undefined","concat","console","log","cachedProblemArray","cachedSolvedProblemArray","cachedFirstSolvedProblemArray","CACHED_SINGLE_PROBLEM_MAP","Map","cachedSingleProblem","has","set","get","cachedUserInfo","cachedGolferRankingArray","cachedGolferRankingPureArray","CACHED_GOLFER_RANKING_PURE_LANG_MAP","cachedGolferRankingPureLangIdArray","langId","landId","cachedSpeederRankingArray","cachedLanguageArray","cachedContestMap","contest","cachedProblemContestMap","forEach","cachedSolvedProblemMap","cachedSolvedProblems","isArray","problem","ProblemId","cachedFirstSolvedProblemMap","cachedFirstSolvedProblems","cachedGolferMap","rankingProblem","UserName","cachedGolferPureMap","CACHED_GOLFER_RANKING_PURE_MAP_LANG_MAP","cachedGolferPureMapLangMap","cachedSpeederMap","cachedGolferRankingProblemMap","No","cachedGolferRankingPureProblemMap","cachedSpeederRankingProblemMap","initialUniversalState","golferMap","ShortRanking","universalState","setUniversalState","setUniversalStateLoaded","useEffect","unmounted","TypedCachedApiClient","getUniversalInfo","rankingProblems","userName","WellPositionedDropdownMenu","position","willChange","top","left","transform","maxHeight","overflowY","children","languages","initialUserState","golferPureMap","PureShortRanking","setLangId","userState","setUserState","userStateLoaded","setUserStateLoaded","getUserInfo","languagesMap","language","bottom","ButtonGroup","speederMap","FastestRanking","formatContestUrl","contestId","formatProblemUrl","problemNo","formatSubmissionUrl","submissionId","NewTabLink","rel","ContestLink","contestName","rawContestName","DifficultyStarsFillDefs","offset","stopColor","DifficultyStars","showDifficultyLevel","half","full","stars","s","icon","DifficultyStarsAbsoluteSpan","NormalStarElement","formatTimespan","sec","sign","SubmitTimespan","mergedProblem","showContestResult","SolveStatus","Trying","Solved","FirstSolveDateNum","Contest","DateNum","ProblemTypeIcon","ProblemTypeIconAbsoluteSpan","ProblemTypeIconSpanWithName","RatingColors","getRatingColor","rating","min","getRatingColorCode","ratingColor","TopcoderLikeCircle","fillRatio","big","styleOptions","metalColor","base","highlight","getRatingMetalColorCode","borderColor","background","colorCode","getStyleOptions","ContestTableTab","DifficultyCircle","difficulty","tooltipOpen","setTooltipOpen","toggleTooltipState","circleId","Badge","pill","Tooltip","placement","toggle","getColor","TexRenderer","parts","filter","Boolean","part","startsWith","endsWith","math","renderError","error","ProblemLink","problemTitle","problemLinkColorMode","augmented","getRatingColorClass","showDifficultyCircle","experimentalIconId","role","UncontrolledTooltip","YukicoderRegularTable","contests","mergedProblemsMap","showContestDate","maxProblemCount","currentCount","max","solvedFlags","flags","curContest","pid","fill","BeforeContest","tableContainerClass","columnClassName","_","solveStatusList","every","stat","Intime","dataFormat","replace","c","Title","Level","Difficulty","Augmented","SolvedCheckIcon","marginRight","ContestTable","parse","Table","bordered","AllProblemsTable","mergedProblems","problemTables","prevMap","no","problemTableEntries","problems","curTableProblems","Col","xs","sm","md","lg","xl","rowidx","colidx","elementId","backgroundColor","border","opacity","CACHED_DIFFICULTIES","TableTabButtons","setActive","regular","other","other_problems","all","useLocalStorage","defaultValue","localStorage","getItem","React","JSON","setValue","setItem","stringify","fetchDifficulties","fetchDifficultyDetailData","cachedDifficultyData","difficultyDetailDataUnit","coef","bias","detail","cachedDifficultyDetailData","mergeSolveStatus","problemContestMap","solvedProblemsMap","firstSolvedProblemsMap","difficulties","extendedContestMap","EndDateNum","problemIndexMap","extendedContest","firstSolvedProblem","SolveDate","SolveDateNum","FirstSolveDate","Index","ContestWrapper","contestMap","initialMergedState","TablePage","useParams","mergedState","setMergedState","mergedStateLoaded","setMergedStateLoaded","Promise","DifficultyDataClient","mergedProblemsToMap","getMergedInfo","colorMode","setColorMode","setShowDifficultyLevel","setShowContestResult","setShowContestDate","activeTab","setActiveTab","yukicoderContests","otherContests","otherProblems","regexpYukicoderContest","regexpOpenContest","ar","check","Label","checked","None","DifficultyLevelTable","firstSolvedProblems","includingEducational","setIncludingEducational","includingScoring","setIncludingScoring","includingJoke","setIncludingJoke","includingUnproved","setIncludingUnproved","difficultyLevelsSolvedCountMap","difficultyLevelsTotalCountMap","responsive","whiteSpace","minWidth","ProblemTypeTable","problemTypesTotalCountMap","problemTypesSolvedCountMap","SubmissionLink","submissionTitle","ProblemDetailModal","show","handleClose","rankingMergedProblem","showTagsOfTryingProblems","shortestRankingProblem","ShortestRankingProblem","pureShortestRankingProblem","PureShortestRankingProblem","Modal","onHide","Header","closeButton","Body","Tags","Statistics","Total","SubmissionId","Length","ShortCodeSubmissionId","PureShortCodeSubmissionId","FirstACSubmissionId","FirstAcceptedTimeSecond","FastSubmissionId","Footer","variant","SORT_NAMES","ListTable","sortOrder","sortName","rankingMergedProblems","statusFilterState","fromDifficultyLevel","toDifficultyLevel","fromDate","toDate","problemTypeFilterState","enabled","showDetailsModalStatus","setShowDetailsModalStatus","useSearchParams","searchParams","setSearchParams","columns","dataSort","date","row","solveDate","firstSolveDate","tags","fastestRankingProblem","size","hidden","keyField","startDate","trClassName","page","Number","onSizePerPageList","onPageChange","defaultSortName","includes","defaultSortOrder","onSortChange","defaultSearch","onSearchChange","searchText","tdAttr","INITIAL_FROM_DATE","INITIAL_TO_DATE","setHours","DatePickerCustomHeader","minDate","maxDate","changeYear","changeMonth","decreaseMonth","increaseMonth","prevMonthButtonDisabled","nextMonthButtonDisabled","years","getFullYear","months","outline","UncontrolledButtonDropdown","year","getMonth","month","DateRangePicker","onFromDateChange","onToDateChange","popperModifiers","flip","preventOverflow","escapeWithReference","selected","customInput","getTime","selectsStart","endDate","todayButton","popperPlacement","renderCustomHeader","selectsEnd","speederProblemMap","golferProblemMap","golferPureProblemMap","ListPage","FastestRankingProblem","ContestName","FastestRankingUserName","ShortestRankingUserName","PureShortestRankingUserName","mergeRanking","setStatusFilterState","setFromDifficultyLevel","setToDifficultyLevel","setShowTagsOfTryingProblems","setFromDate","setToDate","setProblemTypeFilterState","toFixed","SinglePieChart","dataKey","outerRadius","COLORS","SmallPieChart","trying","accepted","PieCharts","solved","total","charAt","ProblemLevelPieChart","levelList","colorCount","solvedCount","totalCount","fontSize","DailyEffortBarChart","dailyData","margin","syncId","strokeDasharray","domain","tickFormatter","dateSecond","labelFormatter","DailyEffortTooltip","payload","label","reverseColorOrder","padding","paddingTop","paddingBottom","acc","stroke","align","DailyEffortStackedBarChart","content","stackId","DailyEffortBarChartWrapper","TabbedDailyEffortBarChart","showMode","setShowMode","dailyLevelCountMap","currentLevel","targetDate","dailyLevelCount","entries","l","Object","assign","mapToObject","ClimbingLineChart","climbingData","ClimbingAreaChart","reverse","ClimbingChartWrapper","TabbedClimbingLineChart","setReverseColorOrder","Levelclimbing","lastMap","curMap","mergeCountMap","month_names_short","day_names_short","CalendarHeatmap","tableData","formatTooltip","onRectClick","rows","today","blockWidth","viewBox","day_name","x","y","yOffset","week","day","d","getDate","delay","hide","MS_OF_DAY","MS_OF_HOUR","TabbedHeatmap","dailyCountMap","cur","getToday","nextSunday","t","diff","getDay","setDate","getNextSunday","startDateMiliSec","WEEKS","keys","dateMiliSec","dailyMaxLevelMap","SolvedProblemList","filterFormatted","pureGolferMap","userInfo","UserPage","dates","apply","mergedSolvedProblems","prevFirstSolvedProblems","countRank","rankingMap","shortestCount","fastestCount","fastestRank","shortestRank","pureShortestCount","pureShortestRank","regexpContest","regularContestProblemsCntMap","map_","regularContestProblemsCnt","dailyCount","climbing","state","currentStreak","prevDateSecond","longestStreak","currentDate","yesterdayDate","isIncreasing","userSolvedStars","sum","allProblemsStars","origUserLevel","userLevel","round","nextLevel","starsToAdvance","achievements","Rank","Score","Points","ceil","miliSec","DifficultyStatisticsDataTooltip","DifficultyBarChart","scatterData","lineData","ticks","barDataMap","prev","succeeded","failed","y_scatter","barData","allowDecimals","prob","x1","x2","y1","y2","dot","DifficultyScatterChart","fixFloat","exp","fixFloatInv","solveProb","solved_prob","TabbedDifficultyChart","difficultyDetailData","detailEntry","inner_rating","curr","mi","ma","y_line","ff","ProblemDetailPage","problemIdString","updateState","useCallback","scrolled","window","scrollTo","useLayoutEffect","useResetScroll","findIndex","library","add","faStar","faStarHalf","faSchool","faCalculator","faLaughBeam","faExclamationTriangle","faCheck","App","Container","maxWidth","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffbc06ac.chunk.js","sourcesContent":["import { UserId } from './User';\n\n/** 問題No */\nexport type ProblemNo = number;\n/** 問題Id */\nexport type ProblemId = number;\n/** 提出ID */\nexport type SubmissionId = number;\n\n/** 問題タイプ */\nexport enum ProblemType {\n  /** 通常問題 */\n  Normal = 0,\n  /** 教育的問題 */\n  Educational = 1,\n  /** スコア形式問題 */\n  Scoring = 2,\n  /** ネタ問題 */\n  Joke = 3,\n  /** 未証明問題 */\n  Unproved = 4,\n}\n\n/** 問題タイプのリスト */\nexport const ProblemTypes = [\n  ProblemType.Normal,\n  ProblemType.Educational,\n  ProblemType.Scoring,\n  ProblemType.Joke,\n  ProblemType.Unproved,\n];\n\n/** 問題レベルのリスト */\nexport const ProblemLevels = [\n  0, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6,\n] as const;\n\n/** 問題レベル */\nexport type ProblemLevel = typeof ProblemLevels[number];\n\n/** 提出統計（コンテスト時間外含む） */\nexport interface Statistics {\n  /** 提出者数 */\n  readonly Total: number;\n  /** AC 数 */\n  readonly Solved: number;\n  /** FirstAC までの秒数 */\n  readonly FirstAcceptedTimeSecond: number;\n  /** FirstAC の提出 ID */\n  readonly FirstACSubmissionId: SubmissionId;\n  /** ショートコードの提出 ID */\n  readonly ShortCodeSubmissionId: SubmissionId;\n  /** 純ショートコードの提出 ID */\n  readonly PureShortCodeSubmissionId: SubmissionId;\n  /** 最速コードの提出ID */\n  readonly FastSubmissionId: SubmissionId;\n}\n\n/** 問題 */\nexport interface Problem {\n  /** 問題No nullable */\n  readonly No: ProblemNo | null;\n  /** 問題Id */\n  readonly ProblemId: ProblemId;\n  /** 問題名 */\n  readonly Title: string;\n  /** 作問者のユーザーId */\n  readonly AuthorId: UserId;\n  /** テスターのユーザーId */\n  readonly TesterId: UserId;\n  /** 問題レベル小数あり */\n  readonly Level: ProblemLevel;\n  /** 問題タイプ */\n  readonly ProblemType: ProblemType;\n  /** 問題のタグ カンマ区切り */\n  readonly Tags: string;\n  /** 出題日時（RFC 3339） nullable */\n  readonly Date: string | null;\n  /** 提出統計（コンテスト時間外含む） */\n  readonly Statistics: Statistics;\n}\n","import React, { useState } from 'react';\nimport {\n  NavLink as RouterLink,\n  useLocation,\n  useNavigate,\n} from 'react-router-dom';\nimport {\n  Collapse,\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  Nav,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Form,\n  Input,\n  Button,\n  FormGroup,\n} from 'reactstrap';\n\nconst regexpUser = /^\\/user/;\nconst regexpList = /^\\/list/;\nconst regexpTable = /^\\/table/;\n\nconst extractPageKind = (pathname: string) => {\n  if (regexpUser.exec(pathname)) {\n    return 'user';\n  }\n  if (regexpList.exec(pathname)) {\n    return 'list';\n  }\n  if (regexpTable.exec(pathname)) {\n    return 'table';\n  }\n  return undefined;\n};\n\nconst extractParams = (pathname: string) => {\n  const params = pathname.split('/');\n  const param = params.length >= 4 ? params[2] : '';\n  const user = params.length >= 4 ? decodeURIComponent(params[3]) : '';\n  return { param, user };\n};\n\nconst generatePath = (kind: string, param: string, user: string): string =>\n  user && user !== ''\n    ? `/${kind}/${param}/${encodeURIComponent(user)}`\n    : `/${kind}/`;\n\nexport const NavigationBar: React.FC = () => {\n  const location = useLocation();\n  const { pathname } = location;\n  const navigate = useNavigate();\n  const initialPageKind = extractPageKind(pathname);\n  const initialState = extractParams(pathname);\n\n  const [pageKind, setPageKind] = useState(initialPageKind ?? 'table');\n  const [param, setParam] = useState(initialState.param || 'name');\n  const [user, setUser] = useState(initialState.user || '');\n  const [isOpen, setIsOpen] = useState(false);\n\n  const submit = (nextKind: string) => {\n    navigate(generatePath(nextKind, param, user));\n    setPageKind(nextKind);\n  };\n  return (\n    <Navbar color=\"light\" light expand=\"lg\" fixed=\"top\">\n      <NavbarBrand>yukicoder problems</NavbarBrand>\n      <NavbarToggler onClick={() => setIsOpen(!isOpen)} />\n      <Collapse isOpen={isOpen} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <Form\n            inline\n            onSubmit={(e) => {\n              e.preventDefault();\n            }}\n          >\n            <UncontrolledDropdown>\n              <DropdownToggle caret>{param}</DropdownToggle>\n              <DropdownMenu>\n                <DropdownItem key=\"name\" onClick={() => setParam('name')}>\n                  name\n                </DropdownItem>\n                <DropdownItem key=\"twitter\" onClick={() => setParam('twitter')}>\n                  twitter\n                </DropdownItem>\n                <DropdownItem key=\"id\" onClick={() => setParam('id')}>\n                  id\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n            <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n              <Input\n                style={{ width: '150px' }}\n                onKeyPress={(e) => {\n                  if (e.key === 'Enter' && pageKind !== null) {\n                    submit(pageKind);\n                  }\n                }}\n                value={user}\n                type=\"text\"\n                name=\"user\"\n                id=\"user\"\n                placeholder=\"name|twitter|id\"\n                onChange={(e) => setUser(e.target.value)}\n              />\n            </FormGroup>\n            <Button\n              className=\"mb-2 mr-sm-2 mb-sm-0\"\n              tag={RouterLink}\n              to={generatePath('table', param, user)}\n              onClick={() => {\n                submit('table');\n              }}\n            >\n              Table\n            </Button>\n            <Button\n              className=\"mb-2 mr-sm-2 mb-sm-0\"\n              tag={RouterLink}\n              to={generatePath('list', param, user)}\n              onClick={() => {\n                submit('list');\n              }}\n            >\n              List\n            </Button>\n            <Button\n              className=\"mb-2 mr-sm-2 mb-sm-0\"\n              disabled={!user || user.length === 0}\n              tag={RouterLink}\n              to={generatePath('user', param, user)}\n              onClick={() => {\n                submit('user');\n              }}\n            >\n              User Page\n            </Button>\n          </Form>\n        </Nav>\n\n        <Nav className=\"ml-auto\" navbar>\n          <UncontrolledDropdown nav inNavbar>\n            <DropdownToggle nav caret>\n              Rankings\n            </DropdownToggle>\n            <DropdownMenu right>\n              <DropdownItem tag={RouterLink} to=\"/fast\">\n                Fastest Submissions\n              </DropdownItem>\n              <DropdownItem tag={RouterLink} to=\"/short\">\n                Shortest Submissions\n              </DropdownItem>\n              <DropdownItem tag={RouterLink} to=\"/pureshort\">\n                Pure Shortest Submissions\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        </Nav>\n\n        <Nav className=\"ml-auto\" navbar>\n          <UncontrolledDropdown nav inNavbar>\n            <DropdownToggle nav caret>\n              Links\n            </DropdownToggle>\n            <DropdownMenu right>\n              <DropdownItem\n                tag=\"a\"\n                href=\"https://yukicoder.me/\"\n                target=\"_blank\"\n              >\n                yukicoder\n              </DropdownItem>\n              <DropdownItem\n                tag=\"a\"\n                href=\"https://kenkoooo.com/atcoder/\"\n                target=\"_blank\"\n              >\n                AtCoder Problems\n              </DropdownItem>\n              <DropdownItem\n                tag=\"a\"\n                href=\"https://github.com/iilj/yukicoder-problems\"\n                target=\"_blank\"\n              >\n                GitHub\n              </DropdownItem>\n              <DropdownItem\n                tag=\"a\"\n                href=\"https://twitter.com/iiljj\"\n                target=\"_blank\"\n              >\n                @iiljj\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        </Nav>\n      </Collapse>\n    </Navbar>\n  );\n};\n","import { Problem, ProblemNo, ProblemId } from '../interfaces/Problem';\nimport { SolvedProblem, FirstSolvedProblem } from '../interfaces/SolvedProblem';\nimport { Contest, ContestId } from '../interfaces/Contest';\nimport { Language, LangId } from '../interfaces/Language';\nimport { RankingProblem } from '../interfaces/RankingProblem';\nimport { User, UserName } from '../interfaces/User';\nimport { OpenContests } from './OpenContest';\n\nconst BASE_URL = 'https://yukicoder.me';\nconst STATIC_API_BASE_URL_V1 = `${BASE_URL}/api/v1`;\nconst STATIC_API_BASE_URL_V2 = `${BASE_URL}/api/v2`;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst assertResultIsValid = (obj: any): void => {\n  if ('Message' in obj) throw new Error((obj as { Message: string }).Message);\n};\nconst fetchJson = async <T>(url: string): Promise<T> => {\n  const res = await fetch(url);\n  if (!res.ok) {\n    throw new Error(res.statusText);\n  }\n  const obj = (await res.json()) as T | { Message: string };\n  assertResultIsValid(obj);\n  return obj as T;\n};\n\nexport type UserParam = 'id' | 'name' | 'twitter';\n\nconst fetchContests = () =>\n  fetchJson<Contest[]>(`${STATIC_API_BASE_URL_V1}/contest/past`);\nconst fetchCurrentContests = () =>\n  fetchJson<Contest[]>(`${STATIC_API_BASE_URL_V1}/contest/current`);\nconst fetchProblems = () =>\n  fetchJson<Problem[]>(`${STATIC_API_BASE_URL_V1}/problems`);\nconst fetchLanguages = () =>\n  fetchJson<Language[]>(`${STATIC_API_BASE_URL_V1}/languages`);\nconst fetchGolferRanking = () =>\n  fetchJson<RankingProblem[]>(`${STATIC_API_BASE_URL_V2}/ranking/golfer`);\nconst fetchGolferRankingPure = () =>\n  fetchJson<RankingProblem[]>(`${STATIC_API_BASE_URL_V2}/ranking/golfer/pure`);\nconst fetchSpeederRanking = () =>\n  fetchJson<RankingProblem[]>(`${STATIC_API_BASE_URL_V2}/ranking/speeder`);\nconst fetchGolferRankingPureLangId = (landId: LangId) =>\n  fetchJson<RankingProblem[]>(\n    `${STATIC_API_BASE_URL_V2}/ranking/golfer/pure/${landId}`\n  );\nconst fetchUserInfo = (param: UserParam, user: UserName) =>\n  fetchJson<User>(\n    `${STATIC_API_BASE_URL_V1}/user/${param}/${encodeURIComponent(user)}`\n  );\nconst fetchSolvedProblems = (param: UserParam, user: UserName) =>\n  fetchJson<SolvedProblem[]>(\n    `${STATIC_API_BASE_URL_V1}/solved/${param}/${encodeURIComponent(user)}`\n  ).then((solvedProblems) =>\n    solvedProblems.map((solvedProblem) => {\n      solvedProblem.First = false;\n      return solvedProblem;\n    })\n  );\nconst fetchFirstSolvedProblems = (param: UserParam, user: UserName) =>\n  fetchJson<FirstSolvedProblem[]>(\n    `${STATIC_API_BASE_URL_V1}/solved/${param}/${encodeURIComponent(\n      user\n    )}/first`\n  ).then((solvedProblems) =>\n    solvedProblems.map((solvedProblem) => {\n      solvedProblem.First = true;\n      return solvedProblem;\n    })\n  );\nconst fetchSingleProblem = (problemId: ProblemId) =>\n  fetchJson<Problem>(`${STATIC_API_BASE_URL_V1}/problems/${problemId}`);\n\n// //////////////////\n// Raw Data\n// //////////////////\n\n// contests raw array\nlet CACHED_CONTESTS: Contest[];\nexport const cachedContestArray = async (): Promise<Contest[]> => {\n  if (CACHED_CONTESTS === undefined) {\n    try {\n      CACHED_CONTESTS = (await fetchCurrentContests())\n        .concat(await fetchContests())\n        .concat(OpenContests);\n    } catch (e) {\n      console.log(e);\n      CACHED_CONTESTS = [];\n    }\n  }\n  return CACHED_CONTESTS;\n};\n\n// problems raw array\nlet CACHED_PROBLEMS: Problem[];\nexport const cachedProblemArray = async (): Promise<Problem[]> => {\n  if (CACHED_PROBLEMS === undefined) {\n    try {\n      CACHED_PROBLEMS = await fetchProblems();\n    } catch (e) {\n      console.log(e);\n      CACHED_PROBLEMS = [];\n    }\n  }\n  return CACHED_PROBLEMS;\n};\n\n// solved problems raw array\nlet CACHED_SOLVED_PROBLEMS: SolvedProblem[];\nlet CACHED_SOLVED_PROBLEMS_PARAM: UserParam;\nlet CACHED_SOLVED_PROBLEMS_USER: string;\nexport const cachedSolvedProblemArray = async (\n  param: UserParam,\n  user: string\n): Promise<SolvedProblem[]> => {\n  if (\n    CACHED_SOLVED_PROBLEMS === undefined ||\n    param !== CACHED_SOLVED_PROBLEMS_PARAM ||\n    user !== CACHED_SOLVED_PROBLEMS_USER\n  ) {\n    try {\n      CACHED_SOLVED_PROBLEMS = await fetchSolvedProblems(param, user);\n    } catch (e) {\n      console.log(e);\n      CACHED_SOLVED_PROBLEMS = [];\n    }\n    CACHED_SOLVED_PROBLEMS_PARAM = param;\n    CACHED_SOLVED_PROBLEMS_USER = user;\n  }\n  return CACHED_SOLVED_PROBLEMS;\n};\n\n// first solved problems raw array\nlet CACHED_FIRST_SOLVED_PROBLEMS: FirstSolvedProblem[];\nlet CACHED_FIRST_SOLVED_PROBLEMS_PARAM: UserParam;\nlet CACHED_FIRST_SOLVED_PROBLEMS_USER: string;\nexport const cachedFirstSolvedProblemArray = async (\n  param: UserParam,\n  user: string\n): Promise<FirstSolvedProblem[]> => {\n  if (\n    CACHED_FIRST_SOLVED_PROBLEMS === undefined ||\n    param !== CACHED_FIRST_SOLVED_PROBLEMS_PARAM ||\n    user !== CACHED_FIRST_SOLVED_PROBLEMS_USER\n  ) {\n    try {\n      CACHED_FIRST_SOLVED_PROBLEMS = await fetchFirstSolvedProblems(\n        param,\n        user\n      );\n    } catch (e) {\n      console.log(e);\n      CACHED_FIRST_SOLVED_PROBLEMS = [];\n    }\n    CACHED_FIRST_SOLVED_PROBLEMS_PARAM = param;\n    CACHED_FIRST_SOLVED_PROBLEMS_USER = user;\n  }\n  return CACHED_FIRST_SOLVED_PROBLEMS;\n};\n\nconst CACHED_SINGLE_PROBLEM_MAP = new Map<ProblemId, Problem>();\nexport const cachedSingleProblem = async (\n  problemId: ProblemId\n): Promise<Problem> => {\n  if (!CACHED_SINGLE_PROBLEM_MAP.has(problemId)) {\n    try {\n      CACHED_SINGLE_PROBLEM_MAP.set(\n        problemId,\n        await fetchSingleProblem(problemId)\n      );\n    } catch (e) {\n      console.log(e);\n      CACHED_SINGLE_PROBLEM_MAP.set(problemId, {} as Problem);\n    }\n  }\n  return CACHED_SINGLE_PROBLEM_MAP.get(problemId) as Problem;\n};\n\n// user data object\nlet CACHED_USER_INFO: User;\nlet CACHED_USER_INFO_PARAM: UserParam;\nlet CACHED_USER_INFO_USER: string;\nexport const cachedUserInfo = async (\n  param: UserParam,\n  user: string\n): Promise<User> => {\n  if (\n    CACHED_USER_INFO === undefined ||\n    param !== CACHED_USER_INFO_PARAM ||\n    user !== CACHED_USER_INFO_USER\n  ) {\n    try {\n      CACHED_USER_INFO = await fetchUserInfo(param, user);\n    } catch (e) {\n      console.log(e);\n      CACHED_USER_INFO = {} as User;\n    }\n    CACHED_USER_INFO_PARAM = param;\n    CACHED_USER_INFO_USER = user;\n  }\n  return CACHED_USER_INFO;\n};\n\n// shortest code array\nlet CACHED_GOLFER_RANKING: RankingProblem[];\nexport const cachedGolferRankingArray = async (): Promise<RankingProblem[]> => {\n  if (CACHED_GOLFER_RANKING === undefined) {\n    try {\n      CACHED_GOLFER_RANKING = await fetchGolferRanking();\n    } catch (e) {\n      console.log(e);\n      CACHED_GOLFER_RANKING = [];\n    }\n  }\n  return CACHED_GOLFER_RANKING;\n};\n\n// pure shortest code array\nlet CACHED_GOLFER_RANKING_PURE: RankingProblem[];\nexport const cachedGolferRankingPureArray = async (): Promise<\n  RankingProblem[]\n> => {\n  if (CACHED_GOLFER_RANKING_PURE === undefined) {\n    try {\n      CACHED_GOLFER_RANKING_PURE = await fetchGolferRankingPure();\n    } catch (e) {\n      console.log(e);\n      CACHED_GOLFER_RANKING_PURE = [];\n    }\n  }\n  return CACHED_GOLFER_RANKING_PURE;\n};\n\n// pure shortest code array map (langid -> array of shortest submissions)\nconst CACHED_GOLFER_RANKING_PURE_LANG_MAP = new Map<LangId, RankingProblem[]>();\nexport const cachedGolferRankingPureLangIdArray = async (\n  langId: LangId\n): Promise<RankingProblem[]> => {\n  if (!CACHED_GOLFER_RANKING_PURE_LANG_MAP.has(langId)) {\n    try {\n      CACHED_GOLFER_RANKING_PURE_LANG_MAP.set(\n        langId,\n        await fetchGolferRankingPureLangId(langId)\n      );\n    } catch (e) {\n      console.log(e);\n      CACHED_GOLFER_RANKING_PURE_LANG_MAP.set(langId, []);\n    }\n  }\n  return CACHED_GOLFER_RANKING_PURE_LANG_MAP.get(langId) as RankingProblem[];\n};\n\n// shortest code array\nlet CACHED_SPEEDER_RANKING: RankingProblem[];\nexport const cachedSpeederRankingArray = async (): Promise<\n  RankingProblem[]\n> => {\n  if (CACHED_SPEEDER_RANKING === undefined) {\n    try {\n      CACHED_SPEEDER_RANKING = await fetchSpeederRanking();\n    } catch (e) {\n      console.log(e);\n      CACHED_SPEEDER_RANKING = [];\n    }\n  }\n  return CACHED_SPEEDER_RANKING;\n};\n\n// language array\nlet CACHED_LANGUAGES: Language[];\nexport const cachedLanguageArray = async (): Promise<Language[]> => {\n  if (CACHED_LANGUAGES === undefined) {\n    try {\n      CACHED_LANGUAGES = await fetchLanguages();\n    } catch (e) {\n      console.log(e);\n      CACHED_LANGUAGES = [];\n    }\n  }\n  return CACHED_LANGUAGES;\n};\n\n// //////////////////\n// Map Data\n// //////////////////\n\n// map (contest id -> contest object)\nlet CACHED_CONTESTS_MAP: Map<ContestId, Contest>;\nexport const cachedContestMap = async (): Promise<Map<ContestId, Contest>> => {\n  if (CACHED_CONTESTS_MAP === undefined) {\n    CACHED_CONTESTS_MAP = (await cachedContestArray()).reduce(\n      (map, contest) => {\n        if (contest === undefined) return map;\n        return map.set(contest.Id, contest);\n      },\n      new Map<ContestId, Contest>()\n    );\n  }\n  return CACHED_CONTESTS_MAP;\n};\n\n// map (problem id -> problem object)\nlet CACHED_PROBLEMS_MAP: Map<ProblemId, Problem>;\nexport const cachedProblemMap = async (): Promise<Map<ProblemId, Problem>> => {\n  if (CACHED_PROBLEMS_MAP === undefined) {\n    CACHED_PROBLEMS_MAP = (await cachedProblemArray()).reduce(\n      (map, problem) => {\n        if (problem === undefined) return map;\n        return map.set(problem.ProblemId, problem);\n      },\n      new Map<ProblemId, Problem>()\n    );\n  }\n  return CACHED_PROBLEMS_MAP;\n};\n\n// map (problem id -> contest id)\nlet CACHED_PROBLEM_CONTEST_MAP: Map<ProblemId, ContestId>;\nexport const cachedProblemContestMap = async (): Promise<\n  Map<ProblemId, ContestId>\n> => {\n  if (CACHED_PROBLEM_CONTEST_MAP === undefined) {\n    CACHED_PROBLEM_CONTEST_MAP = (await cachedContestArray()).reduce(\n      (map, contest) => {\n        if (contest === undefined || contest.ProblemIdList === undefined)\n          return map;\n        // map[contest.Id] = contest;\n        contest.ProblemIdList.forEach((problemId) => {\n          map.set(problemId, contest.Id);\n        });\n        return map;\n      },\n      new Map<ProblemId, ContestId>()\n    );\n  }\n  return CACHED_PROBLEM_CONTEST_MAP;\n};\n\n// map (problem id -> solved problem object)\nlet CACHED_SOLVED_PROBLEMS_MAP: Map<ProblemId, SolvedProblem>;\nlet CACHED_SOLVED_PROBLEMS_MAP_PARAM: UserParam;\nlet CACHED_SOLVED_PROBLEMS_MAP_USER: string;\nexport const cachedSolvedProblemMap = async (\n  param: UserParam,\n  user: string\n): Promise<Map<ProblemId, SolvedProblem>> => {\n  if (\n    CACHED_SOLVED_PROBLEMS_MAP === undefined ||\n    param !== CACHED_SOLVED_PROBLEMS_MAP_PARAM ||\n    user !== CACHED_SOLVED_PROBLEMS_MAP_USER\n  ) {\n    const cachedSolvedProblems = await cachedSolvedProblemArray(param, user);\n    if (cachedSolvedProblems && Array.isArray(cachedSolvedProblems)) {\n      CACHED_SOLVED_PROBLEMS_MAP = cachedSolvedProblems.reduce(\n        (map, problem) => {\n          if (problem === undefined) return map;\n          return map.set(problem.ProblemId, problem);\n        },\n        new Map<ProblemId, SolvedProblem>()\n      );\n    } else {\n      CACHED_SOLVED_PROBLEMS_MAP = new Map<ProblemId, SolvedProblem>();\n    }\n    CACHED_SOLVED_PROBLEMS_MAP_PARAM = param;\n    CACHED_SOLVED_PROBLEMS_MAP_USER = user;\n  }\n  return CACHED_SOLVED_PROBLEMS_MAP;\n};\n\n// map (problem id -> first solved problem object)\nlet CACHED_FIRST_SOLVED_PROBLEMS_MAP: Map<ProblemId, FirstSolvedProblem>;\nlet CACHED_FIRST_SOLVED_PROBLEMS_MAP_PARAM: UserParam;\nlet CACHED_FIRST_SOLVED_PROBLEMS_MAP_USER: string;\nexport const cachedFirstSolvedProblemMap = async (\n  param: UserParam,\n  user: string\n): Promise<Map<ProblemId, FirstSolvedProblem>> => {\n  if (\n    CACHED_FIRST_SOLVED_PROBLEMS_MAP === undefined ||\n    param !== CACHED_FIRST_SOLVED_PROBLEMS_MAP_PARAM ||\n    user !== CACHED_FIRST_SOLVED_PROBLEMS_MAP_USER\n  ) {\n    const cachedFirstSolvedProblems = await cachedFirstSolvedProblemArray(\n      param,\n      user\n    );\n    if (cachedFirstSolvedProblems && Array.isArray(cachedFirstSolvedProblems)) {\n      CACHED_FIRST_SOLVED_PROBLEMS_MAP = cachedFirstSolvedProblems.reduce(\n        (map, problem) => {\n          if (problem === undefined) return map;\n          return map.set(problem.ProblemId, problem);\n        },\n        new Map<ProblemId, FirstSolvedProblem>()\n      );\n    } else {\n      CACHED_FIRST_SOLVED_PROBLEMS_MAP = new Map<\n        ProblemId,\n        FirstSolvedProblem\n      >();\n    }\n    CACHED_FIRST_SOLVED_PROBLEMS_MAP_PARAM = param;\n    CACHED_FIRST_SOLVED_PROBLEMS_MAP_USER = user;\n  }\n  return CACHED_FIRST_SOLVED_PROBLEMS_MAP;\n};\n\n// map (UserName -> RankingProblem array)\nlet CACHED_GOLFER_RANKING_MAP: Map<UserName, RankingProblem[]>;\nexport const cachedGolferMap = async (): Promise<\n  Map<UserName, RankingProblem[]>\n> => {\n  if (CACHED_GOLFER_RANKING_MAP === undefined) {\n    CACHED_GOLFER_RANKING_MAP = (await cachedGolferRankingArray()).reduce(\n      (map, rankingProblem) => {\n        if (!map.has(rankingProblem.UserName)) {\n          map.set(rankingProblem.UserName, []);\n        }\n        (map.get(rankingProblem.UserName) as RankingProblem[]).push(\n          rankingProblem\n        );\n        return map;\n      },\n      new Map<UserName, RankingProblem[]>()\n    );\n  }\n  return CACHED_GOLFER_RANKING_MAP;\n};\n\n// map (UserName -> RankingProblem array of pure shortest code)\nlet CACHED_GOLFER_RANKING_PURE_MAP: Map<UserName, RankingProblem[]>;\nexport const cachedGolferPureMap = async (): Promise<\n  Map<UserName, RankingProblem[]>\n> => {\n  if (CACHED_GOLFER_RANKING_PURE_MAP === undefined) {\n    CACHED_GOLFER_RANKING_PURE_MAP = (\n      await cachedGolferRankingPureArray()\n    ).reduce((map, rankingProblem) => {\n      if (!map.has(rankingProblem.UserName)) {\n        map.set(rankingProblem.UserName, []);\n      }\n      (map.get(rankingProblem.UserName) as RankingProblem[]).push(\n        rankingProblem\n      );\n      return map;\n    }, new Map<UserName, RankingProblem[]>());\n  }\n  return CACHED_GOLFER_RANKING_PURE_MAP;\n};\n\n// map (langId -> UserName -> RankingProblem array of pure shortest code)\nconst CACHED_GOLFER_RANKING_PURE_MAP_LANG_MAP = new Map<\n  LangId,\n  Map<UserName, RankingProblem[]>\n>();\nexport const cachedGolferPureMapLangMap = async (\n  langId: LangId\n): Promise<Map<UserName, RankingProblem[]>> => {\n  if (!CACHED_GOLFER_RANKING_PURE_MAP_LANG_MAP.has(langId)) {\n    CACHED_GOLFER_RANKING_PURE_MAP_LANG_MAP.set(\n      langId,\n      (await cachedGolferRankingPureLangIdArray(langId)).reduce(\n        (map, rankingProblem) => {\n          if (!map.has(rankingProblem.UserName)) {\n            map.set(rankingProblem.UserName, []);\n          }\n          (map.get(rankingProblem.UserName) as RankingProblem[]).push(\n            rankingProblem\n          );\n          return map;\n        },\n        new Map<UserName, RankingProblem[]>()\n      )\n    );\n  }\n  return CACHED_GOLFER_RANKING_PURE_MAP_LANG_MAP.get(langId) as Map<\n    UserName,\n    RankingProblem[]\n  >;\n};\n\n// map (UserName -> RankingProblem array)\nlet CACHED_SPEEDER_RANKING_MAP: Map<UserName, RankingProblem[]>;\nexport const cachedSpeederMap = async (): Promise<\n  Map<UserName, RankingProblem[]>\n> => {\n  if (CACHED_SPEEDER_RANKING_MAP === undefined) {\n    CACHED_SPEEDER_RANKING_MAP = (await cachedSpeederRankingArray()).reduce(\n      (map, rankingProblem) => {\n        if (!map.has(rankingProblem.UserName)) {\n          map.set(rankingProblem.UserName, []);\n        }\n        (map.get(rankingProblem.UserName) as RankingProblem[]).push(\n          rankingProblem\n        );\n        return map;\n      },\n      new Map<UserName, RankingProblem[]>()\n    );\n  }\n  return CACHED_SPEEDER_RANKING_MAP;\n};\n\n// map (Problem No -> RankingProblem of golfers)\nlet CACHED_GOLFER_RANKING_PROBLEM_MAP: Map<ProblemNo, RankingProblem>;\nexport const cachedGolferRankingProblemMap = async (): Promise<\n  Map<ProblemNo, RankingProblem>\n> => {\n  if (CACHED_GOLFER_RANKING_PROBLEM_MAP === undefined) {\n    CACHED_GOLFER_RANKING_PROBLEM_MAP = (\n      await cachedGolferRankingArray()\n    ).reduce(\n      (map, rankingProblem) => map.set(rankingProblem.No, rankingProblem),\n      new Map<ProblemNo, RankingProblem>()\n    );\n  }\n  return CACHED_GOLFER_RANKING_PROBLEM_MAP;\n};\n\n// map (Problem No -> RankingProblem of pure golfers)\nlet CACHED_GOLFER_RANKING_PURE_PROBLEM_MAP: Map<ProblemNo, RankingProblem>;\nexport const cachedGolferRankingPureProblemMap = async (): Promise<\n  Map<ProblemNo, RankingProblem>\n> => {\n  if (CACHED_GOLFER_RANKING_PURE_PROBLEM_MAP === undefined) {\n    CACHED_GOLFER_RANKING_PURE_PROBLEM_MAP = (\n      await cachedGolferRankingPureArray()\n    ).reduce(\n      (map, rankingProblem) => map.set(rankingProblem.No, rankingProblem),\n      new Map<ProblemNo, RankingProblem>()\n    );\n  }\n  return CACHED_GOLFER_RANKING_PURE_PROBLEM_MAP;\n};\n\n// map (Problem No -> RankingProblem of speeders)\nlet CACHED_SPEEDER_RANKING_PROBLEM_MAP: Map<ProblemNo, RankingProblem>;\nexport const cachedSpeederRankingProblemMap = async (): Promise<\n  Map<ProblemNo, RankingProblem>\n> => {\n  if (CACHED_SPEEDER_RANKING_PROBLEM_MAP === undefined) {\n    CACHED_SPEEDER_RANKING_PROBLEM_MAP = (\n      await cachedSpeederRankingArray()\n    ).reduce(\n      (map, rankingProblem) => map.set(rankingProblem.No, rankingProblem),\n      new Map<ProblemNo, RankingProblem>()\n    );\n  }\n  return CACHED_SPEEDER_RANKING_PROBLEM_MAP;\n};\n","import { Contest } from './Contest';\nimport { Problem } from './Problem';\nimport { RankingProblem } from './RankingProblem';\nimport { Difficulty } from './Difficulty';\n\n/** 問題の提出状況 */\nexport enum ProblemSolveStatus {\n  /** 未 AC */\n  Trying = 0,\n  /** コンテスト後 AC */\n  Solved = 1,\n  /** コンテスト中 AC */\n  Intime = 2,\n  /** コンテスト前 AC */\n  BeforeContest = 3,\n}\n\n/** 日時情報をパースしたコンテスト */\nexport interface ExtendedContest extends Contest {\n  /** コンテスト開始日時 パース済み */\n  readonly DateNum: number;\n  /** コンテスト終了日時 パース済み */\n  readonly EndDateNum: number;\n}\n\n/** コンテスト情報および解答状況をマージした問題 */\nexport interface MergedProblem extends Problem {\n  /** 問題に対応するコンテスト情報 */\n  readonly Contest?: ExtendedContest;\n  /** 出題日時 パース済み */\n  readonly DateNum: number;\n  /** 最初に正答した日時 */\n  readonly SolveDate?: string;\n  /** 最初に正答した日時 パース済み */\n  readonly SolveDateNum?: number;\n  /** 最初に（リジャッジ前に）正答した日時 */\n  readonly FirstSolveDate?: string;\n  /** 最初に（リジャッジ前に）正答した日時 パース済み */\n  readonly FirstSolveDateNum?: number;\n  /** 問題の提出状況 */\n  readonly SolveStatus: ProblemSolveStatus;\n  /** difficulty */\n  readonly Difficulty?: Difficulty;\n  /** experimental difficulty かどうか */\n  readonly Augmented?: boolean;\n  /** コンテスト中の問題インデックス */\n  readonly Index?: number;\n}\n\n/** コンテスト情報，解答状況，およびショートコード情報をマージした問題 */\nexport interface RankingMergedProblem extends MergedProblem {\n  /** 最速実行時間コード */\n  readonly FastestRankingProblem?: RankingProblem;\n  /** ショートコード */\n  readonly ShortestRankingProblem?: RankingProblem;\n  /** 純ショートコード */\n  readonly PureShortestRankingProblem?: RankingProblem;\n  /** 検索用 コンテスト名 */\n  readonly ContestName?: string;\n  /** 検索用 最速実行時間コード保持ユーザ名 */\n  readonly FastestRankingUserName?: string;\n  /** 検索用 ショートコード保持ユーザ名 */\n  readonly ShortestRankingUserName?: string;\n  /** 検索用 純ショートコード保持ユーザ名 */\n  readonly PureShortestRankingUserName?: string;\n}\n","import { ProblemLevel, ProblemType } from '../interfaces/Problem';\n\n// 0.0 黒\n// 1.0 灰\n// 1.5 茶\n// 2.0 緑\n// 2.5 水\n// 3.0 青\n// 3.5 黃\n// 4.0 橙\n// 4.5 赤\n// 5.0 銅\n// 5.5 銀\n// 6.0 金\n\n/**\n * 問題のレベル一覧を返す\n *\n * @returns {ProblemLevel[]} problem level list\n */\nexport const getLevelList = (): ProblemLevel[] => {\n  const ret = [0] as ProblemLevel[];\n  for (let i = 1; i <= 6; i += 0.5) {\n    ret.push(i as ProblemLevel);\n  }\n  return ret;\n};\n\n/**\n * 問題の難易度レベル→色，の変換\n *\n * @param {ProblemLevel} level 問題の難易度レベル\n * @returns color code string\n */\nexport const getDifficultyLevelColor = (level: ProblemLevel): string => {\n  if (!level) {\n    return '';\n  }\n  if (level < 1) {\n    return '#000000'; // black\n  }\n  if (level <= 1) {\n    return '#808080'; // grey\n  }\n  if (level <= 1.5) {\n    return '#804000'; // brown\n  }\n  if (level <= 2) {\n    return '#008000'; // green\n  }\n  if (level <= 2.5) {\n    return '#00C0C0'; // cyan\n  }\n  if (level <= 3) {\n    return '#0000FF'; // blue\n  }\n  if (level <= 3.5) {\n    return '#C0C000'; // yellow\n  }\n  if (level <= 4) {\n    return '#FF8000'; // orange\n  }\n  if (level <= 4.5) {\n    return '#FF0000'; // red\n  }\n  if (level <= 5) {\n    return '#725a36'; // bronze\n  }\n  if (level <= 5.5) {\n    return '#808080'; // silver\n  }\n  return '#ffd700'; // gold\n};\n\ntype DifficultyLevelColorClassName =\n  | ''\n  | 'difficulty-black'\n  | 'difficulty-grey'\n  | 'difficulty-brown'\n  | 'difficulty-green'\n  | 'difficulty-cyan'\n  | 'difficulty-blue'\n  | 'difficulty-yellow'\n  | 'difficulty-orange'\n  | 'difficulty-red';\n\n/**\n * 問題の難易度レベル→色クラス，の変換\n *\n * @param {ProblemLevel} level 問題の難易度レベル\n * @returns 色クラス名\n */\nexport const getDifficultyLevelColorClass = (\n  level: ProblemLevel\n): DifficultyLevelColorClassName => {\n  if (!level) {\n    return '';\n  }\n  if (level < 1) {\n    return 'difficulty-black'; // black\n  }\n  if (level <= 1) {\n    return 'difficulty-grey'; // grey\n  }\n  if (level <= 1.5) {\n    return 'difficulty-brown'; // brown\n  }\n  if (level <= 2) {\n    return 'difficulty-green'; // green\n  }\n  if (level <= 2.5) {\n    return 'difficulty-cyan'; // cyan\n  }\n  if (level <= 3) {\n    return 'difficulty-blue'; // blue\n  }\n  if (level <= 3.5) {\n    return 'difficulty-yellow'; // yellow\n  }\n  if (level <= 4) {\n    return 'difficulty-orange'; // orange\n  }\n  return 'difficulty-red'; // red\n};\n\n/**\n * returns suffix string of order, e.g. \"st\" of \"1st\".\n *\n * @param {number} i number representing order\n * @returns suffix string of order\n */\nexport const ordinalSuffixOf = (i: number): 'st' | 'nd' | 'rd' | 'th' => {\n  const j = i % 10;\n  const k = i % 100;\n  if (j === 1 && k !== 11) {\n    return 'st';\n  }\n  if (j === 2 && k !== 12) {\n    return 'nd';\n  }\n  if (j === 3 && k !== 13) {\n    return 'rd';\n  }\n  return 'th';\n};\n\n/**\n * returns string representing the problem type\n *\n * @param {ProblemType} problemType Problem Type number\n * @returns string representing the problem type\n */\nexport const getProblemTypeName = (problemType: ProblemType): string => {\n  switch (problemType) {\n    case ProblemType.Normal:\n      return 'Normal';\n    case ProblemType.Educational:\n      return 'Educational';\n    case ProblemType.Scoring:\n      return 'Scoring';\n    case ProblemType.Joke:\n      return 'Joke';\n    case ProblemType.Unproved:\n      return 'Unproved';\n  }\n};\n\n/**\n * returns array [start, start+1, ..., end].\n *\n * @param {number} start start number\n * @param {number} end end number\n * @returns {number[]} array\n */\nexport const range = (start: number, end: number): number[] =>\n  Array.from({ length: end - start + 1 }, (v, k) => k + start);\n\nexport const mapToObject = <T>(\n  map: Map<string | number | symbol, T>\n): { [key: string]: T } | { [key: number]: T } =>\n  Array.from(map.entries()).reduce(\n    (l, [k, v]) => Object.assign(l, { [k]: v }),\n    {}\n  );\n\nconst header = [\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n];\nconst getHeaderFromNum = (num: number): string => {\n  const idx = num - 1;\n  if (idx < header.length) {\n    return header[idx];\n  } else {\n    const r = idx % header.length;\n    return getHeaderFromNum(Math.floor(idx / header.length)) + header[r];\n  }\n};\nexport const getHeader = (idx: number): string => getHeaderFromNum(idx + 1);\n\nexport const bytesLengthToString = (length: number | null): string => {\n  if (length === null) return '??? Bytes';\n  return `${length} Bytes`;\n};\n","import React from 'react';\nimport { PaginationPanelProps } from 'react-bootstrap-table';\nimport {\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  UncontrolledDropdown,\n  Pagination,\n  PaginationItem,\n  PaginationLink,\n} from 'reactstrap';\nimport { range } from '../utils';\n\nexport interface ListPaginationPanelProps extends PaginationPanelProps {\n  totalPages: number;\n}\n\nconst pageList = (\n  currPage: number,\n  pageStartIndex: number,\n  totalPage: number\n): number[] => {\n  if (totalPage === 0) {\n    return [];\n  }\n  if (totalPage <= 10) {\n    return range(1, totalPage);\n  }\n\n  const pageNumbers = [currPage];\n  let tmpExp = 1;\n  for (;;) {\n    tmpExp *= 2;\n    const tmpPageNumber = currPage - tmpExp + 1;\n    if (tmpPageNumber < pageStartIndex) {\n      break;\n    }\n    pageNumbers.unshift(tmpPageNumber);\n  }\n  if (pageNumbers[0] !== pageStartIndex) {\n    pageNumbers.unshift(pageStartIndex);\n  }\n\n  tmpExp = 1;\n  for (;;) {\n    tmpExp *= 2;\n    const tmpPageNumber = currPage + tmpExp - 1;\n    if (tmpPageNumber > totalPage) {\n      break;\n    }\n    pageNumbers.push(tmpPageNumber);\n  }\n  if (pageNumbers.slice(-1)[0] !== totalPage) {\n    pageNumbers.push(totalPage);\n  }\n\n  return pageNumbers;\n};\n\nexport const ListPaginationPanel: React.FC<ListPaginationPanelProps> = (\n  props\n) => {\n  const pageNumbers = pageList(\n    props.currPage,\n    props.pageStartIndex,\n    props.totalPages\n  );\n\n  return (\n    <>\n      <div className=\"col-md-2 col-xs-2 col-sm-2 col-lg-2\">\n        <UncontrolledDropdown className=\"react-bs-table-sizePerPage-dropdown\">\n          <DropdownToggle caret>{props.sizePerPage}</DropdownToggle>\n          <DropdownMenu>\n            {(props.sizePerPageList as { text: string; value: number }[]).map(\n              (p) => (\n                <DropdownItem\n                  key={p.text}\n                  onClick={() => props.changeSizePerPage(p.value)}\n                >\n                  {p.text}\n                </DropdownItem>\n              )\n            )}\n          </DropdownMenu>\n        </UncontrolledDropdown>\n      </div>\n      <div\n        className=\"col-md-10 col-xs-10 col-sm-10 col-lg-10\"\n        style={{ display: 'block' }}\n      >\n        <Pagination style={{ flexWrap: 'wrap', justifyContent: 'flex-end' }}>\n          {pageNumbers.map((pageNumber) => (\n            <PaginationItem\n              key={pageNumber}\n              active={pageNumber === props.currPage}\n            >\n              <PaginationLink onClick={() => props.changePage(pageNumber)}>\n                {pageNumber}\n              </PaginationLink>\n            </PaginationItem>\n          ))}\n        </Pagination>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { Row, Spinner } from 'reactstrap';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport {\n  ListPaginationPanel,\n  ListPaginationPanelProps,\n} from './ListPaginationPanel';\nimport { UserName } from '../interfaces/User';\n\nconst refineRanking = (ranking: { name: UserName; count: number }[]) =>\n  ranking\n    .sort((a, b) => b.count - a.count)\n    .reduce((list, entry, index) => {\n      const last = list[list.length - 1];\n      list.push({\n        rank: last && last.count === entry.count ? last.rank : index + 1,\n        name: entry.name,\n        count: entry.count,\n      });\n      return list;\n    }, [] as { rank: number; name: UserName; count: number }[]);\n\ninterface Props {\n  title: string;\n  ranking: { name: UserName; count: number }[];\n  universalStateLoaded: boolean;\n}\n\nexport const Ranking: React.FC<Props> = (props) => (\n  <Row>\n    <h2>{props.title}</h2>\n    {props.universalStateLoaded ? (\n      <></>\n    ) : (\n      <Spinner\n        style={{ width: '2.5rem', height: '2.5rem', marginLeft: '0.8rem' }}\n      />\n    )}\n    <BootstrapTable\n      height=\"auto\"\n      data={refineRanking(props.ranking)}\n      pagination\n      striped\n      hover\n      search\n      options={{\n        paginationPosition: 'top',\n        sizePerPage: 20,\n        sizePerPageList: [\n          {\n            text: '20',\n            value: 20,\n          },\n          {\n            text: '50',\n            value: 50,\n          },\n          {\n            text: '100',\n            value: 100,\n          },\n          {\n            text: '200',\n            value: 200,\n          },\n          {\n            text: 'All',\n            value: props.ranking.length,\n          },\n        ],\n        paginationPanel: function _paginationPanel(\n          paginationPanelProps: ListPaginationPanelProps\n        ) {\n          return <ListPaginationPanel {...paginationPanelProps} />;\n        },\n      }}\n    >\n      <TableHeaderColumn dataField=\"rank\">#</TableHeaderColumn>\n      <TableHeaderColumn dataField=\"name\" isKey>\n        Name\n      </TableHeaderColumn>\n      <TableHeaderColumn dataField=\"count\">Count</TableHeaderColumn>\n    </BootstrapTable>\n  </Row>\n);\n","import { Contest } from '../interfaces/Contest';\n\nexport const OpenContests: Contest[] = [\n  // https://www.hackerrank.com/75th\n  // id: 97235\n  // get_endtimeiso: \"2020-03-19T14:00:00Z\"\n  // get_starttimeiso: \"2020-03-19T11:30:00Z\"\n  {\n    Id: -97235,\n    Name: '灘校75回生中学卒業記念コンテスト (Open)',\n    Date: '2020-03-19T20:30:00+09:00',\n    EndDate: '2020-03-19T23:00:00+09:00',\n    ProblemIdList: [\n      4951, 4952, 4954, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4964,\n      4965,\n    ],\n  },\n  // https://www.hackerrank.com/epsf001\n  // id: 69694\n  // get_endtimeiso: \"2019-10-14T08:30:00Z\"\n  // get_starttimeiso: \"2019-10-14T04:30:00Z\"\n  // C,H,I,L,N,P,Qは欠番\n  {\n    Id: -69694,\n    Name: 'Beginners After Typhoon Contest#01 (Open)',\n    Date: '2019-10-14T13:30:00+09:00',\n    EndDate: '2019-10-14T17:30:00+09:00',\n    ProblemIdList: [\n      4600, 4825, -1, 4560, 4748, 4826, 4827, -1, -1, 4776, 4777, -1, 4746, -1,\n      4778, -1, -1, 4750,\n    ],\n  },\n  // https://www.hackerrank.com/ysf1\n  // id: 103804\n  // get_endtimeiso: \"2020-06-17T13:30:00Z\"\n  // get_starttimeiso: \"2020-06-17T12:00:00Z\"\n  {\n    Id: -103804,\n    Name: 'YSF Beginner Contest (Open)',\n    Date: '2020-06-17T21:00:00+09:00',\n    EndDate: '2020-06-17T22:30:00+09:00',\n    ProblemIdList: [4573, 4572, 4571, 4570, 4569, 4568, 4567],\n  },\n];\n","import React, { useEffect, useState } from 'react';\nimport { Ranking } from '../components/Ranking';\nimport * as TypedCachedApiClient from '../utils/TypedCachedApiClient';\nimport { UserName } from '../interfaces/User';\nimport { RankingProblem } from '../interfaces/RankingProblem';\n\nconst initialUniversalState = {\n  golferMap: new Map<UserName, RankingProblem[]>(),\n};\n\nexport const ShortRanking: React.FC = () => {\n  const [universalState, setUniversalState] = useState(initialUniversalState);\n  const [universalStateLoaded, setUniversalStateLoaded] = useState(false);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getUniversalInfo = async () => {\n      setUniversalStateLoaded(false);\n      const golferMap = await TypedCachedApiClient.cachedGolferMap();\n\n      if (!unmounted) {\n        setUniversalState({\n          golferMap,\n        });\n        setUniversalStateLoaded(true);\n      }\n    };\n    void getUniversalInfo();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, []);\n\n  const { golferMap } = universalState;\n\n  const ranking = [] as { name: UserName; count: number }[];\n  golferMap.forEach((rankingProblems, userName) => {\n    ranking.push({ name: userName, count: rankingProblems.length });\n  });\n\n  return (\n    <Ranking\n      title=\"Top Golfers\"\n      ranking={ranking}\n      universalStateLoaded={universalStateLoaded}\n    />\n  );\n};\n","import React from 'react';\nimport { DropdownMenu, DropdownMenuProps } from 'reactstrap';\n\nexport const WellPositionedDropdownMenu = (\n  props: DropdownMenuProps\n): JSX.Element => (\n  <DropdownMenu\n    style={{\n      position: 'absolute',\n      willChange: 'transform',\n      top: '50px',\n      left: '0px',\n      transform: 'translate3d(0px, -65px, 0px)',\n      maxHeight: 'calc(100vh - 65px)',\n      overflowY: 'scroll',\n    }}\n  >\n    {props.children}\n  </DropdownMenu>\n);\n","import React, { useEffect, useState } from 'react';\nimport {\n  DropdownItem,\n  DropdownToggle,\n  Row,\n  UncontrolledDropdown,\n  ButtonGroup,\n  Spinner,\n} from 'reactstrap';\nimport { Ranking } from '../components/Ranking';\nimport { WellPositionedDropdownMenu } from '../components/WellPositionedDropdownMenu';\nimport * as TypedCachedApiClient from '../utils/TypedCachedApiClient';\nimport { Language, LangId } from '../interfaces/Language';\nimport { RankingProblem } from '../interfaces/RankingProblem';\nimport { UserName } from '../interfaces/User';\n\nconst initialUniversalState = {\n  languages: [] as Language[],\n};\n\nconst initialUserState = {\n  golferPureMap: new Map<UserName, RankingProblem[]>(),\n};\n\nexport const PureShortRanking: React.FC = () => {\n  const emptyLangId = '';\n  const [langId, setLangId] = useState<LangId>(emptyLangId);\n\n  const [universalState, setUniversalState] = useState(initialUniversalState);\n  const [userState, setUserState] = useState(initialUserState);\n  const [universalStateLoaded, setUniversalStateLoaded] = useState(false);\n  const [userStateLoaded, setUserStateLoaded] = useState(false);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getUniversalInfo = async () => {\n      setUniversalStateLoaded(false);\n      const languages = await TypedCachedApiClient.cachedLanguageArray();\n\n      if (!unmounted) {\n        setUniversalState({\n          languages,\n        });\n        setUniversalStateLoaded(true);\n      }\n    };\n    void getUniversalInfo();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, []);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getUserInfo = async () => {\n      setUserStateLoaded(false);\n      const golferPureMap =\n        langId === emptyLangId\n          ? await TypedCachedApiClient.cachedGolferPureMap()\n          : await TypedCachedApiClient.cachedGolferPureMapLangMap(langId);\n\n      if (!unmounted) {\n        setUserState({\n          golferPureMap,\n        });\n        setUserStateLoaded(true);\n      }\n    };\n    void getUserInfo();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, [langId]);\n\n  const { languages } = universalState;\n  const { golferPureMap } = userState;\n\n  const ranking = [] as { name: UserName; count: number }[];\n  golferPureMap.forEach((rankingProblems, userName) => {\n    ranking.push({ name: userName, count: rankingProblems.length });\n  });\n\n  const languagesMap = languages.reduce(\n    (map, language) => map.set(language.Id, language),\n    new Map<LangId, Language>()\n  );\n\n  return (\n    <>\n      {userStateLoaded ? (\n        <></>\n      ) : (\n        <Spinner\n          style={{\n            width: '3rem',\n            height: '3rem',\n            position: 'fixed',\n            right: '10px',\n            bottom: '10px',\n          }}\n        />\n      )}\n      <Row>\n        <ButtonGroup className=\"mr-4\">\n          <UncontrolledDropdown>\n            <DropdownToggle caret>\n              {langId === emptyLangId\n                ? 'Language'\n                : (languagesMap.get(langId) as Language).Name}\n            </DropdownToggle>\n            <WellPositionedDropdownMenu>\n              <DropdownItem header>Language</DropdownItem>\n              <DropdownItem key=\"All\" onClick={() => setLangId(emptyLangId)}>\n                All\n              </DropdownItem>\n              {languages.map((language) => (\n                <DropdownItem\n                  key={language.Id}\n                  onClick={() => setLangId(language.Id)}\n                >\n                  {language.Name}\n                </DropdownItem>\n              ))}\n            </WellPositionedDropdownMenu>\n          </UncontrolledDropdown>\n        </ButtonGroup>\n      </Row>\n      <Ranking\n        title=\"Top Pure Golfers\"\n        ranking={ranking}\n        universalStateLoaded={universalStateLoaded}\n      />\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Ranking } from '../components/Ranking';\nimport * as TypedCachedApiClient from '../utils/TypedCachedApiClient';\nimport { UserName } from '../interfaces/User';\nimport { RankingProblem } from '../interfaces/RankingProblem';\n\nconst initialUniversalState = {\n  speederMap: new Map<UserName, RankingProblem[]>(),\n};\n\nexport const FastestRanking: React.FC = () => {\n  const [universalState, setUniversalState] = useState(initialUniversalState);\n  const [universalStateLoaded, setUniversalStateLoaded] = useState(false);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getUniversalInfo = async () => {\n      setUniversalStateLoaded(false);\n      const speederMap = await TypedCachedApiClient.cachedSpeederMap();\n\n      if (!unmounted) {\n        setUniversalState({\n          speederMap,\n        });\n        setUniversalStateLoaded(true);\n      }\n    };\n    void getUniversalInfo();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, []);\n\n  const { speederMap } = universalState;\n\n  const ranking = [] as { name: UserName; count: number }[];\n  speederMap.forEach((rankingProblems, userName) => {\n    ranking.push({ name: userName, count: rankingProblems.length });\n  });\n\n  return (\n    <Ranking\n      title=\"Fastest Submission Ranking\"\n      ranking={ranking}\n      universalStateLoaded={universalStateLoaded}\n    />\n  );\n};\n","import { ContestId } from '../interfaces/Contest';\nimport { ProblemNo, SubmissionId } from '../interfaces/Problem';\n\nconst BASE_URL = 'https://yukicoder.me';\n\nexport const formatContestUrl = (contestId: ContestId): string =>\n  `${BASE_URL}/contests/${contestId}`;\n\nexport const formatContestLeaderboardUrl = (contestId: ContestId): string =>\n  `${formatContestUrl(contestId)}/table`;\n\nexport const formatProblemUrl = (problemNo: ProblemNo): string =>\n  `${BASE_URL}/problems/no/${problemNo}`;\n\nexport const formatProblemSubmissionsUrl = (problemNo: ProblemNo): string =>\n  `${formatProblemUrl(problemNo)}/submissions`;\n\nexport const formatProblemStatisticsUrl = (problemNo: ProblemNo): string =>\n  `${formatProblemUrl(problemNo)}/statistics`;\n\nexport const formatProblemEditorialUrl = (problemNo: ProblemNo): string =>\n  `${formatProblemUrl(problemNo)}/editorial`;\n\nexport const formatSubmissionUrl = (submissionId: SubmissionId): string =>\n  `${BASE_URL}/submissions/${submissionId}`;\n","/* eslint react/jsx-no-target-blank: 0 */\nimport React from 'react';\n\ntype Props = React.AnchorHTMLAttributes<HTMLAnchorElement>;\n\nexport const NewTabLink: React.FC<Props> = (props) => (\n  <a\n    href={props.href}\n    target=\"_blank\"\n    rel=\"noopener\"\n    className={props.className}\n    title={props.title}\n    id={props.id}\n  >\n    {props.children}\n  </a>\n);\n","import React from 'react';\nimport { formatContestUrl } from '../utils/Url';\nimport { ContestId } from '../interfaces/Contest';\nimport { NewTabLink } from './NewTabLink';\n\ninterface Props {\n  contestId: ContestId;\n  contestName: string;\n  rawContestName?: string;\n}\n\nexport const ContestLink: React.FC<Props> = (props) => {\n  const { contestId, contestName, rawContestName } = props;\n  return contestId >= 0 ? (\n    <NewTabLink\n      href={formatContestUrl(contestId)}\n      title={rawContestName ?? contestName}\n    >\n      {contestName}\n    </NewTabLink>\n  ) : (\n    <span>{contestName}</span>\n  );\n};\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { getDifficultyLevelColor } from '../utils';\nimport { ProblemLevel } from '../interfaces/Problem';\n\nexport const DifficultyStarsFillDefs: React.FC = () => (\n  <svg style={{ height: 0 }}>\n    <defs>\n      <linearGradient id=\"ggold\">\n        <stop offset=\"0\" stopColor=\"#cca11f\" />\n        <stop offset=\"0.5\" stopColor=\"#fff93f\" />\n        <stop offset=\"1\" stopColor=\"#cca11f\" />\n      </linearGradient>\n      <linearGradient id=\"gsilver\">\n        <stop offset=\"0.1\" stopColor=\"#808080\" />\n        <stop offset=\"0.5\" stopColor=\"#f5f5f5\" />\n        <stop offset=\"0.9\" stopColor=\"#808080\" />\n      </linearGradient>\n      <linearGradient id=\"gbronze\">\n        <stop offset=\"0.2\" stopColor=\"#965c2c\" />\n        <stop offset=\"0.5\" stopColor=\"#ffdabd\" />\n        <stop offset=\"0.8\" stopColor=\"#965c2c\" />\n      </linearGradient>\n    </defs>\n  </svg>\n);\n\ninterface DifficultyStarsProps {\n  level: ProblemLevel;\n  showDifficultyLevel: boolean;\n  color: boolean;\n}\n\nexport const DifficultyStars: React.FC<DifficultyStarsProps> = (props) => {\n  const { level, showDifficultyLevel } = props;\n  if (!showDifficultyLevel) return <></>;\n\n  const half = level % 1;\n  const full = level - half;\n\n  const stars = [] as [number, number][];\n  for (let i = 0; i < full; ++i) {\n    stars.push([i, 1]);\n  }\n  if (half > 0) {\n    stars.push([full, half]);\n  }\n\n  const color = props.color ? getDifficultyLevelColor(level) : '#808080';\n  const style = { color };\n  const className =\n    !props.color || level <= 4.5\n      ? 'star-normal'\n      : level <= 5\n      ? 'star-bronze'\n      : level <= 5.5\n      ? 'star-silver'\n      : 'star-gold';\n  return (\n    <>\n      {stars.map((s) =>\n        s[1] === 1 ? (\n          <FontAwesomeIcon\n            icon=\"star\"\n            key={s[0]}\n            style={style}\n            className={className}\n          />\n        ) : (\n          <FontAwesomeIcon\n            icon=\"star-half\"\n            key={s[0]}\n            style={style}\n            className={className}\n          />\n        )\n      )}\n    </>\n  );\n};\n\nexport const DifficultyStarsAbsoluteSpan: React.FC<DifficultyStarsProps> = (\n  props\n) => (\n  <span className=\"table-problem-stars\">\n    <DifficultyStars {...props} />\n  </span>\n);\n\ninterface NormalStarElementProps {\n  className?: string;\n  color?: string;\n}\n\nexport const NormalStarElement: React.FC<NormalStarElementProps> = (props) => (\n  <FontAwesomeIcon icon=\"star\" {...props} />\n);\n","import React from 'react';\nimport {\n  MergedProblem,\n  ProblemSolveStatus,\n  ExtendedContest,\n} from '../interfaces/MergedProblem';\n\nconst formatTimespan = (sec: number): string => {\n  let sign: string;\n  if (sec >= 0) {\n    sign = '';\n  } else {\n    sign = '-';\n    sec *= -1;\n  }\n  if (sec < 3600)\n    return `${sign}${Math.floor(sec / 60)}:${`0${sec % 60}`.slice(-2)}`;\n  return `${sign}${Math.floor(sec / 3600)}:${`0${Math.floor(\n    (sec % 3600) / 60\n  )}`.slice(-2)}:${`0${sec % 60}`.slice(-2)}`;\n};\n\ninterface Props {\n  mergedProblem: MergedProblem;\n  showContestResult: boolean;\n}\n\nexport const SubmitTimespan: React.FC<Props> = (props) => {\n  const { mergedProblem, showContestResult } = props;\n  if (!showContestResult) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"table-problem-timespan\">\n      {mergedProblem.SolveStatus === ProblemSolveStatus.Trying ||\n      mergedProblem.SolveStatus === ProblemSolveStatus.Solved\n        ? ''\n        : formatTimespan(\n            ((mergedProblem.FirstSolveDateNum as number) -\n              (mergedProblem.Contest as ExtendedContest).DateNum) /\n              1000\n          )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { getProblemTypeName } from '../utils';\nimport { ProblemType } from '../interfaces/Problem';\n\ninterface ProblemTypeIconProps {\n  problemType: ProblemType;\n}\n\nexport const ProblemTypeIcon: React.FC<ProblemTypeIconProps> = (props) => {\n  const { problemType } = props;\n  if (!problemType) return <></>;\n\n  switch (problemType) {\n    case ProblemType.Educational:\n      return (\n        <FontAwesomeIcon\n          title={getProblemTypeName(problemType)}\n          icon=\"school\"\n        />\n      );\n    case ProblemType.Scoring:\n      return (\n        <FontAwesomeIcon\n          title={getProblemTypeName(problemType)}\n          icon=\"calculator\"\n        />\n      );\n    case ProblemType.Joke:\n      return (\n        <FontAwesomeIcon\n          title={getProblemTypeName(problemType)}\n          icon=\"laugh-beam\"\n        />\n      );\n    case ProblemType.Unproved:\n      return (\n        <FontAwesomeIcon\n          title={getProblemTypeName(problemType)}\n          icon=\"exclamation-triangle\"\n        />\n      );\n    default:\n      return <></>;\n  }\n};\n\nexport const ProblemTypeIconAbsoluteSpan: React.FC<ProblemTypeIconProps> = (\n  props\n) => (\n  <span className=\"table-problem-type-icon\">\n    <ProblemTypeIcon {...props} />\n  </span>\n);\n\nexport const ProblemTypeIconSpanWithName: React.FC<ProblemTypeIconProps> = (\n  props\n) => (\n  <span>\n    <ProblemTypeIcon {...props} /> {getProblemTypeName(props.problemType)}\n  </span>\n);\n","export const RatingColors = [\n  'Black',\n  'Grey',\n  'Brown',\n  'Green',\n  'Cyan',\n  'Blue',\n  'Yellow',\n  'Orange',\n  'Red',\n] as const;\n\nexport type RatingColor = typeof RatingColors[number];\nexport const getRatingColor = (rating: number): RatingColor => {\n  const index = Math.min(Math.floor(rating / 400), RatingColors.length - 2);\n  return RatingColors[index + 1];\n};\nexport const getRatingColorCode = (ratingColor: RatingColor): string => {\n  switch (ratingColor) {\n    case 'Black':\n      return '#000000'; // black\n    case 'Grey':\n      return '#808080'; // grey\n    case 'Brown':\n      return '#804000'; // brown\n    case 'Green':\n      return '#008000'; // green\n    case 'Cyan':\n      return '#00C0C0'; // cyan\n    case 'Blue':\n      return '#0000FF'; // blue\n    case 'Yellow':\n      return '#C0C000'; // yellow\n    case 'Orange':\n      return '#FF8000'; // orange\n    case 'Red':\n      return '#FF0000'; // red\n  }\n};\n\nexport type RatingColorClassName =\n  | 'difficulty-black'\n  | 'difficulty-grey'\n  | 'difficulty-brown'\n  | 'difficulty-green'\n  | 'difficulty-cyan'\n  | 'difficulty-blue'\n  | 'difficulty-yellow'\n  | 'difficulty-orange'\n  | 'difficulty-red';\nexport const getRatingColorClass = (rating: number): RatingColorClassName => {\n  const ratingColor = getRatingColor(rating);\n  switch (ratingColor) {\n    case 'Black':\n      return 'difficulty-black';\n    case 'Grey':\n      return 'difficulty-grey';\n    case 'Brown':\n      return 'difficulty-brown';\n    case 'Green':\n      return 'difficulty-green';\n    case 'Cyan':\n      return 'difficulty-cyan';\n    case 'Blue':\n      return 'difficulty-blue';\n    case 'Yellow':\n      return 'difficulty-yellow';\n    case 'Orange':\n      return 'difficulty-orange';\n    case 'Red':\n      return 'difficulty-red';\n  }\n};\n","import React from 'react';\nimport { getRatingColorCode, RatingColor } from '../utils/RatingColor';\nimport './TopcoderLikeCircle.css';\n\ntype RatingMetalColor = 'Bronze' | 'Silver' | 'Gold';\nconst getRatingMetalColorCode = (metalColor: RatingMetalColor) => {\n  switch (metalColor) {\n    case 'Bronze':\n      return { base: '#965C2C', highlight: '#FFDABD' };\n    case 'Silver':\n      return { base: '#808080', highlight: 'white' };\n    case 'Gold':\n      return { base: '#FFD700', highlight: 'white' };\n  }\n};\n\ntype RatingColorWithMetal = RatingColor | RatingMetalColor;\nconst getStyleOptions = (color: RatingColorWithMetal, fillRatio: number) => {\n  if (color === 'Bronze' || color === 'Silver' || color === 'Gold') {\n    const metalColor = getRatingMetalColorCode(color);\n    return {\n      borderColor: metalColor.base,\n      background: `linear-gradient(to right, \\\n        ${metalColor.base}, ${metalColor.highlight}, ${metalColor.base})`,\n    };\n  } else {\n    const colorCode = getRatingColorCode(color);\n    return {\n      borderColor: colorCode,\n      background: `linear-gradient(to top, \\\n        ${colorCode} 0%, \\\n        ${colorCode} ${fillRatio * 100}%, \\\n        rgba(0,0,0,0) ${fillRatio * 100}%, \\\n        rgba(0,0,0,0) 100%)`,\n    };\n  }\n};\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n  color: RatingColorWithMetal;\n  rating: number;\n  big?: boolean;\n}\n\nexport const TopcoderLikeCircle: React.FC<Props> = (props) => {\n  const { color, rating } = props;\n  const fillRatio = rating >= 3200 ? 1.0 : (rating % 400) / 400;\n  const className = `topcoder-like-circle \\\n    ${props.big ? 'topcoder-like-circle-big' : ''}`;\n  const styleOptions = getStyleOptions(color, fillRatio);\n  return (\n    <span\n      className={`${className} ${props.className ?? ''}`}\n      id={props.id}\n      style={styleOptions}\n    />\n  );\n};\n","import React, { useState } from 'react';\nimport { Badge, Tooltip } from 'reactstrap';\nimport { Difficulty } from '../interfaces/Difficulty';\nimport { getRatingColor } from '../utils/RatingColor';\nimport { TopcoderLikeCircle } from './TopcoderLikeCircle';\nimport './DifficultyCircle.css';\n\ninterface Props {\n  id?: string;\n  difficulty?: Difficulty;\n}\n\nfunction getColor(difficulty: Difficulty) {\n  if (difficulty < 3200) {\n    return getRatingColor(difficulty);\n  } else if (difficulty < 3600) {\n    return 'Bronze';\n  } else if (difficulty < 4000) {\n    return 'Silver';\n  } else {\n    return 'Gold';\n  }\n}\n\nexport const DifficultyCircle: React.FC<Props> = (props) => {\n  const { id, difficulty } = props;\n  const [tooltipOpen, setTooltipOpen] = useState(false);\n  const toggleTooltipState = (): void => setTooltipOpen(!tooltipOpen);\n  const circleId = `DifficultyCircle-${id ?? ''}`;\n  if (difficulty === undefined || difficulty < 0) {\n    return (\n      <span>\n        <Badge\n          className=\"difficulty-unavailable-circle\"\n          color=\"info\"\n          id={circleId}\n          pill\n        >\n          ?\n        </Badge>\n        <Tooltip\n          placement=\"top\"\n          target={circleId}\n          isOpen={tooltipOpen}\n          toggle={toggleTooltipState}\n        >\n          Difficulty is unavailable.\n        </Tooltip>\n      </span>\n    );\n  }\n  const color = getColor(difficulty);\n\n  return (\n    <>\n      <TopcoderLikeCircle\n        color={color}\n        rating={difficulty}\n        className=\"difficulty-circle\"\n        id={circleId}\n      />\n      <Tooltip\n        placement=\"top\"\n        target={circleId}\n        isOpen={tooltipOpen}\n        toggle={toggleTooltipState}\n      >\n        {`Difficulty: ${difficulty}`}\n      </Tooltip>\n    </>\n  );\n};\n","import React from 'react';\nimport { Row, ButtonGroup, Button } from 'reactstrap';\n\nexport enum ContestTableTab {\n  'regular' = 0,\n  'other' = 1,\n  'other_problems' = 2,\n  'all' = 3,\n}\n\ninterface Props {\n  active: ContestTableTab;\n  setActive: (next: ContestTableTab) => void;\n}\n\nexport const TableTabButtons: React.FC<Props> = (props) => {\n  const { active, setActive } = props;\n  return (\n    <Row>\n      <ButtonGroup className=\"table-tab\">\n        <Button\n          color=\"secondary\"\n          onClick={() => {\n            setActive(ContestTableTab.regular);\n          }}\n          active={active === ContestTableTab.regular}\n        >\n          yukicoder contest\n        </Button>\n        <Button\n          color=\"secondary\"\n          onClick={() => {\n            setActive(ContestTableTab.other);\n          }}\n          active={active === ContestTableTab.other}\n        >\n          Other Contests\n        </Button>\n        <Button\n          color=\"secondary\"\n          onClick={() => {\n            setActive(ContestTableTab.other_problems);\n          }}\n          active={active === ContestTableTab.other_problems}\n        >\n          Other Problems\n        </Button>\n        <Button\n          color=\"secondary\"\n          onClick={() => {\n            setActive(ContestTableTab.all);\n          }}\n          active={active === ContestTableTab.all}\n        >\n          All Problems\n        </Button>\n      </ButtonGroup>\n    </Row>\n  );\n};\n","import React from 'react';\nimport { InlineMath } from 'react-katex';\nimport 'katex/dist/katex.min.css';\n\ninterface Props {\n  text: string;\n}\n\nexport const TexRenderer: React.FC<Props> = (props) => {\n  const { text } = props;\n  const parts = text.split(/(\\$.*?\\$)/g).filter(Boolean);\n\n  return (\n    <span>\n      {parts.map((part, index) => {\n        if (part.startsWith('$') && part.endsWith('$')) {\n          const math = part.slice(1, -1);\n          return (\n            <InlineMath\n              key={index}\n              math={math}\n              renderError={(error) => (\n                <span style={{ color: 'red' }}>\n                  Error: {math}: {error}\n                </span> // エラー時の表示\n              )}\n            />\n          );\n        } else {\n          return <span key={index}>{part}</span>;\n        }\n      })}\n    </span>\n  );\n};\n","import React from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport { formatProblemUrl } from '../utils/Url';\nimport { getDifficultyLevelColorClass } from '../utils';\nimport { getRatingColorClass } from '../utils/RatingColor';\nimport { ProblemNo, ProblemLevel } from '../interfaces/Problem';\nimport { Difficulty } from '../interfaces/Difficulty';\nimport { DifficultyCircle } from './DifficultyCircle';\nimport { NewTabLink } from './NewTabLink';\nimport { TexRenderer } from './TexRenderer';\n\nexport const ProblemLinkColorModes = ['None', 'Level', 'Difficulty'] as const;\nexport type ProblemLinkColorMode = typeof ProblemLinkColorModes[number];\n\ninterface Props {\n  problemNo: ProblemNo;\n  problemTitle: string;\n  level: ProblemLevel;\n  problemLinkColorMode: ProblemLinkColorMode;\n  difficulty?: Difficulty;\n  augmented?: boolean;\n  id?: string;\n  showDifficultyCircle?: boolean;\n}\n\nexport const ProblemLink: React.FC<Props> = (props) => {\n  const {\n    problemNo,\n    problemTitle,\n    level,\n    problemLinkColorMode,\n    difficulty,\n    augmented,\n    id,\n  } = props;\n  const className =\n    problemLinkColorMode === 'Level'\n      ? getDifficultyLevelColorClass(level)\n      : problemLinkColorMode === 'Difficulty' && difficulty !== undefined\n      ? getRatingColorClass(difficulty)\n      : '';\n  const showDifficultyCircle =\n    props.showDifficultyCircle !== undefined\n      ? props.showDifficultyCircle\n      : problemLinkColorMode === 'Difficulty';\n  const experimentalIconId = `experimental-${problemNo}-${id ?? 'dummy'}`;\n  return (\n    <>\n      {showDifficultyCircle && (\n        <DifficultyCircle id={id} difficulty={difficulty} />\n      )}\n      {showDifficultyCircle && augmented && (\n        <>\n          <span id={experimentalIconId} role=\"img\" aria-label=\"experimental\">\n            🧪\n          </span>\n          <UncontrolledTooltip placement=\"top\" target={experimentalIconId}>\n            This estimate is experimental.\n          </UncontrolledTooltip>\n        </>\n      )}\n      <NewTabLink\n        href={formatProblemUrl(problemNo)}\n        className={className}\n        title={problemTitle}\n      >\n        <TexRenderer text={problemTitle} />\n      </NewTabLink>\n    </>\n  );\n};\n","import { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport React from 'react';\nimport dataFormat from 'dateformat';\nimport { Row, Spinner } from 'reactstrap';\nimport { ContestLink } from '../../components/ContestLink';\nimport { DifficultyStarsAbsoluteSpan } from '../../components/DifficultyStars';\nimport { SubmitTimespan } from '../../components/SubmitTimespan';\nimport { ProblemTypeIconAbsoluteSpan } from '../../components/ProblemTypeIcon';\nimport { Contest } from '../../interfaces/Contest';\nimport { ProblemId, ProblemNo } from '../../interfaces/Problem';\nimport {\n  MergedProblem,\n  ProblemSolveStatus,\n} from '../../interfaces/MergedProblem';\nimport {\n  ProblemLink,\n  ProblemLinkColorMode,\n} from '../../components/ProblemLink';\n\ninterface Props {\n  title: string;\n  contests: Contest[];\n  mergedProblemsMap: Map<ProblemId, MergedProblem>;\n  problemLinkColorMode: ProblemLinkColorMode;\n  showDifficultyLevel: boolean;\n  showContestResult: boolean;\n  showContestDate: boolean;\n  universalStateLoaded: boolean;\n}\n\nexport const YukicoderRegularTable: React.FC<Props> = (props) => {\n  const {\n    contests,\n    mergedProblemsMap,\n    problemLinkColorMode,\n    showDifficultyLevel,\n    showContestResult,\n    showContestDate,\n    universalStateLoaded,\n  } = props;\n\n  const maxProblemCount = contests.reduce(\n    (currentCount, contest) =>\n      Math.max(contest.ProblemIdList.length, currentCount),\n    0\n  );\n\n  const header = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].slice(\n    0,\n    maxProblemCount\n  );\n  const solvedFlags = contests.reduce(\n    (flags: ProblemSolveStatus[], curContest: Contest) => {\n      curContest.ProblemIdList.forEach((pid: ProblemId, idx: number) => {\n        const mergedProblem = mergedProblemsMap.get(pid);\n        if (!mergedProblem) return;\n        flags[idx] = Math.min(flags[idx], mergedProblem.SolveStatus);\n      });\n      return flags;\n    },\n    new Array(maxProblemCount).fill(\n      ProblemSolveStatus.BeforeContest\n    ) as ProblemSolveStatus[]\n  );\n\n  return (\n    <Row className=\"my-4\">\n      <h3>{props.title}</h3>\n      {universalStateLoaded ? (\n        <></>\n      ) : (\n        <Spinner\n          style={{ width: '2.5rem', height: '2.5rem', marginLeft: '0.8rem' }}\n        />\n      )}\n      <BootstrapTable\n        data={contests.sort((a, b) => (a.Date < b.Date ? 1 : -1))}\n        tableContainerClass=\"contest-table contest-regular-table\"\n      >\n        <TableHeaderColumn\n          isKey\n          dataField=\"Name\"\n          columnClassName={(_, contest: Contest) => {\n            const solveStatusList = contest.ProblemIdList.map(\n              (pid: ProblemId): ProblemSolveStatus => {\n                const mergedProblem = mergedProblemsMap.get(pid);\n                if (!mergedProblem) return ProblemSolveStatus.Trying;\n                return mergedProblem.SolveStatus;\n              }\n            );\n            if (\n              showContestResult &&\n              solveStatusList.every(\n                (stat) => stat === ProblemSolveStatus.BeforeContest\n              )\n            )\n              return 'table-problem table-problem-solved-before-contest';\n            if (\n              showContestResult &&\n              solveStatusList.every((stat) => stat >= ProblemSolveStatus.Intime)\n            )\n              return 'table-problem table-problem-solved-intime';\n            if (\n              solveStatusList.every((stat) => stat >= ProblemSolveStatus.Solved)\n            )\n              return 'table-problem table-problem-solved';\n            return 'table-problem';\n          }}\n          dataFormat={(_, contest: Contest) => (\n            <>\n              <ContestLink\n                contestId={contest.Id}\n                contestName={contest.Name.replace(/^yukicoder contest /, '')}\n                rawContestName={contest.Name}\n              />\n              {showContestDate && (\n                <div className=\"table-contest-date\">\n                  {dataFormat(new Date(contest.Date), 'yyyy/mm/dd')}\n                </div>\n              )}\n            </>\n          )}\n        >\n          Contest\n        </TableHeaderColumn>\n        {header.map((c, i) => (\n          <TableHeaderColumn\n            dataField={c}\n            key={c}\n            className={\n              solvedFlags[i] === ProblemSolveStatus.BeforeContest\n                ? 'table-problem table-problem-solved-before-contest'\n                : solvedFlags[i] === ProblemSolveStatus.Intime\n                ? 'table-problem table-problem-solved-intime'\n                : solvedFlags[i] === ProblemSolveStatus.Solved\n                ? 'table-problem table-problem-solved'\n                : 'table-problem'\n            }\n            columnClassName={(_, contest: Contest) => {\n              const pid =\n                i in contest.ProblemIdList\n                  ? contest.ProblemIdList[i]\n                  : undefined;\n              if (!pid) {\n                return 'table-problem-empty';\n              }\n              const mergedProblem = mergedProblemsMap.get(pid);\n              if (\n                !mergedProblem ||\n                mergedProblem.SolveStatus === ProblemSolveStatus.Trying\n              ) {\n                return 'table-problem';\n              }\n              if (\n                !showContestResult ||\n                mergedProblem.SolveStatus === ProblemSolveStatus.Solved\n              )\n                return 'table-problem table-problem-solved';\n              if (mergedProblem.SolveStatus === ProblemSolveStatus.Intime)\n                return 'table-problem table-problem-solved-intime';\n              return 'table-problem table-problem-solved-before-contest';\n            }}\n            dataFormat={(_, contest: Contest) => {\n              const pid =\n                i in contest.ProblemIdList\n                  ? contest.ProblemIdList[i]\n                  : undefined;\n              if (!pid) {\n                return '';\n              }\n              const mergedProblem = mergedProblemsMap.get(pid);\n              if (!mergedProblem) {\n                return (\n                  <span>\n                    (Id=\n                    {pid})\n                  </span>\n                );\n              }\n\n              const problemTitle = `${header[i]}. ${mergedProblem.Title}`;\n\n              return (\n                <>\n                  <DifficultyStarsAbsoluteSpan\n                    level={mergedProblem.Level}\n                    showDifficultyLevel={showDifficultyLevel}\n                    color={problemLinkColorMode === 'Level'}\n                  />\n                  <ProblemTypeIconAbsoluteSpan\n                    problemType={mergedProblem.ProblemType}\n                  />\n                  <ProblemLink\n                    problemNo={mergedProblem.No as ProblemNo}\n                    problemTitle={problemTitle}\n                    level={mergedProblem.Level}\n                    problemLinkColorMode={problemLinkColorMode}\n                    id={`lnk-regular-table-${mergedProblem.ProblemId}`}\n                    difficulty={mergedProblem.Difficulty}\n                    augmented={mergedProblem.Augmented}\n                  />\n                  <SubmitTimespan\n                    mergedProblem={mergedProblem}\n                    showContestResult={showContestResult}\n                  />\n                </>\n              );\n            }}\n          >\n            {c}\n          </TableHeaderColumn>\n        ))}\n      </BootstrapTable>\n    </Row>\n  );\n};\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport const SolvedCheckIcon: React.FC = () => (\n  <FontAwesomeIcon\n    icon=\"check\"\n    color=\"green\"\n    style={{ marginRight: '0.2rem' }}\n  />\n);\n","import { Table, Row, Spinner } from 'reactstrap';\nimport React from 'react';\nimport dataFormat from 'dateformat';\nimport {\n  ProblemLink,\n  ProblemLinkColorMode,\n} from '../../components/ProblemLink';\nimport { ContestLink } from '../../components/ContestLink';\nimport { SubmitTimespan } from '../../components/SubmitTimespan';\nimport { SolvedCheckIcon } from '../../components/SolvedCheckIcon';\nimport { DifficultyStarsAbsoluteSpan } from '../../components/DifficultyStars';\nimport { ProblemTypeIconAbsoluteSpan } from '../../components/ProblemTypeIcon';\nimport { getHeader } from '../../utils';\nimport { Contest } from '../../interfaces/Contest';\nimport { ProblemId, ProblemNo } from '../../interfaces/Problem';\nimport {\n  MergedProblem,\n  ProblemSolveStatus,\n} from '../../interfaces/MergedProblem';\n\ninterface Props {\n  title: string;\n  contests: Contest[];\n  mergedProblemsMap: Map<ProblemId, MergedProblem>;\n  problemLinkColorMode: ProblemLinkColorMode;\n  showDifficultyLevel: boolean;\n  showContestResult: boolean;\n  showContestDate: boolean;\n  universalStateLoaded: boolean;\n}\n\nexport const ContestTable: React.FC<Props> = (props) => {\n  const {\n    contests,\n    mergedProblemsMap,\n    problemLinkColorMode,\n    showDifficultyLevel,\n    showContestResult,\n    showContestDate,\n    universalStateLoaded,\n  } = props;\n\n  return (\n    <>\n      <Row className=\"my-4\">\n        <h3>{props.title}</h3>\n        {universalStateLoaded ? (\n          <></>\n        ) : (\n          <Spinner\n            style={{ width: '2.5rem', height: '2.5rem', marginLeft: '0.8rem' }}\n          />\n        )}\n      </Row>\n      <div className=\"my-inner-container\">\n        {contests.map((contest) => (\n          <div key={contest.Id} className=\"contest-table\">\n            <strong>\n              {contest.ProblemIdList.map((pid: ProblemId) =>\n                mergedProblemsMap.get(pid)\n              ).every(\n                (mergedProblem) =>\n                  mergedProblem &&\n                  mergedProblem.SolveStatus >= ProblemSolveStatus.Solved\n              ) ? (\n                <SolvedCheckIcon />\n              ) : (\n                <></>\n              )}\n              <ContestLink contestId={contest.Id} contestName={contest.Name} />\n            </strong>\n            {showContestDate && (\n              <span className=\"table-contest-date-span\">\n                ({dataFormat(Date.parse(contest.Date), 'yyyy/mm/dd')})\n              </span>\n            )}\n            <Table striped bordered hover className=\"contest-other-table\">\n              <tbody>\n                <tr>\n                  {contest.ProblemIdList.map((pid: ProblemId, i) => {\n                    if (pid < 0) return null;\n                    const mergedProblem = mergedProblemsMap.get(pid);\n                    if (!mergedProblem) {\n                      return (\n                        <td key={pid}>\n                          (Id=\n                          {pid})\n                        </td>\n                      );\n                    }\n                    const className =\n                      mergedProblem.SolveStatus === ProblemSolveStatus.Trying\n                        ? 'table-problem'\n                        : !showContestResult ||\n                          mergedProblem.SolveStatus ===\n                            ProblemSolveStatus.Solved\n                        ? 'table-problem table-problem-solved'\n                        : mergedProblem.SolveStatus ===\n                          ProblemSolveStatus.Intime\n                        ? 'table-problem table-problem-solved-intime'\n                        : 'table-problem table-problem-solved-before-contest';\n\n                    const problemTitle = `${getHeader(i)}. ${\n                      mergedProblem.Title\n                    }`;\n\n                    return (\n                      <td key={pid} className={className}>\n                        <DifficultyStarsAbsoluteSpan\n                          level={mergedProblem.Level}\n                          showDifficultyLevel={showDifficultyLevel}\n                          color={problemLinkColorMode === 'Level'}\n                        />\n                        <ProblemTypeIconAbsoluteSpan\n                          problemType={mergedProblem.ProblemType}\n                        />\n                        <ProblemLink\n                          problemNo={mergedProblem.No as ProblemNo}\n                          problemTitle={problemTitle}\n                          level={mergedProblem.Level}\n                          problemLinkColorMode={problemLinkColorMode}\n                          id={`lnk-contest-table-${mergedProblem.ProblemId}`}\n                          difficulty={mergedProblem.Difficulty}\n                          augmented={mergedProblem.Augmented}\n                        />\n                        <SubmitTimespan\n                          mergedProblem={mergedProblem}\n                          showContestResult={showContestResult}\n                        />\n                      </td>\n                    );\n                  })}\n                </tr>\n              </tbody>\n            </Table>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { Row, Col, Table, UncontrolledTooltip, Spinner } from 'reactstrap';\nimport {\n  ProblemLink,\n  ProblemLinkColorMode,\n} from '../../components/ProblemLink';\nimport { DifficultyStars } from '../../components/DifficultyStars';\nimport { range } from '../../utils';\nimport './AllProblemsTable.css';\nimport { ProblemNo } from '../../interfaces/Problem';\nimport {\n  MergedProblem,\n  ProblemSolveStatus,\n} from '../../interfaces/MergedProblem';\n\ninterface Props {\n  title: string;\n  mergedProblems: MergedProblem[];\n  problemLinkColorMode: ProblemLinkColorMode;\n  showDifficultyLevel: boolean;\n  showContestResult: boolean;\n  universalStateLoaded: boolean;\n}\n\nexport const AllProblemsTable: React.FC<Props> = (props) => {\n  const {\n    mergedProblems,\n    problemLinkColorMode,\n    showDifficultyLevel,\n    showContestResult,\n    universalStateLoaded,\n  } = props;\n\n  const problemTables = mergedProblems\n    .filter((a) => a.No !== null)\n    .sort((a, b) => (a.No as ProblemNo) - (b.No as ProblemNo))\n    .reduce((prevMap, problem) => {\n      const no = problem.No as ProblemNo;\n      const key = Math.floor(no < 3000 ? (no - 1) / 100 : no / 100);\n      if (!prevMap.has(key)) {\n        prevMap.set(key, []);\n      }\n      (prevMap.get(key) as MergedProblem[]).push(problem);\n      return prevMap;\n    }, new Map<number, MergedProblem[]>());\n  const problemTableEntries = [] as [number, MergedProblem[]][];\n  problemTables.forEach((problems, key) => {\n    problemTableEntries.push([key, problems]);\n  });\n  return (\n    <>\n      <Row className=\"my-4\">\n        <h3>{props.title}</h3>\n        {universalStateLoaded ? (\n          <></>\n        ) : (\n          <Spinner\n            style={{ width: '2.5rem', height: '2.5rem', marginLeft: '0.8rem' }}\n          />\n        )}\n      </Row>\n      <div className=\"my-inner-container\">\n        <Row className=\"my-4\">\n          {problemTableEntries.map(([key, curTableProblems]) => (\n            <Col\n              key={key}\n              className=\"text-center\"\n              xs=\"12\"\n              sm=\"12\"\n              md=\"6\"\n              lg=\"6\"\n              xl=\"4\"\n            >\n              <Table striped bordered hover className=\"problemsTable\">\n                <tbody>\n                  {range(0, 9).map((rowidx: number) => {\n                    const offset = rowidx * 10;\n                    if (curTableProblems.length <= offset) {\n                      return null;\n                    }\n                    return (\n                      <tr key={offset}>\n                        {range(0, 9).map((colidx) => {\n                          const idx = offset + colidx;\n                          if (idx >= curTableProblems.length) return null;\n                          const mergedProblem = curTableProblems[idx];\n                          let className: string;\n                          if (\n                            mergedProblem.SolveStatus ===\n                            ProblemSolveStatus.Trying\n                          ) {\n                            className = 'table-problem';\n                          } else if (!mergedProblem.Contest) {\n                            className = 'table-problem table-problem-solved';\n                          } else {\n                            if (\n                              !showContestResult ||\n                              mergedProblem.SolveStatus ===\n                                ProblemSolveStatus.Solved\n                            )\n                              className = 'table-problem table-problem-solved';\n                            else if (\n                              mergedProblem.SolveStatus ===\n                              ProblemSolveStatus.Intime\n                            )\n                              className =\n                                'table-problem table-problem-solved-intime';\n                            else\n                              className =\n                                'table-problem table-problem-solved-before-contest';\n                          }\n\n                          const elementId = `AllProblems_td_${\n                            mergedProblem.No as number\n                          }`;\n                          return (\n                            <td\n                              key={mergedProblem.ProblemId}\n                              className={className}\n                              id={elementId}\n                            >\n                              <ProblemLink\n                                problemNo={mergedProblem.No as ProblemNo}\n                                problemTitle={`${mergedProblem.No as number}`}\n                                level={mergedProblem.Level}\n                                problemLinkColorMode={problemLinkColorMode}\n                                id={`AllProblems_td_${\n                                  mergedProblem.No as number\n                                }`}\n                                difficulty={mergedProblem.Difficulty}\n                                showDifficultyCircle={false}\n                              />\n                              <UncontrolledTooltip\n                                target={elementId}\n                                style={{\n                                  backgroundColor: 'rgba(240, 240, 240, 1.0)',\n                                  border: '1px solid #808080',\n                                  opacity: '1.0',\n                                }}\n                              >\n                                <div>\n                                  <ProblemLink\n                                    problemNo={mergedProblem.No as ProblemNo}\n                                    problemTitle={`${mergedProblem.Title}`}\n                                    level={mergedProblem.Level}\n                                    problemLinkColorMode={problemLinkColorMode}\n                                    id={`AllProblems_td_${\n                                      mergedProblem.No as number\n                                    }`}\n                                    difficulty={mergedProblem.Difficulty}\n                                  />\n                                </div>\n                                <div>\n                                  <DifficultyStars\n                                    level={mergedProblem.Level}\n                                    showDifficultyLevel={showDifficultyLevel}\n                                    color={problemLinkColorMode === 'Level'}\n                                  />\n                                </div>\n                              </UncontrolledTooltip>\n                            </td>\n                          );\n                        })}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </Table>\n            </Col>\n          ))}\n        </Row>\n      </div>\n    </>\n  );\n};\n","import { Difficulties, DifficultyDetailData } from '../interfaces/Difficulty';\nimport { ProblemId } from '../interfaces/Problem';\n\nconst BASE_URL = 'https://iilj.github.io/yukicoder-leaderboard-crawler/json';\n\nconst fetchJson = async <T>(url: string): Promise<T> => {\n  const res = await fetch(url);\n  if (!res.ok) {\n    throw new Error(res.statusText);\n  }\n  const obj = (await res.json()) as T | { Message: string };\n  return obj as T;\n};\n\nconst fetchDifficulties = () =>\n  fetchJson<Difficulties>(`${BASE_URL}/summary_v2.json`);\n\nconst fetchDifficultyDetailData = (problemId: ProblemId) =>\n  fetchJson<DifficultyDetailData>(`${BASE_URL}/detail/${problemId}.json`);\n\n// contests raw array\nlet CACHED_DIFFICULTIES: Difficulties;\nexport const cachedDifficultyData = async (): Promise<Difficulties> => {\n  if (CACHED_DIFFICULTIES === undefined) {\n    try {\n      CACHED_DIFFICULTIES = await fetchDifficulties();\n    } catch (e) {\n      console.log(e);\n      CACHED_DIFFICULTIES = {} as Difficulties;\n    }\n  }\n  return CACHED_DIFFICULTIES;\n};\n\nexport const difficultyDetailDataUnit = {\n  difficulty: -1,\n  coef: -1,\n  bias: -1,\n  augmented: false,\n  detail: [],\n} as DifficultyDetailData;\nexport const cachedDifficultyDetailData = async (\n  problemId: ProblemId\n): Promise<DifficultyDetailData> => {\n  if (CACHED_DIFFICULTIES === undefined) {\n    try {\n      CACHED_DIFFICULTIES = await fetchDifficulties();\n    } catch (e) {\n      console.log(e);\n      CACHED_DIFFICULTIES = {} as Difficulties;\n    }\n  }\n  if (problemId in CACHED_DIFFICULTIES) {\n    return await fetchDifficultyDetailData(problemId);\n  }\n  return difficultyDetailDataUnit;\n};\n","import React from 'react';\n\nexport const useLocalStorage = <T>(\n  key: string,\n  defaultValue: T\n): [T, React.Dispatch<React.SetStateAction<T>>] => {\n  key = `_yukicoder_problems_${key}`;\n  const a = localStorage.getItem(key);\n  const [value, setValue] = React.useState(\n    a ? (JSON.parse(a) as T) : defaultValue\n  );\n\n  React.useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value, key]);\n\n  return [value, setValue];\n};\n","import { Contest, ContestId } from '../interfaces/Contest';\nimport { Problem, ProblemId, ProblemNo } from '../interfaces/Problem';\nimport { SolvedProblem, FirstSolvedProblem } from '../interfaces/SolvedProblem';\nimport { RankingProblem } from '../interfaces/RankingProblem';\nimport {\n  MergedProblem,\n  ExtendedContest,\n  ProblemSolveStatus,\n  RankingMergedProblem,\n} from '../interfaces/MergedProblem';\nimport { Difficulties } from '../interfaces/Difficulty';\n\nexport const mergeSolveStatus = (\n  problems: Problem[],\n  contests: Contest[],\n  problemContestMap: Map<ProblemId, ContestId>,\n  solvedProblemsMap: Map<ProblemId, SolvedProblem>,\n  firstSolvedProblemsMap: Map<ProblemId, FirstSolvedProblem>,\n  difficulties: Difficulties\n): MergedProblem[] => {\n  const extendedContestMap = contests.reduce(\n    (map, contest) =>\n      map.set(contest.Id, {\n        ...contest,\n        DateNum: Date.parse(contest.Date),\n        EndDateNum: Date.parse(contest.EndDate),\n      }),\n    new Map<ContestId, ExtendedContest>()\n  );\n  const problemIndexMap = contests.reduce((map, contest) => {\n    contest.ProblemIdList.forEach((pid, i) => {\n      if (pid < 0) return;\n      map.set(pid, i);\n    });\n    return map;\n  }, new Map<ProblemId, number>());\n  const mergedProblems = problems.map((problem): MergedProblem => {\n    const DateNum = Date.parse(problem.Date as string);\n    const contestId = problemContestMap.get(problem.ProblemId);\n    const extendedContest = contestId\n      ? extendedContestMap.get(contestId)\n      : undefined;\n    const solvedProblem = solvedProblemsMap.get(problem.ProblemId);\n    const firstSolvedProblem = firstSolvedProblemsMap.get(problem.ProblemId);\n    const Difficulty =\n      problem.ProblemId in difficulties\n        ? difficulties[problem.ProblemId][0]\n        : undefined;\n    const Augmented =\n      problem.ProblemId in difficulties\n        ? difficulties[problem.ProblemId][3]\n        : undefined;\n    if (!extendedContest) {\n      // コンテスト情報なし，ACしたかどうかのみ\n      const SolveDate = solvedProblem?.Date;\n      const SolveDateNum = SolveDate ? Date.parse(SolveDate) : undefined;\n      const FirstSolveDate = firstSolvedProblem?.Date;\n      const FirstSolveDateNum = FirstSolveDate\n        ? Date.parse(FirstSolveDate)\n        : undefined;\n      const SolveStatus =\n        solvedProblem || FirstSolveDate\n          ? ProblemSolveStatus.Solved\n          : ProblemSolveStatus.Trying;\n      return {\n        ...problem,\n        DateNum,\n        SolveDate,\n        SolveDateNum,\n        FirstSolveDate,\n        FirstSolveDateNum,\n        SolveStatus,\n        Difficulty,\n        Augmented,\n        Index: undefined,\n      };\n    }\n    // assert コンテスト情報あり\n\n    if (!firstSolvedProblem) {\n      if (!solvedProblem) {\n        // 未 AC\n        return {\n          ...problem,\n          Contest: extendedContest,\n          DateNum,\n          SolveStatus: ProblemSolveStatus.Trying,\n          Difficulty,\n          Augmented,\n          Index: problemIndexMap.get(problem.ProblemId),\n        };\n      } else {\n        // 何故か firstSolvedProblem のほうに入っていないことがあるので polyfill\n        // firstSolvedProblem の代わりに solvedProblem を使う\n        const SolveDate = solvedProblem?.Date;\n        const SolveDateNum = SolveDate ? Date.parse(SolveDate) : undefined;\n        const FirstSolveDate = solvedProblem.Date;\n        const FirstSolveDateNum = Date.parse(FirstSolveDate);\n        const SolveStatus =\n          FirstSolveDateNum > extendedContest.EndDateNum\n            ? ProblemSolveStatus.Solved\n            : FirstSolveDateNum >= extendedContest.DateNum\n            ? ProblemSolveStatus.Intime\n            : ProblemSolveStatus.BeforeContest;\n        return {\n          ...problem,\n          Contest: extendedContest,\n          DateNum,\n          SolveDate,\n          SolveDateNum,\n          FirstSolveDate,\n          FirstSolveDateNum,\n          SolveStatus,\n          Difficulty,\n          Augmented,\n          Index: problemIndexMap.get(problem.ProblemId),\n        };\n      }\n    }\n\n    // assert AC 済み\n    const SolveDate = solvedProblem?.Date;\n    const SolveDateNum = SolveDate ? Date.parse(SolveDate) : undefined;\n    const FirstSolveDate = firstSolvedProblem.Date;\n    const FirstSolveDateNum = Date.parse(FirstSolveDate);\n    const SolveStatus =\n      FirstSolveDateNum > extendedContest.EndDateNum\n        ? ProblemSolveStatus.Solved\n        : FirstSolveDateNum >= extendedContest.DateNum\n        ? ProblemSolveStatus.Intime\n        : ProblemSolveStatus.BeforeContest;\n    return {\n      ...problem,\n      Contest: extendedContest,\n      DateNum,\n      SolveDate,\n      SolveDateNum,\n      FirstSolveDate,\n      FirstSolveDateNum,\n      SolveStatus,\n      Difficulty,\n      Augmented,\n      Index: problemIndexMap.get(problem.ProblemId),\n    };\n  });\n  return mergedProblems;\n};\n\nexport const mergedProblemsToMap = (\n  mergedProblems: MergedProblem[]\n): Map<ProblemId, MergedProblem> => {\n  return mergedProblems.reduce(\n    (map, mergedProblem) => map.set(mergedProblem.ProblemId, mergedProblem),\n    new Map<ProblemId, MergedProblem>()\n  );\n};\n\nexport const mergeRanking = (\n  mergedProblems: MergedProblem[],\n  speederProblemMap: Map<ProblemNo, RankingProblem>,\n  golferProblemMap: Map<ProblemNo, RankingProblem>,\n  golferPureProblemMap: Map<ProblemNo, RankingProblem>\n): RankingMergedProblem[] =>\n  mergedProblems.map((mergedProblem): RankingMergedProblem => {\n    const FastestRankingProblem =\n      typeof mergedProblem.No === 'number'\n        ? speederProblemMap.get(mergedProblem.No)\n        : undefined;\n    const ShortestRankingProblem =\n      typeof mergedProblem.No === 'number'\n        ? golferProblemMap.get(mergedProblem.No)\n        : undefined;\n    const PureShortestRankingProblem =\n      typeof mergedProblem.No === 'number'\n        ? golferPureProblemMap.get(mergedProblem.No)\n        : undefined;\n    const ContestName = mergedProblem.Contest?.Name;\n    const FastestRankingUserName = FastestRankingProblem?.UserName;\n    const ShortestRankingUserName = ShortestRankingProblem?.UserName;\n    const PureShortestRankingUserName = PureShortestRankingProblem?.UserName;\n    return {\n      ...mergedProblem,\n      FastestRankingProblem,\n      ShortestRankingProblem,\n      PureShortestRankingProblem,\n      ContestName,\n      FastestRankingUserName,\n      ShortestRankingUserName,\n      PureShortestRankingUserName,\n    };\n  });\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Row,\n  FormGroup,\n  Label,\n  Input,\n  Spinner,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from 'reactstrap';\n\nimport { YukicoderRegularTable } from './YukicoderRegularTable';\nimport { ContestTable } from './ContestTable';\nimport { AllProblemsTable } from './AllProblemsTable';\nimport { TableTabButtons, ContestTableTab } from './TableTab';\nimport { useLocalStorage } from '../../utils/LocalStorage';\nimport * as TypedCachedApiClient from '../../utils/TypedCachedApiClient';\nimport * as DifficultyDataClient from '../../utils/DifficultyDataClient';\nimport { mergeSolveStatus, mergedProblemsToMap } from '../../utils/MergeProcs';\nimport { DifficultyStarsFillDefs } from '../../components/DifficultyStars';\nimport { Contest, ContestId } from '../../interfaces/Contest';\nimport { Problem, ProblemId } from '../../interfaces/Problem';\nimport {\n  SolvedProblem,\n  FirstSolvedProblem,\n} from '../../interfaces/SolvedProblem';\nimport { MergedProblem } from '../../interfaces/MergedProblem';\nimport { Difficulties } from '../../interfaces/Difficulty';\nimport { ProblemLinkColorMode } from '../../components/ProblemLink';\n\n/**\n * Wrap element to switch visibility.\n */\nconst ContestWrapper: React.FC<{\n  display: boolean;\n}> = (props) => <>{props.display ? props.children : <></>}</>;\n\nconst initialUniversalState = {\n  problems: [] as Problem[],\n  contests: [] as Contest[],\n  contestMap: new Map<ContestId, Contest>(),\n  problemContestMap: new Map<ProblemId, ContestId>(),\n  difficulties: {} as Difficulties,\n};\n\nconst initialUserState = {\n  solvedProblemsMap: new Map<ProblemId, SolvedProblem>(),\n  firstSolvedProblemsMap: new Map<ProblemId, FirstSolvedProblem>(),\n};\n\nconst initialMergedState = {\n  mergedProblems: [] as MergedProblem[],\n  mergedProblemsMap: new Map<ProblemId, MergedProblem>(),\n};\n\nexport const TablePage: React.FC = () => {\n  const { param, user } = useParams() as {\n    param: TypedCachedApiClient.UserParam;\n    user: string;\n  };\n\n  const [universalState, setUniversalState] = useState(initialUniversalState);\n  const [userState, setUserState] = useState(initialUserState);\n  const [mergedState, setMergedState] = useState(initialMergedState);\n  const [universalStateLoaded, setUniversalStateLoaded] = useState(false);\n  const [userStateLoaded, setUserStateLoaded] = useState(false);\n  const [mergedStateLoaded, setMergedStateLoaded] = useState(false);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getUniversalInfo = async () => {\n      setUniversalStateLoaded(false);\n      const [problems, contests, difficulties] = await Promise.all([\n        TypedCachedApiClient.cachedProblemArray(),\n        TypedCachedApiClient.cachedContestArray(),\n        DifficultyDataClient.cachedDifficultyData(),\n      ]);\n      const [contestMap, problemContestMap] = await Promise.all([\n        TypedCachedApiClient.cachedContestMap(),\n        TypedCachedApiClient.cachedProblemContestMap(),\n      ]);\n\n      if (!unmounted) {\n        setUniversalState({\n          problems,\n          contests,\n          contestMap,\n          problemContestMap,\n          difficulties,\n        });\n        setUniversalStateLoaded(true);\n      }\n    };\n    void getUniversalInfo();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, []);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getUserInfo = async () => {\n      setUserStateLoaded(false);\n      const [solvedProblemsMap, firstSolvedProblemsMap] =\n        param && user\n          ? await Promise.all([\n              TypedCachedApiClient.cachedSolvedProblemMap(param, user),\n              TypedCachedApiClient.cachedFirstSolvedProblemMap(param, user),\n            ])\n          : [\n              new Map<ProblemId, SolvedProblem>(),\n              new Map<ProblemId, FirstSolvedProblem>(),\n            ];\n\n      if (!unmounted) {\n        setUserState({\n          solvedProblemsMap,\n          firstSolvedProblemsMap,\n        });\n        setUserStateLoaded(true);\n      }\n    };\n    void getUserInfo();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, [param, user]);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getMergedInfo = () => {\n      setMergedStateLoaded(false);\n      const mergedProblems = mergeSolveStatus(\n        universalState.problems,\n        universalState.contests,\n        universalState.problemContestMap,\n        userState.solvedProblemsMap,\n        userState.firstSolvedProblemsMap,\n        universalState.difficulties\n      );\n      const mergedProblemsMap = mergedProblemsToMap(mergedProblems);\n\n      if (!unmounted) {\n        setMergedState({\n          mergedProblems,\n          mergedProblemsMap,\n        });\n        setMergedStateLoaded(true);\n      }\n    };\n    void getMergedInfo();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, [universalState, userState]);\n\n  const { contests } = universalState;\n  const { mergedProblems, mergedProblemsMap } = mergedState;\n\n  const [colorMode, setColorMode] = useLocalStorage<ProblemLinkColorMode>(\n    'TablePage_colorMode',\n    'Level'\n  );\n  const [showDifficultyLevel, setShowDifficultyLevel] = useLocalStorage(\n    'TablePage_showDifficultyLevel',\n    true\n  );\n  const [showContestResult, setShowContestResult] = useLocalStorage(\n    'TablePage_showContestResult',\n    true\n  );\n  const [showContestDate, setShowContestDate] = useLocalStorage(\n    'TablePage_showContestDate',\n    false\n  );\n  const [activeTab, setActiveTab] = useLocalStorage(\n    'TablePage_activeTab',\n    ContestTableTab.regular\n  );\n\n  const yukicoderContests = [] as Contest[];\n  const otherContests = [] as Contest[];\n  const otherProblems = [] as Contest[];\n  const regexpYukicoderContest = /^\\s*yukicoder\\s+contest\\s+\\d+/;\n  const regexpOpenContest = /\\(Open\\)$/;\n  contests.forEach((contest) => {\n    if (regexpYukicoderContest.exec(contest.Name)) {\n      if (contest.ProblemIdList.length <= 8) yukicoderContests.push(contest);\n      else otherContests.push(contest);\n    } else if (regexpOpenContest.exec(contest.Name)) {\n      otherProblems.push(contest);\n    } else otherContests.push(contest);\n  });\n\n  // filter sigle problems\n  otherProblems.push({\n    Id: -1,\n    Name: 'Others',\n    Date: '',\n    EndDate: '',\n    ProblemIdList: mergedProblems.reduce((ar, mergedProblem) => {\n      if (!mergedProblem.Contest) ar.push(mergedProblem.ProblemId);\n      return ar;\n    }, [] as ProblemId[]),\n  } as Contest);\n\n  return (\n    <>\n      {userStateLoaded && mergedStateLoaded ? (\n        <></>\n      ) : (\n        <Spinner\n          style={{\n            width: '3rem',\n            height: '3rem',\n            position: 'fixed',\n            right: '10px',\n            bottom: '10px',\n          }}\n        />\n      )}\n      <Row className=\"my-4\">\n        <FormGroup check inline>\n          <Label check>\n            <Input\n              type=\"checkbox\"\n              checked={showContestResult}\n              onChange={(e) => setShowContestResult(e.target.checked)}\n            />\n            Show Contest Result\n          </Label>\n        </FormGroup>\n        <FormGroup check inline>\n          <Label check>\n            <Input\n              type=\"checkbox\"\n              checked={showDifficultyLevel}\n              onChange={(e) => setShowDifficultyLevel(e.target.checked)}\n            />\n            Show Level Stars\n          </Label>\n        </FormGroup>\n        <FormGroup check inline>\n          <Label check>\n            <Input\n              type=\"checkbox\"\n              checked={showContestDate}\n              onChange={(e) => setShowContestDate(e.target.checked)}\n            />\n            Show Contest Date\n          </Label>\n        </FormGroup>\n        <UncontrolledDropdown>\n          <DropdownToggle caret>\n            {\n              {\n                None: 'Color By',\n                Level: 'Level',\n                Difficulty: 'Difficulty (experimental)',\n              }[colorMode]\n            }\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem header>Color By</DropdownItem>\n            <DropdownItem onClick={(): void => setColorMode('None')}>\n              None\n            </DropdownItem>\n            <DropdownItem onClick={(): void => setColorMode('Level')}>\n              Level\n            </DropdownItem>\n            <DropdownItem onClick={(): void => setColorMode('Difficulty')}>\n              Difficulty (experimental)\n            </DropdownItem>\n          </DropdownMenu>\n        </UncontrolledDropdown>\n      </Row>\n      <TableTabButtons active={activeTab} setActive={setActiveTab} />\n      <DifficultyStarsFillDefs />\n      <ContestWrapper display={activeTab === ContestTableTab.regular}>\n        <YukicoderRegularTable\n          contests={yukicoderContests}\n          title=\"yukicoder contest\"\n          mergedProblemsMap={mergedProblemsMap}\n          showDifficultyLevel={showDifficultyLevel}\n          problemLinkColorMode={colorMode}\n          showContestResult={showContestResult}\n          showContestDate={showContestDate}\n          universalStateLoaded={universalStateLoaded}\n        />\n      </ContestWrapper>\n      <ContestWrapper display={activeTab === ContestTableTab.other}>\n        <ContestTable\n          contests={otherContests}\n          title=\"Other Contests\"\n          mergedProblemsMap={mergedProblemsMap}\n          showDifficultyLevel={showDifficultyLevel}\n          problemLinkColorMode={colorMode}\n          showContestResult={showContestResult}\n          showContestDate={showContestDate}\n          universalStateLoaded={universalStateLoaded}\n        />\n      </ContestWrapper>\n      <ContestWrapper display={activeTab === ContestTableTab.other_problems}>\n        <ContestTable\n          contests={otherProblems}\n          title=\"Other Problems\"\n          mergedProblemsMap={mergedProblemsMap}\n          showDifficultyLevel={showDifficultyLevel}\n          problemLinkColorMode={colorMode}\n          showContestResult={showContestResult}\n          showContestDate={showContestDate}\n          universalStateLoaded={universalStateLoaded}\n        />\n      </ContestWrapper>\n      <ContestWrapper display={activeTab === ContestTableTab.all}>\n        <AllProblemsTable\n          mergedProblems={mergedProblems}\n          title=\"All Problems\"\n          problemLinkColorMode={colorMode}\n          showDifficultyLevel={showDifficultyLevel}\n          showContestResult={showContestResult}\n          universalStateLoaded={universalStateLoaded}\n        />\n      </ContestWrapper>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport Table from 'reactstrap/lib/Table';\nimport { Button, FormGroup, ButtonGroup } from 'reactstrap';\nimport { DifficultyStarsAbsoluteSpan } from '../../components/DifficultyStars';\nimport { ProblemTypeIcon } from '../../components/ProblemTypeIcon';\nimport { getDifficultyLevelColorClass } from '../../utils';\nimport {\n  Problem,\n  ProblemLevels,\n  ProblemLevel,\n  ProblemType,\n} from '../../interfaces/Problem';\nimport { FirstSolvedProblem } from '../../interfaces/SolvedProblem';\nimport { ProblemLinkColorMode } from '../../components/ProblemLink';\n\ninterface Props {\n  problems: Problem[];\n  firstSolvedProblems: FirstSolvedProblem[];\n  user: string;\n  problemLinkColorMode: ProblemLinkColorMode;\n}\n\nexport const DifficultyLevelTable: React.FC<Props> = (props) => {\n  const { problems, firstSolvedProblems, user, problemLinkColorMode } = props;\n  const [includingEducational, setIncludingEducational] = useState(true);\n  const [includingScoring, setIncludingScoring] = useState(true);\n  const [includingJoke, setIncludingJoke] = useState(true);\n  const [includingUnproved, setIncludingUnproved] = useState(true);\n\n  const difficultyLevelsSolvedCountMap = firstSolvedProblems.reduce(\n    (map, firstSolvedProblem) =>\n      firstSolvedProblem.ProblemType === ProblemType.Normal ||\n      (firstSolvedProblem.ProblemType === ProblemType.Educational &&\n        includingEducational) ||\n      (firstSolvedProblem.ProblemType === ProblemType.Scoring &&\n        includingScoring) ||\n      (firstSolvedProblem.ProblemType === ProblemType.Joke && includingJoke) ||\n      (firstSolvedProblem.ProblemType === ProblemType.Unproved &&\n        includingUnproved)\n        ? map.set(\n            firstSolvedProblem.Level,\n            (map.get(firstSolvedProblem.Level) as ProblemLevel) + 1\n          )\n        : map,\n    ProblemLevels.reduce(\n      (map, level) => map.set(level, 0),\n      new Map<ProblemLevel, number>()\n    )\n  );\n  const difficultyLevelsTotalCountMap = problems.reduce(\n    (map, problem) =>\n      problem.ProblemType === ProblemType.Normal ||\n      (problem.ProblemType === ProblemType.Educational &&\n        includingEducational) ||\n      (problem.ProblemType === ProblemType.Scoring && includingScoring) ||\n      (problem.ProblemType === ProblemType.Joke && includingJoke) ||\n      (problem.ProblemType === ProblemType.Unproved && includingUnproved)\n        ? map.set(problem.Level, (map.get(problem.Level) as ProblemLevel) + 1)\n        : map,\n    ProblemLevels.reduce(\n      (map, level) => map.set(level, 0),\n      new Map<ProblemLevel, number>()\n    )\n  );\n\n  return (\n    <>\n      <FormGroup className=\"mb-2\">\n        <ButtonGroup className=\"mr-4\">\n          <Button\n            onClick={(): void => setIncludingEducational(!includingEducational)}\n          >\n            {includingEducational ? 'Including ' : 'Excluding '}\n            <ProblemTypeIcon problemType={ProblemType.Educational} />\n          </Button>\n        </ButtonGroup>\n        <ButtonGroup className=\"mr-4\">\n          <Button onClick={(): void => setIncludingScoring(!includingScoring)}>\n            {includingScoring ? 'Including ' : 'Excluding '}\n            <ProblemTypeIcon problemType={ProblemType.Scoring} />\n          </Button>\n        </ButtonGroup>\n        <ButtonGroup className=\"mr-4\">\n          <Button onClick={(): void => setIncludingJoke(!includingJoke)}>\n            {includingJoke ? 'Including ' : 'Excluding '}\n            <ProblemTypeIcon problemType={ProblemType.Joke} />\n          </Button>\n        </ButtonGroup>\n        <ButtonGroup className=\"mr-4\">\n          <Button\n            onClick={(): void => setIncludingUnproved(!includingUnproved)}\n          >\n            {includingUnproved ? 'Including ' : 'Excluding '}\n            <ProblemTypeIcon problemType={ProblemType.Unproved} />\n          </Button>\n        </ButtonGroup>\n      </FormGroup>\n      <Table striped bordered hover responsive>\n        <thead>\n          <tr>\n            <th>Level</th>\n            {ProblemLevels.map((level) => (\n              <th\n                key={level}\n                style={{\n                  whiteSpace: 'nowrap',\n                  position: 'relative',\n                  minWidth: '70px',\n                }}\n                className={getDifficultyLevelColorClass(level)}\n              >\n                <DifficultyStarsAbsoluteSpan\n                  level={level}\n                  showDifficultyLevel={true}\n                  color={problemLinkColorMode === 'Level'}\n                />\n                {level}\n              </th>\n            ))}\n          </tr>\n          <tr>\n            <th>Total</th>\n            {ProblemLevels.map((level) => (\n              <th key={level}>{difficultyLevelsTotalCountMap.get(level)}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {!user ? null : (\n            <tr key={user}>\n              <td>{user}</td>\n              {ProblemLevels.map((level) => (\n                <td\n                  key={level}\n                  className={\n                    difficultyLevelsTotalCountMap.get(level) ===\n                    difficultyLevelsSolvedCountMap.get(level)\n                      ? 'table-problem table-problem-solved'\n                      : 'table-problem'\n                  }\n                >\n                  {difficultyLevelsSolvedCountMap.get(level)}\n                </td>\n              ))}\n            </tr>\n          )}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n","import React from 'react';\nimport Table from 'reactstrap/lib/Table';\nimport { ProblemTypeIconSpanWithName } from '../../components/ProblemTypeIcon';\nimport { Problem, ProblemType, ProblemTypes } from '../../interfaces/Problem';\nimport { FirstSolvedProblem } from '../../interfaces/SolvedProblem';\n\ninterface Props {\n  problems: Problem[];\n  firstSolvedProblems: FirstSolvedProblem[];\n  user: string;\n}\n\nexport const ProblemTypeTable: React.FC<Props> = (props) => {\n  const { problems, firstSolvedProblems, user } = props;\n\n  const problemTypesTotalCountMap = problems.reduce(\n    (map, problem) =>\n      map.set(\n        problem.ProblemType,\n        (map.get(problem.ProblemType) as ProblemType) + 1\n      ),\n    ProblemTypes.reduce(\n      (map, type) => map.set(type, 0),\n      new Map<ProblemType, number>()\n    )\n  );\n  const problemTypesSolvedCountMap = firstSolvedProblems.reduce(\n    (map, firstSolvedProblem) =>\n      map.set(\n        firstSolvedProblem.ProblemType,\n        (map.get(firstSolvedProblem.ProblemType) as ProblemType) + 1\n      ),\n    ProblemTypes.reduce(\n      (map, type) => map.set(type, 0),\n      new Map<ProblemType, number>()\n    )\n  );\n\n  return (\n    <>\n      <Table striped bordered hover responsive>\n        <thead>\n          <tr>\n            <th>Type</th>\n            {ProblemTypes.map((type) => (\n              <th\n                key={type}\n                style={{\n                  whiteSpace: 'nowrap',\n                  position: 'relative',\n                  minWidth: '150px',\n                }}\n              >\n                <ProblemTypeIconSpanWithName problemType={type} />\n              </th>\n            ))}\n          </tr>\n          <tr>\n            <th>Total</th>\n            {ProblemTypes.map((type) => (\n              <th key={type}>{problemTypesTotalCountMap.get(type)}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {!user ? null : (\n            <tr key={user}>\n              <td>{user}</td>\n              {ProblemTypes.map((type) => (\n                <td\n                  key={type}\n                  className={\n                    problemTypesTotalCountMap.get(type) ===\n                    problemTypesSolvedCountMap.get(type)\n                      ? 'table-problem table-problem-solved'\n                      : 'table-problem'\n                  }\n                >\n                  {problemTypesSolvedCountMap.get(type)}\n                </td>\n              ))}\n            </tr>\n          )}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n","import React from 'react';\nimport { formatSubmissionUrl } from '../utils/Url';\nimport { SubmissionId } from '../interfaces/Problem';\nimport { NewTabLink } from './NewTabLink';\n\ninterface Props {\n  submissionId: SubmissionId;\n  submissionTitle: string;\n  id?: string;\n}\n\nexport const SubmissionLink: React.FC<Props> = (props) => {\n  const { submissionId, submissionTitle, id } = props;\n  return (\n    <NewTabLink\n      href={formatSubmissionUrl(submissionId)}\n      title={submissionTitle}\n      id={id}\n    >\n      {submissionTitle}\n    </NewTabLink>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Table, Spinner } from 'reactstrap';\nimport { Modal, Button } from 'react-bootstrap';\nimport dataFormat from 'dateformat';\nimport * as TypedCachedApiClient from '../utils/TypedCachedApiClient';\nimport {\n  RankingMergedProblem,\n  ProblemSolveStatus,\n} from '../interfaces/MergedProblem';\nimport { Problem, ProblemNo } from '../interfaces/Problem';\nimport { ContestId } from '../interfaces/Contest';\nimport { DifficultyStars } from './DifficultyStars';\nimport { ProblemLink, ProblemLinkColorMode } from './ProblemLink';\nimport { ContestLink } from './ContestLink';\nimport { SolvedCheckIcon } from './SolvedCheckIcon';\nimport { SubmissionLink } from './SubmissionLink';\nimport { ProblemTypeIconSpanWithName } from './ProblemTypeIcon';\nimport { bytesLengthToString } from '../utils';\n\ninterface Props {\n  show: boolean;\n  handleClose: () => void;\n  rankingMergedProblem: RankingMergedProblem;\n  problemLinkColorMode: ProblemLinkColorMode;\n  showTagsOfTryingProblems: boolean;\n}\n\nconst initialUniversalState = {\n  problem: {} as Problem,\n};\n\nexport const ProblemDetailModal: React.FC<Props> = (props) => {\n  const {\n    show,\n    handleClose,\n    rankingMergedProblem,\n    problemLinkColorMode,\n    showTagsOfTryingProblems,\n  } = props;\n\n  const [universalState, setUniversalState] = useState(initialUniversalState);\n  const [universalStateLoaded, setUniversalStateLoaded] = useState(false);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getUniversalInfo = async () => {\n      setUniversalStateLoaded(false);\n      const problem = await TypedCachedApiClient.cachedSingleProblem(\n        rankingMergedProblem.ProblemId\n      );\n\n      if (!unmounted) {\n        setUniversalState({\n          problem,\n        });\n        setUniversalStateLoaded(true);\n      }\n    };\n    if (show) {\n      void getUniversalInfo();\n    }\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, [show, rankingMergedProblem.ProblemId]);\n\n  const { problem } = universalState;\n\n  const shortestRankingProblem = rankingMergedProblem.ShortestRankingProblem;\n  const pureShortestRankingProblem =\n    rankingMergedProblem.PureShortestRankingProblem;\n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>{rankingMergedProblem.Title}</Modal.Title>\n        {universalStateLoaded ? (\n          <></>\n        ) : (\n          <Spinner\n            style={{\n              width: '3rem',\n              height: '3rem',\n              position: 'fixed',\n              right: '10px',\n              bottom: '10px',\n            }}\n          />\n        )}\n      </Modal.Header>\n      <Modal.Body>\n        <Table striped bordered hover responsive>\n          <tbody>\n            <tr key=\"problem-title\">\n              <th>Title</th>\n              <td>\n                <ProblemLink\n                  problemTitle={rankingMergedProblem.Title}\n                  problemNo={rankingMergedProblem.No as ProblemNo}\n                  level={rankingMergedProblem.Level}\n                  problemLinkColorMode={problemLinkColorMode}\n                  difficulty={rankingMergedProblem.Difficulty}\n                />\n              </td>\n            </tr>\n            <tr key=\"problem-date\">\n              <th>Date</th>\n              <td>\n                {rankingMergedProblem.Date\n                  ? dataFormat(\n                      new Date(rankingMergedProblem.Date),\n                      'yyyy/mm/dd HH:MM'\n                    )\n                  : '-'}\n              </td>\n            </tr>\n            <tr key=\"problem-level\">\n              <th>Level</th>\n              <td>\n                <DifficultyStars\n                  level={rankingMergedProblem.Level}\n                  showDifficultyLevel={true}\n                  color={problemLinkColorMode === 'Level'}\n                />\n              </td>\n            </tr>\n            <tr key=\"problem-contest\">\n              <th>Contest</th>\n              <td>\n                <ContestLink\n                  contestId={rankingMergedProblem.Contest?.Id as ContestId}\n                  contestName={rankingMergedProblem.Contest?.Name as string}\n                />\n              </td>\n            </tr>\n            <tr key=\"problem-solve-date\">\n              <th>Solve Date</th>\n              <td>\n                {rankingMergedProblem.SolveDate ? (\n                  <>\n                    <SolvedCheckIcon />\n                    {dataFormat(\n                      new Date(rankingMergedProblem.SolveDate),\n                      'yyyy/mm/dd HH:MM'\n                    )}\n                  </>\n                ) : (\n                  <></>\n                )}\n              </td>\n            </tr>\n            <tr key=\"problem-tags\">\n              <th>Tags</th>\n              <td>\n                {showTagsOfTryingProblems ||\n                rankingMergedProblem.SolveStatus !== ProblemSolveStatus.Trying\n                  ? rankingMergedProblem.Tags\n                  : ''}\n              </td>\n            </tr>\n            <tr key=\"problem-solved-users\">\n              <th>Solved Users</th>\n              <td>\n                {problem.Statistics ? `${problem.Statistics.Solved}` : '-'}\n              </td>\n            </tr>\n            <tr key=\"problem-submitters\">\n              <th>Submitters</th>\n              <td>\n                {problem.Statistics ? `${problem.Statistics.Total}` : '-'}\n              </td>\n            </tr>\n            <tr key=\"problem-shortest\">\n              <th>Shortest</th>\n              <td>\n                {shortestRankingProblem ? (\n                  <SubmissionLink\n                    submissionId={shortestRankingProblem.SubmissionId}\n                    submissionTitle={`#${\n                      shortestRankingProblem.SubmissionId\n                    } (${\n                      shortestRankingProblem.UserName\n                    }, ${bytesLengthToString(shortestRankingProblem.Length)})`}\n                  />\n                ) : problem.Statistics &&\n                  problem.Statistics.ShortCodeSubmissionId > 0 ? (\n                  <SubmissionLink\n                    submissionId={problem.Statistics.ShortCodeSubmissionId}\n                    submissionTitle={`#${problem.Statistics.ShortCodeSubmissionId}`}\n                  />\n                ) : (\n                  <></>\n                )}\n              </td>\n            </tr>\n            <tr key=\"problem-pure-shortest\">\n              <th>Pure Shortest</th>\n              <td>\n                {pureShortestRankingProblem ? (\n                  <SubmissionLink\n                    submissionId={pureShortestRankingProblem.SubmissionId}\n                    submissionTitle={`#${\n                      pureShortestRankingProblem.SubmissionId\n                    } (${\n                      pureShortestRankingProblem.UserName\n                    }, ${bytesLengthToString(\n                      pureShortestRankingProblem.Length\n                    )})`}\n                  />\n                ) : problem.Statistics &&\n                  problem.Statistics.PureShortCodeSubmissionId > 0 ? (\n                  <SubmissionLink\n                    submissionId={problem.Statistics.PureShortCodeSubmissionId}\n                    submissionTitle={`#${problem.Statistics.PureShortCodeSubmissionId}`}\n                  />\n                ) : (\n                  <></>\n                )}\n              </td>\n            </tr>\n            <tr key=\"problem-first-accepted\">\n              <th>First Accepted</th>\n              <td>\n                {problem.Statistics &&\n                problem.Statistics.FirstACSubmissionId > 0 ? (\n                  <SubmissionLink\n                    submissionId={problem.Statistics.FirstACSubmissionId}\n                    submissionTitle={`#${problem.Statistics.FirstACSubmissionId} (${problem.Statistics.FirstAcceptedTimeSecond} seconds)`}\n                  />\n                ) : (\n                  <></>\n                )}\n              </td>\n            </tr>\n            <tr key=\"problem-fastest\">\n              <th>Fastest</th>\n              <td>\n                {problem.Statistics &&\n                problem.Statistics.FastSubmissionId > 0 ? (\n                  <SubmissionLink\n                    submissionId={problem.Statistics.FastSubmissionId}\n                    submissionTitle={`#${problem.Statistics.FastSubmissionId}`}\n                  />\n                ) : (\n                  <></>\n                )}\n              </td>\n            </tr>\n            <tr key=\"problem-type\">\n              <th>Problem Type</th>\n              <td>\n                <ProblemTypeIconSpanWithName\n                  problemType={rankingMergedProblem.ProblemType}\n                />\n              </td>\n            </tr>\n            <tr key=\"problem-no\">\n              <th>No</th>\n              <td>{problem.No}</td>\n            </tr>\n            <tr key=\"problem-id\">\n              <th>ProblemId</th>\n              <td>{problem.ProblemId}</td>\n            </tr>\n          </tbody>\n        </Table>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"primary\" onClick={handleClose}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n","import {\n  BootstrapTable,\n  SortOrder,\n  TableHeaderColumn,\n} from 'react-bootstrap-table';\nimport React, { useState } from 'react';\nimport { Button } from 'reactstrap';\nimport dataFormat from 'dateformat';\nimport { DifficultyStars } from '../../components/DifficultyStars';\nimport {\n  ProblemLink,\n  ProblemLinkColorMode,\n} from '../../components/ProblemLink';\nimport { ContestLink } from '../../components/ContestLink';\nimport { SubmissionLink } from '../../components/SubmissionLink';\nimport {\n  ListPaginationPanel,\n  ListPaginationPanelProps,\n} from '../../components/ListPaginationPanel';\nimport { ProblemTypeIconSpanWithName } from '../../components/ProblemTypeIcon';\nimport { ProblemLevel, ProblemNo, ProblemType } from '../../interfaces/Problem';\nimport { Contest } from '../../interfaces/Contest';\nimport { RankingProblem } from '../../interfaces/RankingProblem';\nimport {\n  RankingMergedProblem,\n  ProblemSolveStatus,\n} from '../../interfaces/MergedProblem';\nimport { ProblemDetailModal } from '../../components/ProblemDetailModal';\nimport { useNavigate } from 'react-router';\nimport { useSearchParams } from 'react-router-dom';\nimport { bytesLengthToString, getHeader } from '../../utils';\n\nexport type FilterState = 'All' | 'Only Trying' | 'Only AC';\n\ninterface Props {\n  rankingMergedProblems: RankingMergedProblem[];\n  statusFilterState: FilterState;\n  fromDifficultyLevel: ProblemLevel | -1;\n  toDifficultyLevel: ProblemLevel | 100;\n  fromDate?: Date;\n  toDate?: Date;\n  problemTypeFilterState: ProblemType | 'All';\n  showTagsOfTryingProblems: boolean;\n  problemLinkColorMode: ProblemLinkColorMode;\n}\n\nconst SORT_NAMES = [\n  'Date',\n  'Title',\n  'Level',\n  'Contest',\n  'SolveDate',\n  'FirstSolveDate',\n  'Tags',\n  'Difficulty',\n  'FastestRankingProblem',\n  'ShortestRankingProblem',\n  'PureShortestRankingProblem',\n  'ProblemType',\n  'No',\n  'ProblemId',\n] as const;\ntype SortName = typeof SORT_NAMES[number];\nconst sanitizeColumnName = (sortName: string | null): SortName => {\n  if (SORT_NAMES.includes(sortName as SortName)) return sortName as SortName;\n  else return 'Date';\n};\nconst sanitizeSortOrder = (sortOrder: string | null): SortOrder => {\n  if (sortOrder == 'asc' || sortOrder == 'desc') return sortOrder;\n  else return 'desc';\n};\n\nexport const ListTable: React.FC<Props> = (props) => {\n  const {\n    rankingMergedProblems,\n    statusFilterState,\n    fromDifficultyLevel,\n    toDifficultyLevel,\n    fromDate,\n    toDate,\n    problemTypeFilterState,\n    showTagsOfTryingProblems,\n    problemLinkColorMode,\n  } = props;\n  const navigate = useNavigate();\n  const [showDetailsModalStatus, setShowDetailsModalStatus] = useState<{\n    enabled: boolean;\n    rankingMergedProblem?: RankingMergedProblem;\n  }>({\n    enabled: false,\n    rankingMergedProblem: undefined,\n  });\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const columns = [\n    {\n      header: 'Date',\n      dataField: 'Date',\n      dataSort: true,\n      dataFormat: function _dataFormat(date: string) {\n        return (\n          <>\n            {date !== null\n              ? dataFormat(new Date(date), 'yyyy/mm/dd HH:MM')\n              : '-'}\n          </>\n        );\n      },\n    },\n    {\n      header: 'Title',\n      dataField: 'Title',\n      dataSort: true,\n      dataFormat: function _dataFormat(\n        title: string,\n        row: RankingMergedProblem\n      ) {\n        const header =\n          row.Index !== undefined ? `${getHeader(row.Index)}. ` : '';\n        return (\n          <ProblemLink\n            problemTitle={`${header}${title}`}\n            problemNo={row.No as ProblemNo}\n            level={row.Level}\n            problemLinkColorMode={problemLinkColorMode}\n            difficulty={row.Difficulty}\n            augmented={row.Augmented}\n            id={`ListTable-ProblemLink-${row.ProblemId}`}\n          />\n        );\n      },\n    },\n    {\n      header: 'Level',\n      dataField: 'Level',\n      dataSort: true,\n      dataFormat: function _dataFormat(level: ProblemLevel) {\n        return (\n          <DifficultyStars\n            level={level}\n            showDifficultyLevel={true}\n            color={problemLinkColorMode === 'Level'}\n          />\n        );\n      },\n    },\n    {\n      header: 'Contest',\n      dataField: 'Contest',\n      dataSort: true,\n      dataFormat: function _dataFormat(contest: Contest): React.ReactElement {\n        return contest ? (\n          <ContestLink contestId={contest.Id} contestName={contest.Name} />\n        ) : (\n          <></>\n        );\n      },\n    },\n    {\n      header: 'Solve Date',\n      dataField: 'SolveDate',\n      dataSort: true,\n      dataFormat: function _dataFormat(solveDate: string) {\n        return solveDate ? (\n          <>{dataFormat(new Date(solveDate), 'yyyy/mm/dd HH:MM')}</>\n        ) : (\n          <></>\n        );\n      },\n    },\n    {\n      header: 'First Solve Date',\n      dataField: 'FirstSolveDate',\n      dataSort: true,\n      dataFormat: function _dataFormat(firstSolveDate: string) {\n        return firstSolveDate ? (\n          <>{dataFormat(new Date(firstSolveDate), 'yyyy/mm/dd HH:MM')}</>\n        ) : (\n          <></>\n        );\n      },\n    },\n    {\n      header: 'Tags',\n      dataField: 'Tags',\n      dataSort: true,\n      dataFormat: function _dataFormat(\n        tags: string,\n        row: RankingMergedProblem\n      ): React.ReactElement {\n        return showTagsOfTryingProblems || row.FirstSolveDate ? (\n          <>{tags}</>\n        ) : (\n          <></>\n        );\n      },\n    },\n    {\n      header: 'Difficulty',\n      dataField: 'Difficulty',\n      dataSort: true,\n    },\n    {\n      header: 'Fastest',\n      dataField: 'FastestRankingProblem',\n      dataSort: true,\n      dataFormat: function _dataFormat(\n        fastestRankingProblem: RankingProblem\n      ): React.ReactElement {\n        return fastestRankingProblem ? (\n          <SubmissionLink\n            submissionId={fastestRankingProblem.SubmissionId}\n            submissionTitle={`${fastestRankingProblem.UserName}`}\n          />\n        ) : (\n          <></>\n        );\n      },\n    },\n    {\n      header: 'Shortest',\n      dataField: 'ShortestRankingProblem',\n      dataSort: true,\n      dataFormat: function _dataFormat(\n        shortestRankingProblem: RankingProblem\n      ): React.ReactElement {\n        return shortestRankingProblem ? (\n          <SubmissionLink\n            submissionId={shortestRankingProblem.SubmissionId}\n            submissionTitle={`${\n              shortestRankingProblem.UserName\n            } (${bytesLengthToString(shortestRankingProblem.Length)})`}\n          />\n        ) : (\n          <></>\n        );\n      },\n    },\n    {\n      header: 'Pure Shortest',\n      dataField: 'PureShortestRankingProblem',\n      dataSort: true,\n      dataFormat: function _dataFormat(\n        pureShortestRankingProblem: RankingProblem\n      ): React.ReactElement {\n        return pureShortestRankingProblem ? (\n          <SubmissionLink\n            submissionId={pureShortestRankingProblem.SubmissionId}\n            submissionTitle={`${\n              pureShortestRankingProblem.UserName\n            } (${bytesLengthToString(pureShortestRankingProblem.Length)})`}\n          />\n        ) : (\n          <></>\n        );\n      },\n    },\n    {\n      header: 'Type',\n      dataField: 'ProblemType',\n      dataFormat: function _dataFormat(problemType: ProblemType) {\n        return <ProblemTypeIconSpanWithName problemType={problemType} />;\n      },\n      dataSort: true,\n    },\n    {\n      header: 'No',\n      dataField: 'No',\n      dataSort: true,\n    },\n    {\n      header: 'ProblemId',\n      dataField: 'ProblemId',\n      dataSort: true,\n    },\n    {\n      header: 'Detail',\n      dataField: 'No',\n      dataFormat: function _dataFormat(\n        problemNo: ProblemNo,\n        row: RankingMergedProblem\n      ) {\n        return (\n          <Button\n            color=\"secondary\"\n            size=\"sm\"\n            onClick={() => navigate(`/problem-detail/${row.ProblemId}`)}\n          >\n            Detail\n          </Button>\n        );\n      },\n      dataSort: true,\n    },\n    {\n      header: 'Contest name for Search',\n      dataField: 'ContestName',\n      hidden: true,\n    },\n    {\n      header: 'Fastest User for Search',\n      dataField: 'FastestRankingUserName',\n      hidden: true,\n    },\n    {\n      header: 'Shortest User for Search',\n      dataField: 'ShortestRankingUserName',\n      hidden: true,\n    },\n    {\n      header: 'Pure Shortest User for Search',\n      dataField: 'PureShortestRankingUserName',\n      hidden: true,\n    },\n  ];\n  return (\n    <>\n      <BootstrapTable\n        pagination\n        keyField=\"ProblemId\"\n        height=\"auto\"\n        hover\n        striped\n        search\n        tableContainerClass=\"list-table\"\n        data={rankingMergedProblems\n          .filter(\n            (problem) =>\n              fromDifficultyLevel <= problem.Level &&\n              problem.Level <= toDifficultyLevel\n          )\n          .filter((problem) => {\n            switch (problemTypeFilterState) {\n              case 'All':\n                return true;\n              default:\n                return problem.ProblemType === problemTypeFilterState;\n            }\n          })\n          .filter((problem) => {\n            switch (statusFilterState) {\n              case 'All':\n                return true;\n              case 'Only AC':\n                return problem.SolveStatus !== ProblemSolveStatus.Trying;\n              case 'Only Trying':\n                return problem.SolveStatus === ProblemSolveStatus.Trying;\n              default:\n                return true;\n            }\n          })\n          .filter((problem) => {\n            if (fromDate === undefined && toDate === undefined) return true;\n            if (problem.Date === null) return false;\n            const startDate = new Date(problem.Date);\n            if (fromDate === undefined) return startDate <= (toDate as Date);\n            if (toDate === undefined) return fromDate <= startDate;\n            return fromDate <= startDate && startDate <= toDate;\n          })\n          .sort((a, b) => {\n            if (a.Date === null) return 1;\n            if (b.Date === null) return -1;\n            return a.Date < b.Date ? 1 : -1;\n          })}\n        trClassName={(problem: RankingMergedProblem) => {\n          if (problem.SolveStatus === ProblemSolveStatus.Trying)\n            return 'table-problem';\n          if (!problem.Contest) return 'table-problem table-problem-solved';\n          if (problem.SolveStatus === ProblemSolveStatus.Solved)\n            return 'table-problem table-problem-solved';\n          if (problem.SolveStatus === ProblemSolveStatus.Intime)\n            return 'table-problem table-problem-solved-intime';\n          return 'table-problem table-problem-solved-before-contest';\n        }}\n        options={{\n          paginationPosition: 'top',\n          page: Number(searchParams.get('page') ?? 1),\n          sizePerPage: Number(searchParams.get('sizePerPage') ?? 20),\n          sizePerPageList: [\n            {\n              text: '20',\n              value: 20,\n            },\n            {\n              text: '50',\n              value: 50,\n            },\n            {\n              text: '100',\n              value: 100,\n            },\n            {\n              text: '200',\n              value: 200,\n            },\n            {\n              text: 'All',\n              value: rankingMergedProblems.length,\n            },\n          ],\n          onSizePerPageList: function _onSizePerPageList(sizePerPage: number) {\n            searchParams.set('page', `1`);\n            searchParams.set('sizePerPage', `${sizePerPage}`);\n            setSearchParams(searchParams);\n          },\n          onPageChange: function _onPageChange(\n            page: number,\n            sizePerPage: number\n          ) {\n            searchParams.set('page', `${page}`);\n            searchParams.set('sizePerPage', `${sizePerPage}`);\n            setSearchParams(searchParams);\n          },\n          paginationPanel: function _paginationPanel(\n            paginationPanelProps: ListPaginationPanelProps\n          ) {\n            return <ListPaginationPanel {...paginationPanelProps} />;\n          },\n          defaultSortName: sanitizeColumnName(searchParams.get('sortName')),\n          defaultSortOrder: sanitizeSortOrder(searchParams.get('sortOrder')),\n          onSortChange: function _onSortChange(\n            sortName: string | number | symbol,\n            sortOrder: SortOrder\n          ) {\n            searchParams.set('sortName', sortName as string);\n            searchParams.set('sortOrder', sortOrder);\n            setSearchParams(searchParams);\n          },\n          defaultSearch: searchParams.get('search') ?? '',\n          onSearchChange: function _onSearchChange(searchText: string) {\n            searchParams.set('page', `1`);\n            searchParams.set('search', searchText);\n            setSearchParams(searchParams, { replace: true });\n          },\n        }}\n      >\n        {columns.map((c) => (\n          <TableHeaderColumn\n            key={c.header}\n            tdAttr={{ 'data-col-name': c.header }}\n            {...c}\n          >\n            {c.header}\n          </TableHeaderColumn>\n        ))}\n      </BootstrapTable>\n\n      {showDetailsModalStatus.enabled &&\n      showDetailsModalStatus.rankingMergedProblem ? (\n        <ProblemDetailModal\n          show={showDetailsModalStatus.enabled}\n          handleClose={() =>\n            setShowDetailsModalStatus({\n              enabled: false,\n              rankingMergedProblem: undefined,\n            })\n          }\n          rankingMergedProblem={showDetailsModalStatus.rankingMergedProblem}\n          problemLinkColorMode={problemLinkColorMode}\n          showTagsOfTryingProblems={showTagsOfTryingProblems}\n        />\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  UncontrolledButtonDropdown,\n  Button,\n  ButtonGroup,\n} from 'reactstrap';\nimport dataFormat from 'dateformat';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './DateRangePicker.css';\nimport Popper from 'popper.js';\n\nimport { range } from '../utils';\n\nexport const INITIAL_FROM_DATE = new Date('2014/07/20');\nexport const INITIAL_TO_DATE = new Date(new Date().setHours(23, 59, 59, 999));\n\ninterface DatePickerCustomHeaderProps {\n  minDate: Date;\n  maxDate: Date;\n  date: Date;\n  changeYear: (year: number) => void;\n  changeMonth: (month: number) => void;\n  decreaseMonth: () => void;\n  increaseMonth: () => void;\n  prevMonthButtonDisabled: boolean;\n  nextMonthButtonDisabled: boolean;\n}\n\nconst DatePickerCustomHeader: React.FC<DatePickerCustomHeaderProps> = (\n  params\n) => {\n  const {\n    minDate,\n    maxDate,\n    date,\n    changeYear,\n    changeMonth,\n    decreaseMonth,\n    increaseMonth,\n    prevMonthButtonDisabled,\n    nextMonthButtonDisabled,\n  } = params;\n  const years = range(minDate.getFullYear(), maxDate.getFullYear());\n  const months = range(0, 11);\n  return (\n    <>\n      <Button\n        outline\n        onClick={decreaseMonth}\n        disabled={prevMonthButtonDisabled}\n        className=\"next-prev-month\"\n      >\n        &lt;\n      </Button>{' '}\n      <UncontrolledButtonDropdown>\n        <DropdownToggle caret className=\"year-month-dropdown-toggle\">\n          {date.getFullYear()}\n        </DropdownToggle>\n        <DropdownMenu>\n          {years.map((year) => (\n            <DropdownItem key={year} onClick={() => changeYear(year)}>\n              {year}\n            </DropdownItem>\n          ))}\n        </DropdownMenu>\n      </UncontrolledButtonDropdown>\n      {' / '}\n      <UncontrolledButtonDropdown>\n        <DropdownToggle caret className=\"year-month-dropdown-toggle\">\n          {date.getMonth() + 1}\n        </DropdownToggle>\n        <DropdownMenu>\n          {months.map((month) => (\n            <DropdownItem key={month} onClick={() => changeMonth(month)}>\n              {month + 1}\n            </DropdownItem>\n          ))}\n        </DropdownMenu>\n      </UncontrolledButtonDropdown>{' '}\n      <Button\n        outline\n        onClick={increaseMonth}\n        disabled={nextMonthButtonDisabled}\n        className=\"next-prev-month\"\n      >\n        &gt;\n      </Button>\n    </>\n  );\n};\n\ninterface Props {\n  fromDate: Date;\n  toDate: Date;\n  onFromDateChange: (date: Date) => void;\n  onToDateChange: (date: Date) => void;\n  minDate: Date;\n  maxDate: Date;\n}\n\nexport const DateRangePicker: React.FC<Props> = (props) => {\n  const {\n    fromDate,\n    toDate,\n    onFromDateChange,\n    onToDateChange,\n    minDate,\n    maxDate,\n  } = props;\n\n  const popperModifiers = {\n    flip: {\n      enabled: false,\n    },\n    preventOverflow: {\n      enabled: true,\n      escapeWithReference: false,\n    },\n  } as Popper.Modifiers;\n\n  return (\n    <ButtonGroup className=\"mr-4\">\n      <UncontrolledButtonDropdown>\n        <DatePicker\n          selected={fromDate}\n          customInput={\n            <DropdownToggle caret>\n              {fromDate.getTime() === minDate.getTime()\n                ? 'Date From'\n                : dataFormat(fromDate, 'yyyy/mm/dd -')}\n            </DropdownToggle>\n          }\n          onChange={onFromDateChange}\n          selectsStart\n          minDate={minDate}\n          maxDate={INITIAL_TO_DATE}\n          startDate={fromDate}\n          endDate={toDate}\n          todayButton=\"Today\"\n          popperPlacement=\"bottom-end\"\n          popperModifiers={popperModifiers}\n          renderCustomHeader={(params) => (\n            <DatePickerCustomHeader\n              minDate={minDate}\n              maxDate={INITIAL_TO_DATE}\n              {...params}\n            />\n          )}\n        />\n      </UncontrolledButtonDropdown>\n      <UncontrolledButtonDropdown>\n        <DatePicker\n          selected={toDate}\n          customInput={\n            <DropdownToggle caret>\n              {toDate.getTime() === maxDate.getTime()\n                ? 'Date To'\n                : dataFormat(toDate, '- yyyy/mm/dd')}\n            </DropdownToggle>\n          }\n          onChange={onToDateChange}\n          selectsEnd\n          minDate={fromDate}\n          maxDate={maxDate}\n          startDate={fromDate}\n          endDate={toDate}\n          todayButton=\"Today\"\n          popperPlacement=\"bottom-end\"\n          popperModifiers={popperModifiers}\n          renderCustomHeader={(params) => (\n            <DatePickerCustomHeader\n              minDate={fromDate}\n              maxDate={maxDate}\n              {...params}\n            />\n          )}\n        />\n      </UncontrolledButtonDropdown>\n    </ButtonGroup>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Row,\n  UncontrolledButtonDropdown,\n  UncontrolledDropdown,\n  Button,\n  ButtonGroup,\n  FormGroup,\n  Label,\n  Input,\n  Spinner,\n} from 'reactstrap';\nimport { useParams } from 'react-router-dom';\n\nimport { DifficultyLevelTable } from './DifficultyLevelTable';\nimport { ProblemTypeTable } from './ProblemTypeTable';\nimport { ListTable, FilterState } from './ListTable';\nimport { getProblemTypeName } from '../../utils';\nimport * as TypedCachedApiClient from '../../utils/TypedCachedApiClient';\nimport * as DifficultyDataClient from '../../utils/DifficultyDataClient';\nimport { mergeSolveStatus, mergeRanking } from '../../utils/MergeProcs';\nimport { WellPositionedDropdownMenu } from '../../components/WellPositionedDropdownMenu';\nimport {\n  DifficultyStarsFillDefs,\n  DifficultyStars,\n} from '../../components/DifficultyStars';\nimport {\n  DateRangePicker,\n  INITIAL_FROM_DATE,\n  INITIAL_TO_DATE,\n} from '../../components/DateRangePicker';\nimport { ProblemTypeIconSpanWithName } from '../../components/ProblemTypeIcon';\nimport {\n  Problem,\n  ProblemNo,\n  ProblemId,\n  ProblemType,\n  ProblemLevel,\n  ProblemLevels,\n} from '../../interfaces/Problem';\nimport {\n  SolvedProblem,\n  FirstSolvedProblem,\n} from '../../interfaces/SolvedProblem';\nimport { Contest, ContestId } from '../../interfaces/Contest';\nimport { RankingProblem } from '../../interfaces/RankingProblem';\nimport { RankingMergedProblem } from '../../interfaces/MergedProblem';\nimport { Difficulties } from '../../interfaces/Difficulty';\nimport { ProblemLinkColorMode } from '../../components/ProblemLink';\nimport { useLocalStorage } from '../../utils/LocalStorage';\n\nconst INF_LEVEL = 100;\n\nconst initialUniversalState = {\n  problems: [] as Problem[],\n  contests: [] as Contest[],\n  problemContestMap: new Map<ProblemId, ContestId>(),\n  speederProblemMap: new Map<ProblemNo, RankingProblem>(),\n  golferProblemMap: new Map<ProblemNo, RankingProblem>(),\n  golferPureProblemMap: new Map<ProblemNo, RankingProblem>(),\n  difficulties: {} as Difficulties,\n};\n\nconst initialUserState = {\n  solvedProblems: [] as SolvedProblem[],\n  solvedProblemsMap: new Map<ProblemId, SolvedProblem>(),\n  firstSolvedProblems: [] as FirstSolvedProblem[],\n  firstSolvedProblemsMap: new Map<ProblemId, FirstSolvedProblem>(),\n};\n\nconst initialMergedState = {\n  rankingMergedProblems: [] as RankingMergedProblem[],\n};\n\nexport const ListPage: React.FC = () => {\n  const { param, user } = useParams() as {\n    param: TypedCachedApiClient.UserParam;\n    user: string;\n  };\n\n  const [universalState, setUniversalState] = useState(initialUniversalState);\n  const [userState, setUserState] = useState(initialUserState);\n  const [mergedState, setMergedState] = useState(initialMergedState);\n  const [universalStateLoaded, setUniversalStateLoaded] = useState(false);\n  const [userStateLoaded, setUserStateLoaded] = useState(false);\n  const [mergedStateLoaded, setMergedStateLoaded] = useState(false);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getUniversalInfo = async () => {\n      setUniversalStateLoaded(false);\n      const [\n        problems,\n        contests,\n        speederProblemMap,\n        golferProblemMap,\n        golferPureProblemMap,\n        difficulties,\n      ] = await Promise.all([\n        TypedCachedApiClient.cachedProblemArray(),\n        TypedCachedApiClient.cachedContestArray(),\n        TypedCachedApiClient.cachedSpeederRankingProblemMap(),\n        TypedCachedApiClient.cachedGolferRankingProblemMap(),\n        TypedCachedApiClient.cachedGolferRankingPureProblemMap(),\n        DifficultyDataClient.cachedDifficultyData(),\n      ]);\n      const problemContestMap =\n        await TypedCachedApiClient.cachedProblemContestMap();\n\n      if (!unmounted) {\n        setUniversalState({\n          problems,\n          contests,\n          speederProblemMap,\n          problemContestMap,\n          golferProblemMap,\n          golferPureProblemMap,\n          difficulties,\n        });\n        setUniversalStateLoaded(true);\n      }\n    };\n    void getUniversalInfo();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, []);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getUserInfo = async () => {\n      setUserStateLoaded(false);\n      const [solvedProblems, firstSolvedProblems] =\n        param && user\n          ? await Promise.all([\n              TypedCachedApiClient.cachedSolvedProblemArray(param, user),\n              TypedCachedApiClient.cachedFirstSolvedProblemArray(param, user),\n            ])\n          : [[] as SolvedProblem[], [] as FirstSolvedProblem[]];\n      const [solvedProblemsMap, firstSolvedProblemsMap] =\n        param && user\n          ? await Promise.all([\n              TypedCachedApiClient.cachedSolvedProblemMap(param, user),\n              TypedCachedApiClient.cachedFirstSolvedProblemMap(param, user),\n            ])\n          : [\n              new Map<ProblemId, SolvedProblem>(),\n              new Map<ProblemId, FirstSolvedProblem>(),\n            ];\n\n      if (!unmounted) {\n        setUserState({\n          solvedProblems,\n          solvedProblemsMap,\n          firstSolvedProblems,\n          firstSolvedProblemsMap,\n        });\n        setUserStateLoaded(true);\n      }\n    };\n    void getUserInfo();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, [param, user]);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getMergedInfo = () => {\n      setMergedStateLoaded(false);\n      const mergedProblems = mergeSolveStatus(\n        universalState.problems,\n        universalState.contests,\n        universalState.problemContestMap,\n        userState.solvedProblemsMap,\n        userState.firstSolvedProblemsMap,\n        universalState.difficulties\n      );\n      const rankingMergedProblems = mergeRanking(\n        mergedProblems,\n        universalState.speederProblemMap,\n        universalState.golferProblemMap,\n        universalState.golferPureProblemMap\n      );\n\n      if (!unmounted) {\n        setMergedState({\n          rankingMergedProblems,\n        });\n        setMergedStateLoaded(true);\n      }\n    };\n    void getMergedInfo();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, [universalState, userState]);\n\n  const { problems } = universalState;\n  const { firstSolvedProblems } = userState;\n  const { rankingMergedProblems } = mergedState;\n\n  const [colorMode, setColorMode] = useLocalStorage<ProblemLinkColorMode>(\n    'TablePage_colorMode',\n    'Level'\n  );\n\n  const [statusFilterState, setStatusFilterState] =\n    useState<FilterState>('All');\n  const [fromDifficultyLevel, setFromDifficultyLevel] = useState<\n    ProblemLevel | -1\n  >(-1);\n  const [toDifficultyLevel, setToDifficultyLevel] = useState<\n    ProblemLevel | 100\n  >(INF_LEVEL);\n  const [showTagsOfTryingProblems, setShowTagsOfTryingProblems] =\n    useState(false);\n  const [fromDate, setFromDate] = useState(INITIAL_FROM_DATE);\n  const [toDate, setToDate] = useState(INITIAL_TO_DATE);\n  const [problemTypeFilterState, setProblemTypeFilterState] = useState<\n    ProblemType | 'All'\n  >('All');\n\n  return (\n    <>\n      <DifficultyStarsFillDefs />\n\n      {universalStateLoaded && userStateLoaded && mergedStateLoaded ? (\n        <></>\n      ) : (\n        <Spinner\n          style={{\n            width: '3rem',\n            height: '3rem',\n            position: 'fixed',\n            right: '10px',\n            bottom: '10px',\n          }}\n        />\n      )}\n\n      <Row className=\"my-2 border-bottom\">\n        <h2>Level Status</h2>\n      </Row>\n      <Row>\n        <DifficultyLevelTable\n          problems={problems}\n          firstSolvedProblems={firstSolvedProblems}\n          user={user}\n          problemLinkColorMode={colorMode}\n        />\n      </Row>\n\n      <Row className=\"my-2 border-bottom\">\n        <h2>Type Status</h2>\n      </Row>\n      <Row>\n        <ProblemTypeTable\n          problems={problems}\n          firstSolvedProblems={firstSolvedProblems}\n          user={user}\n        />\n      </Row>\n\n      <Row className=\"my-2 border-bottom\">\n        <h2>Problem List</h2>\n      </Row>\n      <Row>\n        <UncontrolledDropdown>\n          <DropdownToggle caret>\n            {\n              {\n                None: 'Color By',\n                Level: 'Level',\n                Difficulty: 'Difficulty (experimental)',\n              }[colorMode]\n            }\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem header>Color By</DropdownItem>\n            <DropdownItem onClick={(): void => setColorMode('None')}>\n              None\n            </DropdownItem>\n            <DropdownItem onClick={(): void => setColorMode('Level')}>\n              Level\n            </DropdownItem>\n            <DropdownItem onClick={(): void => setColorMode('Difficulty')}>\n              Difficulty (experimental)\n            </DropdownItem>\n          </DropdownMenu>\n        </UncontrolledDropdown>\n      </Row>\n      <Row>\n        <ButtonGroup className=\"mr-4\">\n          <UncontrolledDropdown>\n            <DropdownToggle caret>{statusFilterState}</DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem onClick={() => setStatusFilterState('All')}>\n                All\n              </DropdownItem>\n              <DropdownItem onClick={() => setStatusFilterState('Only Trying')}>\n                Only Trying\n              </DropdownItem>\n              <DropdownItem onClick={() => setStatusFilterState('Only AC')}>\n                Only AC\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        </ButtonGroup>\n\n        <ButtonGroup className=\"mr-4\">\n          <UncontrolledButtonDropdown>\n            <DropdownToggle caret>\n              {fromDifficultyLevel === -1\n                ? 'Level From'\n                : `${fromDifficultyLevel} - `}\n            </DropdownToggle>\n            <WellPositionedDropdownMenu>\n              {ProblemLevels.map((level) => (\n                <DropdownItem\n                  key={level}\n                  onClick={() => setFromDifficultyLevel(level)}\n                >\n                  <DifficultyStars\n                    level={level}\n                    showDifficultyLevel={true}\n                    color={colorMode === 'Level'}\n                  />\n                  {level.toFixed(1)} -\n                </DropdownItem>\n              ))}\n            </WellPositionedDropdownMenu>\n          </UncontrolledButtonDropdown>\n          <UncontrolledButtonDropdown>\n            <DropdownToggle caret>\n              {toDifficultyLevel === INF_LEVEL\n                ? 'Level To'\n                : ` - ${toDifficultyLevel}`}\n            </DropdownToggle>\n            <WellPositionedDropdownMenu>\n              {ProblemLevels.map((level) => (\n                <DropdownItem\n                  key={level}\n                  onClick={() => setToDifficultyLevel(level)}\n                >\n                  <DifficultyStars\n                    level={level}\n                    showDifficultyLevel={true}\n                    color={colorMode === 'Level'}\n                  />\n                  -{level.toFixed(1)}\n                </DropdownItem>\n              ))}\n            </WellPositionedDropdownMenu>\n          </UncontrolledButtonDropdown>\n        </ButtonGroup>\n\n        <DateRangePicker\n          minDate={INITIAL_FROM_DATE}\n          maxDate={INITIAL_TO_DATE}\n          fromDate={fromDate}\n          toDate={toDate}\n          onFromDateChange={(date: Date) => {\n            setFromDate(date);\n          }}\n          onToDateChange={(date: Date) => {\n            setToDate(date);\n          }}\n        />\n\n        <ButtonGroup className=\"mr-4\">\n          <UncontrolledDropdown>\n            <DropdownToggle caret>\n              {problemTypeFilterState === 'All'\n                ? 'All'\n                : getProblemTypeName(problemTypeFilterState)}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem onClick={() => setProblemTypeFilterState('All')}>\n                All\n              </DropdownItem>\n              <DropdownItem\n                onClick={() => setProblemTypeFilterState(ProblemType.Normal)}\n              >\n                <ProblemTypeIconSpanWithName problemType={ProblemType.Normal} />\n              </DropdownItem>\n              <DropdownItem\n                onClick={() =>\n                  setProblemTypeFilterState(ProblemType.Educational)\n                }\n              >\n                <ProblemTypeIconSpanWithName\n                  problemType={ProblemType.Educational}\n                />\n              </DropdownItem>\n              <DropdownItem\n                onClick={() => setProblemTypeFilterState(ProblemType.Scoring)}\n              >\n                <ProblemTypeIconSpanWithName\n                  problemType={ProblemType.Scoring}\n                />\n              </DropdownItem>\n              <DropdownItem\n                onClick={() => setProblemTypeFilterState(ProblemType.Joke)}\n              >\n                <ProblemTypeIconSpanWithName problemType={ProblemType.Joke} />\n              </DropdownItem>\n              <DropdownItem\n                onClick={() => setProblemTypeFilterState(ProblemType.Unproved)}\n              >\n                <ProblemTypeIconSpanWithName\n                  problemType={ProblemType.Unproved}\n                />\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        </ButtonGroup>\n\n        <FormGroup check inline>\n          <Label check>\n            <Input\n              type=\"checkbox\"\n              checked={showTagsOfTryingProblems}\n              onChange={(e) => setShowTagsOfTryingProblems(e.target.checked)}\n            />\n            Show Tags of Trying Problems\n          </Label>\n        </FormGroup>\n\n        <Button\n          outline\n          color=\"danger\"\n          onClick={() => {\n            setStatusFilterState('All');\n            setFromDifficultyLevel(-1);\n            setToDifficultyLevel(INF_LEVEL);\n            setShowTagsOfTryingProblems(false);\n            setFromDate(INITIAL_FROM_DATE);\n            setToDate(INITIAL_TO_DATE);\n          }}\n        >\n          Reset\n        </Button>\n      </Row>\n      <Row>\n        <ListTable\n          rankingMergedProblems={rankingMergedProblems}\n          statusFilterState={statusFilterState}\n          fromDifficultyLevel={fromDifficultyLevel}\n          toDifficultyLevel={toDifficultyLevel}\n          fromDate={fromDate === INITIAL_FROM_DATE ? undefined : fromDate}\n          toDate={toDate === INITIAL_TO_DATE ? undefined : toDate}\n          problemTypeFilterState={problemTypeFilterState}\n          showTagsOfTryingProblems={showTagsOfTryingProblems}\n          problemLinkColorMode={colorMode}\n        />\n      </Row>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  PieChart,\n  Pie,\n  ResponsiveContainer,\n  Cell,\n  Tooltip,\n  Legend,\n} from 'recharts';\n\ninterface Props {\n  data: {\n    value: number;\n    color: string;\n    name: string;\n  }[];\n}\n\nexport const SinglePieChart: React.FC<Props> = ({ data }) => (\n  <div>\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <PieChart>\n        <Pie dataKey=\"value\" data={data} outerRadius=\"80%\" fill=\"#ff0000\">\n          {data.map((e) => (\n            <Cell key={e.name} fill={e.color} />\n          ))}\n        </Pie>\n        <Tooltip />\n        <Legend />\n      </PieChart>\n    </ResponsiveContainer>\n  </div>\n);\n","import React from 'react';\nimport { Col, Row } from 'reactstrap';\nimport { SinglePieChart } from '../../components/SinglePieChart';\n\nconst COLORS = {\n  Accepted: '#32cd32',\n  Trying: '#58616a',\n};\n\ninterface SmallPieChartProps {\n  title: string;\n  trying: number;\n  accepted: number;\n}\n\nconst SmallPieChart: React.FC<SmallPieChartProps> = (props) => {\n  const { title, trying, accepted } = props;\n\n  const data = [\n    { value: accepted, color: COLORS.Accepted, name: 'Accepted' },\n    { value: trying, color: COLORS.Trying, name: 'Trying' },\n  ];\n  return (\n    <div>\n      <SinglePieChart data={data} />\n      <h5>{title}</h5>\n      <h5 className=\"text-muted\">{`${accepted} / ${accepted + trying}`}</h5>\n    </div>\n  );\n};\n\ninterface Props {\n  problems: { total: number; solved: number }[];\n  title: string;\n}\n\nexport const PieCharts: React.FC<Props> = (props) => {\n  const { problems, title } = props;\n  return (\n    <div>\n      <Row className=\"my-2 border-bottom\">\n        <h2>{title}</h2>\n      </Row>\n      <Row className=\"my-3\">\n        {problems.map(({ solved, total }, i) => {\n          const key = 'ABCDEF'.charAt(i) + (i >= 5 ? '〜' : '');\n          return (\n            <Col\n              key={key}\n              className=\"text-center\"\n              xs=\"6\"\n              md={12 / problems.length}\n            >\n              <SmallPieChart\n                accepted={solved}\n                trying={total - solved}\n                title={`Problem ${key}`}\n              />\n            </Col>\n          );\n        })}\n      </Row>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Row, Col } from 'reactstrap';\nimport { getLevelList, getDifficultyLevelColor } from '../../utils';\nimport { SinglePieChart } from '../../components/SinglePieChart';\nimport { DifficultyStars } from '../../components/DifficultyStars';\nimport { Problem, ProblemLevel } from '../../interfaces/Problem';\nimport { SolvedProblem } from '../../interfaces/SolvedProblem';\n\ninterface Props {\n  problems: Problem[];\n  solvedProblems: SolvedProblem[];\n}\n\nexport const ProblemLevelPieChart: React.FC<Props> = (props) => {\n  const { problems, solvedProblems } = props;\n  const levelList = getLevelList();\n\n  const colorCount = problems.reduce(\n    (map, problem) =>\n      map.set(problem.Level, (map.get(problem.Level) as number) + 1),\n    levelList.reduce(\n      (map, level) => map.set(level, 0),\n      new Map<ProblemLevel, number>()\n    )\n  );\n\n  const solvedCount = solvedProblems.reduce(\n    (map, solvedProblem) =>\n      map.set(\n        solvedProblem.Level,\n        (map.get(solvedProblem.Level) as number) + 1\n      ),\n    levelList.reduce(\n      (map, level) => map.set(level, 0),\n      new Map<ProblemLevel, number>()\n    )\n  );\n\n  const data = levelList.map((level) => {\n    const totalCount = colorCount.get(level) ?? 0;\n    const solved = solvedCount.get(level) ?? 0;\n    const color = getDifficultyLevelColor(level);\n    return {\n      color,\n      totalCount,\n      solved,\n      level,\n    };\n  });\n\n  return (\n    <div>\n      <Row className=\"my-3\">\n        {data\n          .filter((e) => e.totalCount > 0)\n          .map((e) => (\n            <Col key={e.level} className=\"text-center\" xs=\"6\" md=\"2\">\n              <SinglePieChart\n                data={[\n                  { name: 'Accepted', color: e.color, value: e.solved },\n                  {\n                    name: 'Trying',\n                    color: '#58616a',\n                    value: e.totalCount - e.solved,\n                  },\n                ]}\n              />\n              <h5 style={{ color: e.color, fontSize: 'small' }}>\n                {'Level '}\n                {e.level.toFixed(1)}\n                <DifficultyStars\n                  level={e.level}\n                  showDifficultyLevel={true}\n                  color={true}\n                />\n              </h5>\n              <h5 className=\"text-muted\">{`${e.solved} / ${e.totalCount}`}</h5>\n            </Col>\n          ))}\n      </Row>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\nimport dataFormat from 'dateformat';\n\ninterface Props {\n  dailyData: { dateSecond: number; count: number }[];\n  syncId: string;\n}\n\nexport const DailyEffortBarChart: React.FC<Props> = (props) => {\n  if (props.dailyData.length === 0) return <></>;\n\n  return (\n    <Row className=\"my-3\">\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart\n          data={props.dailyData}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n          syncId={props.syncId}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"dateSecond\"\n            type=\"number\"\n            domain={['dataMin', 'dataMax']}\n            tickFormatter={(dateSecond: number) =>\n              dataFormat(new Date(dateSecond), 'yyyy/mm/dd')\n            }\n          />\n          <YAxis />\n          <Tooltip\n            labelFormatter={(dateSecond: number) =>\n              dataFormat(new Date(Number(dateSecond)), 'yyyy/mm/dd')\n            }\n          />\n          <Bar dataKey=\"count\" fill=\"#8884d8\" />\n        </BarChart>\n      </ResponsiveContainer>\n    </Row>\n  );\n};\n","import React from 'react';\nimport dataFormat from 'dateformat';\nimport { DifficultyStars } from '../../components/DifficultyStars';\nimport { ProblemLevel } from '../../interfaces/Problem';\n\ninterface DailyEffortTooltipPayload {\n  value: number;\n  dataKey: ProblemLevel;\n  stroke: string;\n}\n\ninterface Props {\n  active?: boolean;\n  payload?: DailyEffortTooltipPayload[];\n  label?: number;\n  reverseColorOrder?: boolean;\n}\n\nexport const DailyEffortTooltip: React.FC<Props> = (props) => {\n  const { active, payload, label, reverseColorOrder } = props;\n  if (!active || payload === undefined) return <></>;\n  return (\n    <div\n      className=\"recharts-default-tooltip\"\n      style={{\n        margin: '0px',\n        padding: '10px',\n        backgroundColor: 'rgb(255, 255, 255)',\n        border: '1px solid rgb(204, 204, 204)',\n        whiteSpace: 'nowrap',\n      }}\n    >\n      <p className=\"recharts-tooltip-label\" style={{ margin: '0px' }}>\n        {dataFormat(new Date(Number(label)), 'yyyy/mm/dd')}\n      </p>\n      <ul\n        className=\"recharts-tooltip-item-list\"\n        style={{ padding: '0px', margin: '0px' }}\n      >\n        <li\n          className=\"recharts-tooltip-item\"\n          style={{\n            display: 'block',\n            paddingTop: '4px',\n            paddingBottom: '4px',\n            color: 'rgb(136, 132, 216)',\n          }}\n        >\n          <span className=\"recharts-tooltip-item-name\">count</span>\n          <span className=\"recharts-tooltip-item-separator\"> : </span>\n          <span className=\"recharts-tooltip-item-value\">\n            {payload.reduce((acc, entry) => acc + entry.value, 0)}\n          </span>\n          <span className=\"recharts-tooltip-item-unit\" />\n        </li>\n      </ul>\n      <table>\n        <tbody>\n          {payload\n            .sort((a, b) =>\n              reverseColorOrder ? a.dataKey - b.dataKey : b.dataKey - a.dataKey\n            )\n            .map((entry) => {\n              if (entry.value <= 0) return null;\n              return (\n                <tr style={{ color: entry.stroke }} key={entry.dataKey}>\n                  <td align=\"right\">{entry.value}</td>\n                  <td>{' * '}</td>\n                  <td>\n                    <DifficultyStars\n                      level={entry.dataKey}\n                      showDifficultyLevel={true}\n                      color={true}\n                    />\n                  </td>\n                </tr>\n              );\n            })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\nimport dataFormat from 'dateformat';\nimport { DailyEffortTooltip } from './DailyEffortTooltip';\nimport { DifficultyStarsFillDefs } from '../../components/DifficultyStars';\nimport { getLevelList, getDifficultyLevelColor } from '../../utils';\n\ninterface Props {\n  dailyData: { dateSecond: number; [key: number]: number }[];\n  syncId: string;\n}\n\nexport const DailyEffortStackedBarChart: React.FC<Props> = (props) => {\n  if (props.dailyData.length === 0) return <></>;\n\n  return (\n    <Row className=\"my-3\">\n      <DifficultyStarsFillDefs />\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart\n          data={props.dailyData}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n          syncId={props.syncId}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"dateSecond\"\n            type=\"number\"\n            domain={['dataMin', 'dataMax']}\n            tickFormatter={(dateSecond) =>\n              dataFormat(new Date(dateSecond), 'yyyy/mm/dd')\n            }\n          />\n          <YAxis />\n          <Tooltip content={<DailyEffortTooltip />} />\n          {getLevelList().map((level) => {\n            const color = getDifficultyLevelColor(level);\n            return (\n              <Bar\n                type=\"monotone\"\n                dataKey={level}\n                key={level}\n                stackId=\"1\"\n                stroke={color}\n                fill={color}\n              />\n            );\n          })}\n        </BarChart>\n      </ResponsiveContainer>\n    </Row>\n  );\n};\n","import React from 'react';\nimport { Row, ButtonGroup, Button } from 'reactstrap';\nimport { getLevelList, mapToObject } from '../../utils';\nimport { useLocalStorage } from '../../utils/LocalStorage';\nimport { DailyEffortBarChart } from './DailyEffortBarChart';\nimport { DailyEffortStackedBarChart } from './DailyEffortStackedBarChart';\nimport { SolvedProblem } from '../../interfaces/SolvedProblem';\nimport { ProblemLevel } from '../../interfaces/Problem';\n\nconst DailyEffortBarChartWrapper: React.FC<{\n  display: boolean;\n}> = (props) => <>{props.display ? props.children : <></>}</>;\n\ninterface Props {\n  dailyData: { dateSecond: number; count: number }[];\n  solvedProblems: SolvedProblem[];\n  syncId: string;\n}\n\nexport const TabbedDailyEffortBarChart: React.FC<Props> = (props) => {\n  const [showMode, setShowMode] = useLocalStorage<'Simple' | 'Colored'>(\n    'UserPage_TabbedDailyEffortBarChart_showMode',\n    'Simple'\n  );\n  const { dailyData, solvedProblems, syncId } = props;\n\n  const levelList = getLevelList();\n  const dailyLevelCountMap = solvedProblems.reduce((map, solvedProblem) => {\n    const date = new Date(solvedProblem.Date);\n    date.setHours(0, 0, 0, 0);\n    const key = Number(date); // sec - (sec % MS_OF_DAY);\n    if (!map.has(key)) {\n      map.set(\n        key,\n        levelList.reduce(\n          (map, currentLevel) => map.set(currentLevel, 0),\n          new Map<ProblemLevel, number>()\n        )\n      );\n    }\n    const targetDate = map.get(key) as Map<ProblemLevel, number>;\n    targetDate.set(\n      solvedProblem.Level,\n      (targetDate.get(solvedProblem.Level) as number) + 1\n    );\n    return map;\n  }, new Map<number, Map<ProblemLevel, number>>());\n  let dailyLevelCount = [] as { dateSecond: number; [key: number]: number }[];\n  dailyLevelCountMap.forEach((map, key) => {\n    dailyLevelCount.push({ dateSecond: key, ...mapToObject(map) });\n  });\n  dailyLevelCount = dailyLevelCount.sort((a, b) => a.dateSecond - b.dateSecond);\n\n  return (\n    <>\n      <Row className=\"my-3\">\n        <ButtonGroup className=\"mr-3\">\n          <Button\n            onClick={() => setShowMode('Simple')}\n            active={showMode === 'Simple'}\n          >\n            Simple\n          </Button>\n          <Button\n            onClick={() => setShowMode('Colored')}\n            active={showMode === 'Colored'}\n          >\n            Colored\n          </Button>\n        </ButtonGroup>\n      </Row>\n      <DailyEffortBarChartWrapper display={showMode === 'Simple'}>\n        <DailyEffortBarChart dailyData={dailyData} syncId={syncId} />\n      </DailyEffortBarChartWrapper>\n      <DailyEffortBarChartWrapper display={showMode === 'Colored'}>\n        <DailyEffortStackedBarChart\n          dailyData={dailyLevelCount}\n          syncId={syncId}\n        />\n      </DailyEffortBarChartWrapper>\n    </>\n  );\n};\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  LineChart,\n  Line,\n  ResponsiveContainer,\n} from 'recharts';\nimport dataFormat from 'dateformat';\n\ninterface Props {\n  climbingData: { dateSecond: number; count: number }[];\n  syncId: string;\n}\n\nexport const ClimbingLineChart: React.FC<Props> = (props) => {\n  if (props.climbingData.length === 0) return <></>;\n\n  return (\n    <Row className=\"my-3\">\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={props.climbingData}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n          syncId={props.syncId}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"dateSecond\"\n            type=\"number\"\n            domain={['dataMin', 'dataMax']}\n            tickFormatter={(dateSecond: number) =>\n              dataFormat(new Date(dateSecond), 'yyyy/mm/dd')\n            }\n          />\n          <YAxis />\n          <Tooltip\n            labelFormatter={(dateSecond: number) =>\n              dataFormat(new Date(Number(dateSecond)), 'yyyy/mm/dd')\n            }\n          />\n          <Line dataKey=\"count\" stroke=\"#8884d8\" />\n        </LineChart>\n      </ResponsiveContainer>\n    </Row>\n  );\n};\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  AreaChart,\n  Area,\n  ResponsiveContainer,\n} from 'recharts';\nimport dataFormat from 'dateformat';\nimport { DailyEffortTooltip } from './DailyEffortTooltip';\nimport { DifficultyStarsFillDefs } from '../../components/DifficultyStars';\nimport { getLevelList, getDifficultyLevelColor } from '../../utils';\n\ninterface Props {\n  climbingData: { dateSecond: number; [key: number]: number }[];\n  reverseColorOrder: boolean;\n  syncId: string;\n}\n\nexport const ClimbingAreaChart: React.FC<Props> = (props) => {\n  if (props.climbingData.length === 0) return <></>;\n\n  return (\n    <Row className=\"my-3\">\n      <DifficultyStarsFillDefs />\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <AreaChart\n          data={props.climbingData}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n          syncId={props.syncId}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"dateSecond\"\n            type=\"number\"\n            domain={['dataMin', 'dataMax']}\n            tickFormatter={(dateSecond) =>\n              dataFormat(new Date(dateSecond), 'yyyy/mm/dd')\n            }\n          />\n          <YAxis />\n          <Tooltip\n            content={\n              <DailyEffortTooltip reverseColorOrder={props.reverseColorOrder} />\n            }\n          />\n\n          {(props.reverseColorOrder\n            ? getLevelList().reverse()\n            : getLevelList()\n          ).map((level, idx) => {\n            const color = getDifficultyLevelColor(level);\n            return (\n              <Area\n                type=\"monotone\"\n                dataKey={level}\n                key={idx}\n                stackId=\"1\"\n                stroke={color}\n                fill={color}\n              />\n            );\n          })}\n        </AreaChart>\n      </ResponsiveContainer>\n    </Row>\n  );\n};\n","import React from 'react';\nimport { Row, FormGroup, ButtonGroup, Button, Label, Input } from 'reactstrap';\nimport { getLevelList } from '../../utils';\nimport { useLocalStorage } from '../../utils/LocalStorage';\nimport { ClimbingLineChart } from './ClimbingLineChart';\nimport { ClimbingAreaChart } from './ClimbingAreaChart';\nimport { SolvedProblem } from '../../interfaces/SolvedProblem';\nimport { ProblemLevel } from '../../interfaces/Problem';\n\nconst ClimbingChartWrapper: React.FC<{\n  display: boolean;\n}> = (props) => <>{props.display ? props.children : <></>}</>;\n\ninterface Props {\n  climbingData: { dateSecond: number; count: number }[];\n  solvedProblems: SolvedProblem[];\n  syncId: string;\n}\n\nexport const TabbedClimbingLineChart: React.FC<Props> = (props) => {\n  const [showMode, setShowMode] = useLocalStorage<'Simple' | 'Colored'>(\n    'UserPage_TabbedClimbingLineChart_showMode',\n    'Simple'\n  );\n  const [reverseColorOrder, setReverseColorOrder] = useLocalStorage(\n    'UserPage_TabbedClimbingLineChart_reverseColorOrder',\n    false\n  );\n  const { climbingData, solvedProblems, syncId } = props;\n\n  const levelList = getLevelList();\n  const mergeCountMap = (\n    lastMap: { dateSecond: number; [key: number]: number },\n    curMap: Map<ProblemLevel, number>\n  ): { dateSecond: number; [key: number]: number } => {\n    const ret = {} as { dateSecond: number; [key: number]: number };\n    curMap.forEach((value, key) => {\n      ret[key] = (lastMap[key] ?? 0) + value;\n    });\n    return ret;\n  };\n  const dailyLevelCountMap = solvedProblems.reduce((map, solvedProblem) => {\n    const date = new Date(solvedProblem.Date);\n    date.setHours(0, 0, 0, 0);\n    const key = Number(date); // sec - (sec % MS_OF_DAY);\n    if (!map.has(key)) {\n      map.set(\n        key,\n        levelList.reduce(\n          (map, currentLevel) => map.set(currentLevel, 0),\n          new Map<ProblemLevel, number>()\n        )\n      );\n    }\n    const targetDate = map.get(key) as Map<ProblemLevel, number>;\n    targetDate.set(\n      solvedProblem.Level,\n      (targetDate.get(solvedProblem.Level) as number) + 1\n    );\n    return map;\n  }, new Map<number, Map<ProblemLevel, number>>());\n  let dailyLevelCount = [] as {\n    dateSecond: number;\n    count: Map<ProblemLevel, number>;\n  }[];\n  dailyLevelCountMap.forEach((map, key) => {\n    dailyLevelCount.push({ dateSecond: key, count: map });\n  });\n  dailyLevelCount = dailyLevelCount.sort((a, b) => a.dateSecond - b.dateSecond);\n\n  const Levelclimbing = dailyLevelCount.reduce((ar, { dateSecond, count }) => {\n    const last =\n      ar[ar.length - 1] ??\n      ({} as { dateSecond: number; [key: number]: number });\n    const ret = mergeCountMap(last, count);\n    ret.dateSecond = dateSecond;\n    ar.push(ret);\n    return ar;\n  }, [] as { dateSecond: number; [key: number]: number }[]);\n\n  return (\n    <>\n      <Row className=\"my-3\">\n        <ButtonGroup className=\"mr-3\">\n          <Button\n            onClick={() => setShowMode('Simple')}\n            active={showMode === 'Simple'}\n          >\n            Simple\n          </Button>\n          <Button\n            onClick={() => setShowMode('Colored')}\n            active={showMode === 'Colored'}\n          >\n            Colored\n          </Button>\n        </ButtonGroup>\n        <FormGroup check inline>\n          <Label check>\n            <Input\n              type=\"checkbox\"\n              checked={reverseColorOrder}\n              onChange={(e) => setReverseColorOrder(e.target.checked)}\n              disabled={showMode !== 'Colored'}\n            />\n            Reverse Color Order\n          </Label>\n        </FormGroup>\n      </Row>\n      <ClimbingChartWrapper display={showMode === 'Simple'}>\n        <ClimbingLineChart climbingData={climbingData} syncId={syncId} />\n      </ClimbingChartWrapper>\n      <ClimbingChartWrapper display={showMode === 'Colored'}>\n        <ClimbingAreaChart\n          climbingData={Levelclimbing}\n          reverseColorOrder={reverseColorOrder}\n          syncId={syncId}\n        />\n      </ClimbingChartWrapper>\n    </>\n  );\n};\n","import React from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\n\nconst month_names_short = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\nconst day_names_short = ['Mon', 'Wed', 'Fri'];\n\ninterface Props {\n  tableData: { date: number; count: number }[];\n  formatTooltip: (date: number, count: number) => React.ReactNode;\n  onRectClick: (date: number) => void;\n  getColor: (count: number) => string;\n  columns: number;\n  rows: number;\n  today: Date;\n}\n\nexport const CalendarHeatmap: React.FC<Props> = (props) => {\n  const {\n    tableData,\n    formatTooltip,\n    onRectClick,\n    getColor,\n    columns,\n    rows,\n    today,\n  } = props;\n\n  const blockWidth = 10;\n  const xOffset = blockWidth * 1.6;\n  const yOffset = blockWidth;\n  const width = xOffset + blockWidth * columns + blockWidth * 0.5;\n  const height = yOffset + blockWidth * rows;\n\n  return (\n    <div style={{ width: '100%' }}>\n      <svg viewBox={`0 0 ${width} ${height}`} style={{ width: '100%' }}>\n        {day_names_short.map((day_name, i) => (\n          <text\n            key={day_name}\n            x={0}\n            y={yOffset * 0.7 + (2 * i + 2) * blockWidth}\n            fill=\"gray\"\n            fontSize={7}\n          >\n            {day_name}\n          </text>\n        ))}\n        {tableData.map(({ date }, i) => {\n          if (new Date(date) > today) return null;\n          const week = Math.floor(i / rows);\n          const day = i % rows;\n          const d = new Date(date);\n          if (day === 0 && d.getDate() <= 7) {\n            return (\n              <text\n                key={`text-${date}`}\n                x={xOffset + week * blockWidth}\n                y={yOffset * 0.7}\n                fill=\"gray\"\n                fontSize={7}\n              >\n                {month_names_short[d.getMonth()]}\n              </text>\n            );\n          }\n          return null;\n        })}\n        {tableData.map(({ date, count }, i) => {\n          if (new Date(date) > today) return null;\n          const color = getColor(count);\n          const week = Math.floor(i / rows);\n          const day = i % rows;\n          return (\n            <rect\n              key={date}\n              id={`rect-${date}`}\n              x={xOffset + week * blockWidth}\n              y={yOffset + day * blockWidth}\n              width={blockWidth * 0.95}\n              height={blockWidth * 0.95}\n              fill={color}\n              onClick={() => onRectClick(date)}\n            />\n          );\n        })}\n      </svg>\n\n      {tableData.map(({ date, count }) =>\n        new Date(date) > today ? null : (\n          <UncontrolledTooltip\n            delay={{ show: 0, hide: 0 }}\n            key={date}\n            placement=\"right\"\n            target={`rect-${date}`}\n          >\n            {formatTooltip(date, count)}\n          </UncontrolledTooltip>\n        )\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Row, ButtonGroup, Button } from 'reactstrap';\nimport dataFormat from 'dateformat';\nimport { CalendarHeatmap } from './CalendarHeatmap';\nimport { getDifficultyLevelColor } from '../../utils';\nimport { useLocalStorage } from '../../utils/LocalStorage';\nimport { ProblemLevel } from '../../interfaces/Problem';\nimport { SolvedProblem } from '../../interfaces/SolvedProblem';\n\nconst WEEKDAY = 7;\nconst WEEKS = 53;\nconst COLORS = ['#ebedf0', '#c6e48b', '#7bc96f', '#239a3b', '#196127'];\nconst MS_OF_HOUR = 1000 * 60 * 60;\nconst MS_OF_DAY = MS_OF_HOUR * 24;\n\nexport const getNextSunday = (t: Date): Date => {\n  const date = new Date(t);\n  const diff = 7 - date.getDay();\n  date.setDate(date.getDate() + diff);\n  return date;\n};\n\nexport const getToday = (): Date => {\n  const cur = new Date();\n  cur.setHours(0, 0, 0, 0);\n  return cur;\n};\n\ninterface Props {\n  dailyCountMap: Map<number, number>;\n  solvedProblems: SolvedProblem[];\n  onRectClick: (date: number) => void;\n}\n\nexport const TabbedHeatmap: React.FC<Props> = (props) => {\n  const [showMode, setShowMode] = useLocalStorage<'Unique AC' | 'Max Level'>(\n    'UserPage_TabbedHeatmap_showMode',\n    'Unique AC'\n  );\n  const { dailyCountMap, solvedProblems, onRectClick } = props;\n\n  const today = getToday();\n  const nextSunday = getNextSunday(today);\n\n  const startDateMiliSec = Number(nextSunday) - WEEKS * WEEKDAY * MS_OF_DAY;\n\n  let tableData: { date: number; count: number }[];\n  let formatTooltip: (date: number, count: number) => React.ReactNode;\n  let getColor: (count: number) => string;\n  switch (showMode) {\n    case 'Unique AC':\n      tableData = Array.from(Array(WEEKS * WEEKDAY).keys())\n        .map((i) => startDateMiliSec + i * MS_OF_DAY)\n        .reduce((ar, dateMiliSec) => {\n          if (dailyCountMap.has(dateMiliSec))\n            ar.push({\n              date: dateMiliSec,\n              count: dailyCountMap.get(dateMiliSec) ?? 0,\n            });\n          else ar.push({ date: dateMiliSec, count: 0 });\n          return ar;\n        }, [] as { date: number; count: number }[])\n        .sort((a, b) => a.date - b.date);\n      formatTooltip = function _formatTooltip(date: number, count: number) {\n        return (\n          <>\n            <div>{`${dataFormat(new Date(date), 'yyyy/mm/dd')}`}</div>\n            <div>{`${count} unique AC(s)`}</div>\n          </>\n        );\n      };\n      getColor = (count: number) => COLORS[Math.min(count, COLORS.length - 1)];\n      break;\n    case 'Max Level':\n      {\n        const dailyMaxLevelMap = solvedProblems.reduce((map, solvedProblem) => {\n          const date = new Date(solvedProblem.Date);\n          date.setHours(0, 0, 0, 0);\n          const key = Number(date); // sec - (sec % MS_OF_DAY);\n          if (!map.has(key)) {\n            map.set(key, 0);\n          }\n          map.set(key, Math.max(map.get(key) ?? 0, solvedProblem.Level));\n          return map;\n        }, new Map<number, number>());\n        tableData = Array.from(Array(WEEKS * WEEKDAY).keys())\n          .map((i) => startDateMiliSec + i * MS_OF_DAY)\n          .reduce((ar, dateMiliSec) => {\n            if (dailyMaxLevelMap.has(dateMiliSec))\n              ar.push({\n                date: dateMiliSec,\n                count: dailyMaxLevelMap.get(dateMiliSec) ?? 0,\n              });\n            else ar.push({ date: dateMiliSec, count: -1 });\n            return ar;\n          }, [] as { date: number; count: number }[])\n          .sort((a, b) => a.date - b.date);\n      }\n      formatTooltip = function _formatTooltip(date: number, count: number) {\n        return (\n          <>\n            <div>{`${dataFormat(new Date(date), 'yyyy/mm/dd')}`}</div>\n            <div>{`Max Level: ${count < 0 ? '-' : count}`}</div>\n          </>\n        );\n      };\n      getColor = (count: number) =>\n        count < 0 ? '#ebedf0' : getDifficultyLevelColor(count as ProblemLevel);\n\n      break;\n\n    // default:\n    //   tableData = [];\n    //   formatTooltip = () => null;\n    //   getColor = () => \"\";\n    //   break;\n  }\n  return (\n    <>\n      <Row className=\"my-3\">\n        <ButtonGroup className=\"mr-3\">\n          <Button\n            onClick={() => setShowMode('Unique AC')}\n            active={showMode === 'Unique AC'}\n          >\n            Unique AC\n          </Button>\n          <Button\n            onClick={() => setShowMode('Max Level')}\n            active={showMode === 'Max Level'}\n          >\n            Max Level\n          </Button>\n        </ButtonGroup>\n      </Row>\n      <Row className=\"my-5\">\n        <CalendarHeatmap\n          tableData={tableData}\n          formatTooltip={formatTooltip}\n          onRectClick={onRectClick}\n          getColor={getColor}\n          columns={WEEKS}\n          rows={WEEKDAY}\n          today={today}\n        />\n      </Row>\n    </>\n  );\n};\n","import React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\nimport dataFormat from 'dateformat';\nimport {\n  ProblemLink,\n  ProblemLinkColorMode,\n} from '../../components/ProblemLink';\nimport { ContestLink } from '../../components/ContestLink';\nimport { DifficultyStars } from '../../components/DifficultyStars';\nimport {\n  ListPaginationPanel,\n  ListPaginationPanelProps,\n} from '../../components/ListPaginationPanel';\nimport { ProblemId, ProblemLevel, ProblemNo } from '../../interfaces/Problem';\nimport { SolvedProblem } from '../../interfaces/SolvedProblem';\nimport { Contest, ContestId } from '../../interfaces/Contest';\nimport { Difficulties, Difficulty } from '../../interfaces/Difficulty';\nimport { Badge } from 'reactstrap';\n\ninterface Entry extends SolvedProblem {\n  Contest: Contest | undefined;\n  Difficulty?: Difficulty;\n  Augmented?: boolean;\n}\n\ninterface Props {\n  solvedProblems: SolvedProblem[];\n  problemContestMap: Map<ProblemId, ContestId>;\n  contestMap: Map<ContestId, Contest>;\n  difficulties: Difficulties;\n  fromDate: Date;\n  toDate: Date;\n  problemLinkColorMode: ProblemLinkColorMode;\n}\n\nexport const SolvedProblemList: React.FC<Props> = (props) => {\n  const {\n    solvedProblems,\n    problemContestMap,\n    contestMap,\n    difficulties,\n    fromDate,\n    toDate,\n    problemLinkColorMode,\n  } = props;\n  return (\n    <BootstrapTable\n      data={solvedProblems\n        .filter((problem) => {\n          if (fromDate === null && toDate === null) return true;\n          if (problem.Date === null) return false;\n          const solveDate = new Date(problem.Date);\n          if (fromDate === null) return solveDate <= toDate;\n          if (toDate === null) return fromDate <= solveDate;\n          return fromDate <= solveDate && solveDate <= toDate;\n        })\n        .sort((a, b) => (a.Date < b.Date ? 1 : -1))\n        .map(\n          (s) =>\n            ({\n              Contest: contestMap.get(problemContestMap.get(s.ProblemId) ?? -1),\n              Difficulty:\n                s.ProblemId in difficulties\n                  ? difficulties[s.ProblemId][0]\n                  : undefined,\n              Augmented:\n                s.ProblemId in difficulties\n                  ? difficulties[s.ProblemId][3]\n                  : undefined,\n              ...s,\n            } as Entry)\n        )}\n      keyField=\"ProblemId\"\n      height=\"auto\"\n      hover\n      striped\n      search\n      pagination\n      options={{\n        paginationPosition: 'top',\n        sizePerPage: 20,\n        sizePerPageList: [\n          {\n            text: '20',\n            value: 20,\n          },\n          {\n            text: '50',\n            value: 50,\n          },\n          {\n            text: '100',\n            value: 100,\n          },\n          {\n            text: '200',\n            value: 200,\n          },\n          {\n            text: 'All',\n            value: solvedProblems.length,\n          },\n        ],\n        paginationPanel: function _paginationPanel(\n          paginationPanelProps: ListPaginationPanelProps\n        ) {\n          return <ListPaginationPanel {...paginationPanelProps} />;\n        },\n      }}\n    >\n      <TableHeaderColumn\n        dataSort\n        dataField=\"Date\"\n        dataFormat={(date: string, row: Entry) => (\n          <>\n            <>{dataFormat(new Date(date), 'yyyy/mm/dd HH:MM')}</>\n            <>{!row.First && <Badge color=\"success\">After Rejudge</Badge>}</>\n          </>\n        )}\n      >\n        Date\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        filterFormatted\n        dataSort\n        dataField=\"Title\"\n        dataFormat={(title: string, row: Entry) => (\n          <ProblemLink\n            problemTitle={title}\n            problemNo={row.No as ProblemNo}\n            level={row.Level}\n            problemLinkColorMode={problemLinkColorMode}\n            difficulty={row.Difficulty}\n            augmented={row.Augmented}\n            id={`SolvedProblemList-ProblemLink-${row.ProblemId}`}\n          />\n        )}\n      >\n        Problem\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        filterFormatted\n        dataSort\n        dataField=\"Level\"\n        dataFormat={(level: ProblemLevel) => (\n          <DifficultyStars\n            level={level}\n            showDifficultyLevel={true}\n            color={problemLinkColorMode === 'Level'}\n          />\n        )}\n      >\n        Level\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        filterFormatted\n        dataSort\n        dataField=\"Contest\"\n        dataFormat={(contest: Contest) =>\n          contest ? (\n            <ContestLink contestId={contest.Id} contestName={contest.Name} />\n          ) : (\n            <></>\n          )\n        }\n      >\n        Contest\n      </TableHeaderColumn>\n      <TableHeaderColumn dataField=\"Title\" hidden />\n    </BootstrapTable>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Col,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Row,\n  Spinner,\n  UncontrolledDropdown,\n} from 'reactstrap';\nimport dataFormat from 'dateformat';\n\nimport * as TypedCachedApiClient from '../../utils/TypedCachedApiClient';\nimport * as DifficultyDataClient from '../../utils/DifficultyDataClient';\nimport { ordinalSuffixOf } from '../../utils';\n\nimport { PieCharts } from './SmallPieChart';\nimport { ProblemLevelPieChart } from './ProblemLevelPieChart';\nimport { TabbedDailyEffortBarChart } from './TabbedDailyEffortBarChart';\nimport { TabbedClimbingLineChart } from './TabbedClimbingLineChart';\nimport { TabbedHeatmap } from './TabbedHeatmap';\nimport { SolvedProblemList } from './SolvedProblemList';\nimport {\n  DifficultyStarsFillDefs,\n  NormalStarElement,\n} from '../../components/DifficultyStars';\nimport {\n  DateRangePicker,\n  INITIAL_FROM_DATE,\n  INITIAL_TO_DATE,\n} from '../../components/DateRangePicker';\nimport { Contest, ContestId } from '../../interfaces/Contest';\nimport { Problem, ProblemId, ProblemType } from '../../interfaces/Problem';\nimport {\n  SolvedProblem,\n  FirstSolvedProblem,\n} from '../../interfaces/SolvedProblem';\nimport { User, UserName } from '../../interfaces/User';\nimport { RankingProblem } from '../../interfaces/RankingProblem';\nimport { ProblemLinkColorMode } from '../../components/ProblemLink';\nimport { useLocalStorage } from '../../utils/LocalStorage';\nimport { Difficulties } from '../../interfaces/Difficulty';\n\nconst MS_OF_HOUR = 1000 * 60 * 60;\nconst MS_OF_DAY = MS_OF_HOUR * 24;\n\nconst initialUniversalState = {\n  speederMap: new Map<UserName, RankingProblem[]>(),\n  golferMap: new Map<UserName, RankingProblem[]>(),\n  pureGolferMap: new Map<UserName, RankingProblem[]>(),\n  contests: [] as Contest[],\n  contestMap: new Map<ContestId, Contest>(),\n  problems: [] as Problem[],\n  problemContestMap: new Map<ProblemId, ContestId>(),\n  difficulties: {} as Difficulties,\n};\n\nconst initialUserState = {\n  userInfo: {} as User,\n  solvedProblems: [] as SolvedProblem[],\n  solvedProblemsMap: new Map<ProblemId, SolvedProblem>(),\n  firstSolvedProblems: [] as FirstSolvedProblem[],\n  firstSolvedProblemsMap: new Map<ProblemId, FirstSolvedProblem>(),\n  minDate: INITIAL_FROM_DATE,\n  maxDate: INITIAL_TO_DATE,\n};\n\nexport const UserPage: React.FC = () => {\n  const { param, user } = useParams() as {\n    param: TypedCachedApiClient.UserParam;\n    user: string;\n  };\n\n  const [universalState, setUniversalState] = useState(initialUniversalState);\n  const [userState, setUserState] = useState(initialUserState);\n  const [universalStateLoaded, setUniversalStateLoaded] = useState(false);\n  const [userStateLoaded, setUserStateLoaded] = useState(false);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getUniversalInfo = async () => {\n      setUniversalStateLoaded(false);\n      const [\n        speederMap,\n        golferMap,\n        pureGolferMap,\n        problems,\n        contests,\n        difficulties,\n      ] = await Promise.all([\n        TypedCachedApiClient.cachedSpeederMap(),\n        TypedCachedApiClient.cachedGolferMap(),\n        TypedCachedApiClient.cachedGolferPureMap(),\n        TypedCachedApiClient.cachedProblemArray(),\n        TypedCachedApiClient.cachedContestArray(),\n        DifficultyDataClient.cachedDifficultyData(),\n      ]);\n      const [contestMap, problemContestMap] = await Promise.all([\n        TypedCachedApiClient.cachedContestMap(),\n        TypedCachedApiClient.cachedProblemContestMap(),\n      ]);\n\n      if (!unmounted) {\n        setUniversalState({\n          speederMap,\n          golferMap,\n          pureGolferMap,\n          contests,\n          contestMap,\n          problems,\n          problemContestMap,\n          difficulties,\n        });\n        setUniversalStateLoaded(true);\n      }\n    };\n    void getUniversalInfo();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, []);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getUserInfo = async () => {\n      setUserStateLoaded(false);\n      const [userInfo, solvedProblems, firstSolvedProblems] = await Promise.all(\n        [\n          TypedCachedApiClient.cachedUserInfo(param, user),\n          TypedCachedApiClient.cachedSolvedProblemArray(param, user),\n          TypedCachedApiClient.cachedFirstSolvedProblemArray(param, user),\n        ]\n      );\n      const [solvedProblemsMap, firstSolvedProblemsMap] = await Promise.all([\n        TypedCachedApiClient.cachedSolvedProblemMap(param, user),\n        TypedCachedApiClient.cachedFirstSolvedProblemMap(param, user),\n      ]);\n\n      const dates = solvedProblems.map((problem) => Date.parse(problem.Date));\n      const minDate = new Date(Math.min.apply(null, dates));\n      const maxDate = new Date(Math.max.apply(null, dates));\n      minDate.setHours(0, 0, 0, 0);\n      maxDate.setHours(23, 59, 59, 999);\n\n      if (!unmounted) {\n        setUserState({\n          userInfo,\n          solvedProblems,\n          solvedProblemsMap,\n          firstSolvedProblems,\n          firstSolvedProblemsMap,\n          minDate,\n          maxDate,\n        });\n        setUserStateLoaded(true);\n      }\n    };\n    void getUserInfo();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, [param, user]);\n\n  const {\n    speederMap,\n    golferMap,\n    pureGolferMap,\n    contests,\n    contestMap,\n    problems,\n    problemContestMap,\n    difficulties,\n  } = universalState;\n  const {\n    userInfo,\n    solvedProblems,\n    solvedProblemsMap,\n    firstSolvedProblems,\n    firstSolvedProblemsMap,\n    minDate,\n    maxDate,\n  } = userState;\n\n  const [fromDate, setFromDate] = useState(INITIAL_FROM_DATE);\n  const [toDate, setToDate] = useState(INITIAL_TO_DATE);\n\n  const [colorMode, setColorMode] = useLocalStorage<ProblemLinkColorMode>(\n    'TablePage_colorMode',\n    'Level'\n  );\n\n  const name = userInfo ? userInfo.Name : undefined;\n\n  // merge solvedProblems and firstSolvedProblems\n  const mergedSolvedProblems = firstSolvedProblems.reduce(\n    (prevFirstSolvedProblems, firstSolvedProblem) => {\n      if (\n        solvedProblemsMap.get(firstSolvedProblem.ProblemId)?.Date !==\n          firstSolvedProblem.Date &&\n        solvedProblemsMap.has(firstSolvedProblem.ProblemId)\n      ) {\n        prevFirstSolvedProblems.push(\n          solvedProblemsMap.get(firstSolvedProblem.ProblemId) as SolvedProblem\n        );\n      }\n      prevFirstSolvedProblems.push(firstSolvedProblem);\n      return prevFirstSolvedProblems;\n    },\n    [] as SolvedProblem[]\n  );\n  // merge\n  // solvedProblems に入っていて firstSolvedProblemsMap に入っていないものを追加する\n  solvedProblems.forEach((solvedProblem) => {\n    if (!firstSolvedProblemsMap.has(solvedProblem.ProblemId)) {\n      solvedProblem.First = true;\n      mergedSolvedProblems.push(solvedProblem);\n    }\n  });\n\n  // for user info section\n  /** returns [shortestCount, shortestRank] */\n  const countRank = (\n    rankingMap: Map<UserName, RankingProblem[]>\n  ): [number, number] => {\n    const shortestCount =\n      name && rankingMap.has(name)\n        ? (rankingMap.get(name) as RankingProblem[]).length\n        : 0;\n    if (rankingMap.size === 0) return [shortestCount, 0];\n    if (shortestCount === 0) return [shortestCount, 1 + rankingMap.size];\n    let rank = 1;\n    rankingMap.forEach((rankingProblems) => {\n      if (rankingProblems.length > shortestCount) {\n        ++rank;\n      }\n    });\n    return [shortestCount, rank];\n  };\n  const [fastestCount, fastestRank] = countRank(speederMap);\n  const [shortestCount, shortestRank] = countRank(golferMap);\n  const [pureShortestCount, pureShortestRank] = countRank(pureGolferMap);\n\n  // for pichart\n  const regexpContest = /^yukicoder contest \\d+/;\n  const regularContestProblemsCntMap = contests.reduce((map, contest) => {\n    if (regexpContest.exec(contest.Name)) {\n      return contest.ProblemIdList.reduce((map_, problemId, idx) => {\n        const key = Math.min(idx, 5) as 0 | 1 | 2 | 3 | 4 | 5;\n        if (!map_.has(key)) map_.set(key, { total: 0, solved: 0 });\n        if (firstSolvedProblemsMap.has(problemId))\n          (map_.get(key) as { total: number; solved: number }).solved++;\n        (map_.get(key) as { total: number; solved: number }).total++;\n        return map_;\n      }, map);\n    }\n    return map;\n  }, new Map<0 | 1 | 2 | 3 | 4 | 5, { total: number; solved: number }>());\n  const regularContestProblemsCnt = [] as { total: number; solved: number }[];\n  regularContestProblemsCntMap.forEach((value, key) => {\n    regularContestProblemsCnt[key] = value;\n  });\n\n  // for daily chart section\n  const dailyCountMap = mergedSolvedProblems\n    .map((solvedProblem) => solvedProblem.Date)\n    .reduce((map, solveDate) => {\n      const date = new Date(solveDate);\n      date.setHours(0, 0, 0, 0);\n      const key = Number(date); // sec - (sec % MS_OF_DAY);\n      if (!map.has(key)) {\n        map.set(key, 0);\n      }\n      return map.set(key, (map.get(key) ?? 0) + 1);\n    }, new Map<number, number>());\n  let dailyCount = [] as { dateSecond: number; count: number }[];\n  dailyCountMap.forEach((value, key) => {\n    dailyCount.push({ dateSecond: key, count: value });\n  });\n  dailyCount = dailyCount.sort((a, b) => a.dateSecond - b.dateSecond);\n\n  const climbing = dailyCount.reduce((ar, { dateSecond, count }) => {\n    const last = ar[ar.length - 1];\n    ar.push({ dateSecond, count: last ? last.count + count : count });\n    return ar;\n  }, [] as { dateSecond: number; count: number }[]);\n\n  const { longestStreak, currentStreak, prevDateSecond } = dailyCount\n    .map((e) => e.dateSecond)\n    .reduce(\n      (state, dateSecond) => {\n        const nextDateSecond = state.prevDateSecond + MS_OF_DAY;\n        const currentStreak =\n          dateSecond === nextDateSecond ? state.currentStreak + 1 : 1;\n        const longestStreak = Math.max(state.longestStreak, currentStreak);\n        return { longestStreak, currentStreak, prevDateSecond: dateSecond };\n      },\n      {\n        longestStreak: 0,\n        currentStreak: 0,\n        prevDateSecond: 0,\n      }\n    );\n  const currentDate = new Date();\n  currentDate.setHours(0, 0, 0, 0);\n  const yesterdayDate = new Date(currentDate);\n  yesterdayDate.setDate(yesterdayDate.getDate() - 1);\n  const isIncreasing = new Date(prevDateSecond) >= yesterdayDate;\n\n  // for user level\n  const userSolvedStars = solvedProblems\n    .filter((solvedProblem) => solvedProblem.ProblemType === ProblemType.Normal)\n    .map((solvedProblem) => solvedProblem.Level)\n    .reduce((sum, cur) => sum + cur, 0 as number);\n  const allProblemsStars = problems\n    .filter((problem) => problem.ProblemType === ProblemType.Normal)\n    .map((problem) => problem.Level)\n    .reduce((sum, cur) => sum + cur, 0 as number);\n  const origUserLevel =\n    allProblemsStars > 0 ? (100.0 * userSolvedStars) / allProblemsStars : 0;\n  const userLevel = Math.round(origUserLevel * 100) / 100;\n  const nextLevel = Math.min(100, Math.floor(userLevel) + 1.0);\n  const starsToAdvance = (allProblemsStars * (nextLevel - userLevel)) / 100;\n\n  const achievements = [\n    {\n      key: 'Solved (Normal)',\n      value: userInfo.Solved ?? 0,\n      rank: userInfo.Rank ?? 0,\n    },\n    {\n      key: 'Solved (All)',\n      value: solvedProblems.length,\n      rank: undefined,\n    },\n    {\n      key: 'Score',\n      value: userInfo.Score ?? 0,\n      rank: undefined,\n    },\n    {\n      key: 'Points',\n      value: userInfo.Points ?? 0,\n      rank: undefined,\n    },\n    {\n      key: 'Fastest Code',\n      value: fastestCount,\n      rank: fastestRank,\n    },\n    {\n      key: 'Shortest Code',\n      value: shortestCount,\n      rank: shortestRank,\n    },\n    {\n      key: 'Pure Shortest Code',\n      value: pureShortestCount,\n      rank: pureShortestRank,\n    },\n    // {\n    //   key: 'Level',\n    //   value: userInfo.Level ?? 0,\n    //   rank: undefined, // これは捨てて独自に計算する？\n    // },\n  ];\n\n  return (\n    <div>\n      <Row className=\"my-2 border-bottom\">\n        <h2>{name}</h2>\n        {universalStateLoaded ? (\n          <></>\n        ) : (\n          <Spinner\n            style={{ width: '3rem', height: '3rem', marginLeft: '0.8rem' }}\n          />\n        )}\n      </Row>\n      {userStateLoaded ? (\n        <></>\n      ) : (\n        <Spinner\n          style={{\n            width: '3rem',\n            height: '3rem',\n            position: 'fixed',\n            right: '10px',\n            bottom: '10px',\n          }}\n        />\n      )}\n      <DifficultyStarsFillDefs />\n\n      <Row className=\"my-2 border-bottom\">\n        <h3>Scores</h3>\n      </Row>\n      <Row className=\"my-3\">\n        {achievements.map(({ key, value, rank }) => (\n          <Col key={key} className=\"text-center col-achivement\" xs=\"6\" md=\"3\">\n            <h6>{key}</h6>\n            <h4>{value}</h4>\n            {rank === undefined ? null : (\n              <h6 className=\"text-muted\">\n                {`${rank}${ordinalSuffixOf(rank)}`}\n              </h6>\n            )}\n          </Col>\n        ))}\n        <Col key=\"Level\" className=\"text-center\" xs=\"6\" md=\"3\">\n          <h6>Level</h6>\n          <h4 title={`${userLevel} (${origUserLevel})`}>\n            {userLevel.toFixed(2)}\n          </h4>\n          <h6\n            className=\"text-muted\"\n            title={`${starsToAdvance} stars to level ${nextLevel}`}\n          >\n            <NormalStarElement /> *{Math.ceil(starsToAdvance * 2) / 2} to\n            advance\n          </h6>\n        </Col>\n      </Row>\n\n      <Row className=\"my-2 border-bottom\">\n        <h3>Streaks</h3>\n      </Row>\n      <Row className=\"my-3\">\n        <Col key=\"Longest Streak\" className=\"text-center\" xs=\"6\" md=\"3\">\n          <h6>Longest Streak</h6>\n          <h4>{longestStreak} days</h4>\n        </Col>\n        <Col key=\"Current Streak\" className=\"text-center\" xs=\"6\" md=\"3\">\n          <h6>Current Streak</h6>\n          <h4>{isIncreasing ? currentStreak : 0} days</h4>\n          <h6 className=\"text-muted\">\n            {`Last AC: ${\n              prevDateSecond > 0 ? dataFormat(prevDateSecond, 'yyyy/mm/dd') : ''\n            }`}\n          </h6>\n        </Col>\n        <Col key=\"Streak Sum\" className=\"text-center\" xs=\"6\" md=\"3\">\n          <h6>Streak Sum</h6>\n          <h4>{dailyCount.length} days</h4>\n        </Col>\n      </Row>\n\n      <PieCharts\n        problems={regularContestProblemsCnt}\n        title=\"yukicoder contest\"\n      />\n\n      <Row className=\"my-2 border-bottom\">\n        <h2>Problem Level Pies</h2>\n      </Row>\n      <ProblemLevelPieChart\n        problems={problems}\n        solvedProblems={solvedProblems}\n      />\n\n      <Row className=\"my-2 border-bottom\">\n        <h2>Daily Effort</h2>\n      </Row>\n      <TabbedDailyEffortBarChart\n        dailyData={dailyCount}\n        solvedProblems={mergedSolvedProblems}\n        syncId=\"DailyEffortChart\"\n      />\n\n      <Row className=\"my-2 border-bottom\">\n        <h2>Climbing</h2>\n      </Row>\n      <TabbedClimbingLineChart\n        climbingData={climbing}\n        solvedProblems={mergedSolvedProblems}\n        syncId=\"DailyEffortChart\"\n      />\n\n      <Row className=\"my-2 border-bottom\">\n        <h2>Heatmap</h2>\n      </Row>\n      <TabbedHeatmap\n        dailyCountMap={dailyCountMap}\n        solvedProblems={mergedSolvedProblems}\n        onRectClick={(miliSec) => {\n          setFromDate(new Date(new Date(miliSec).setHours(0, 0, 0, 0)));\n          setToDate(new Date(new Date(miliSec).setHours(23, 59, 59, 999)));\n        }}\n      />\n\n      <Row className=\"my-2 border-bottom\">\n        <h2>Solved Problems</h2>\n      </Row>\n      <Row>\n        <DateRangePicker\n          minDate={minDate}\n          maxDate={maxDate}\n          fromDate={fromDate}\n          toDate={toDate}\n          onFromDateChange={(date) => {\n            setFromDate(date);\n          }}\n          onToDateChange={(date) => {\n            setToDate(date);\n          }}\n        />\n\n        <UncontrolledDropdown>\n          <DropdownToggle caret>\n            {\n              {\n                None: 'Color By',\n                Level: 'Level',\n                Difficulty: 'Difficulty (experimental)',\n              }[colorMode]\n            }\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem header>Color By</DropdownItem>\n            <DropdownItem onClick={(): void => setColorMode('None')}>\n              None\n            </DropdownItem>\n            <DropdownItem onClick={(): void => setColorMode('Level')}>\n              Level\n            </DropdownItem>\n            <DropdownItem onClick={(): void => setColorMode('Difficulty')}>\n              Difficulty (experimental)\n            </DropdownItem>\n          </DropdownMenu>\n        </UncontrolledDropdown>\n      </Row>\n      <SolvedProblemList\n        solvedProblems={mergedSolvedProblems}\n        problemContestMap={problemContestMap}\n        contestMap={contestMap}\n        difficulties={difficulties}\n        fromDate={fromDate}\n        toDate={toDate}\n        problemLinkColorMode={colorMode}\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\ninterface DifficultyStatisticsDataTooltipPayload {\n  value: number;\n  dataKey: 'y_line' | 'y_scatter' | 'x';\n  stroke: string;\n}\n\ninterface Props {\n  active?: boolean;\n  payload?: DifficultyStatisticsDataTooltipPayload[];\n  label?: number;\n}\n\nexport const DifficultyStatisticsDataTooltip: React.FC<Props> = (props) => {\n  const { active, payload, label } = props;\n  if (\n    !active ||\n    payload === undefined ||\n    payload.length !== 1 ||\n    payload[0].dataKey !== 'y_line'\n  )\n    return <></>;\n\n  return (\n    <div\n      className=\"recharts-default-tooltip\"\n      style={{\n        margin: '0px',\n        padding: '10px',\n        backgroundColor: 'rgb(255, 255, 255)',\n        border: '1px solid rgb(204, 204, 204)',\n        whiteSpace: 'nowrap',\n      }}\n    >\n      <p className=\"recharts-tooltip-label\" style={{ margin: '0px' }}>\n        {`Inner Rating: ${Math.floor(label as number)}`}\n      </p>\n      <ul\n        className=\"recharts-tooltip-item-list\"\n        style={{ padding: '0px', margin: '0px' }}\n      >\n        <li\n          className=\"recharts-tooltip-item\"\n          style={{\n            display: 'block',\n            paddingTop: '4px',\n            paddingBottom: '4px',\n            color: 'rgb(136, 132, 216)',\n          }}\n        >\n          <span className=\"recharts-tooltip-item-name\">Solve Probability</span>\n          <span className=\"recharts-tooltip-item-separator\"> : </span>\n          <span className=\"recharts-tooltip-item-value\">\n            {`${(payload[0].value * 100).toFixed(1)} %`}\n          </span>\n          <span className=\"recharts-tooltip-item-unit\" />\n        </li>\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Line,\n  ResponsiveContainer,\n  ComposedChart,\n  ReferenceLine,\n  ReferenceArea,\n} from 'recharts';\nimport { range } from '../../utils';\nimport { DifficultyStatisticsDataTooltip } from './DifficultyStatisticsDataTooltip';\nimport { getRatingColor, getRatingColorCode } from '../../utils/RatingColor';\n\ninterface PlotData {\n  x: number;\n  y_scatter?: number;\n  y_line?: number;\n}\n\ninterface Props {\n  left: number;\n  right: number;\n  difficulty: number;\n  scatterData: PlotData[];\n  lineData: PlotData[];\n}\n\nexport const DifficultyBarChart: React.FC<Props> = (props) => {\n  const { left, right, difficulty, scatterData, lineData } = props;\n  const ticks = range(left / 400, right / 400).map((x) => 400 * x);\n\n  const width = 100;\n  const barDataMap = scatterData.reduce((prev, cur) => {\n    const key = Math.floor(cur.x / width) * width;\n    let [succeeded, failed] = prev.get(key) ?? [0, 0];\n    if (cur.y_scatter === 0.0) failed++;\n    else succeeded++;\n    return prev.set(key, [succeeded, failed]);\n  }, new Map<number, [number, number]>());\n  const barData = [] as [number, number][]; // 最小内部レート，正答率\n  barDataMap.forEach((value, key) => {\n    const [succeeded, failed] = value;\n    barData.push([key, succeeded / (succeeded + failed)]);\n  });\n\n  return (\n    <Row className=\"my-3\">\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <ComposedChart\n          data={lineData}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"x\"\n            type=\"number\"\n            domain={[left, right]}\n            allowDecimals={false}\n            ticks={ticks}\n          />\n          <YAxis domain={[0, 1]} />\n          <Tooltip content={<DifficultyStatisticsDataTooltip />} />\n\n          {barData.map((data) => {\n            const [x, prob] = data;\n            const color = getRatingColorCode(getRatingColor(x));\n            return (\n              <ReferenceArea\n                key={`${x}_succeeded`}\n                x1={x}\n                x2={x + width}\n                y1={0}\n                y2={prob}\n                fill={color}\n                opacity={0.6}\n              />\n            );\n          })}\n\n          {barData.map((data) => {\n            const [x, prob] = data;\n            return (\n              <ReferenceArea\n                key={`${x}_failed`}\n                x1={x}\n                x2={x + width}\n                y1={prob}\n                y2={1}\n                fill={'#000000'}\n                opacity={0.3}\n              />\n            );\n          })}\n\n          <ReferenceLine x={difficulty} stroke=\"green\" strokeDasharray=\"3 3\" />\n          <ReferenceLine y={0.5} stroke=\"green\" strokeDasharray=\"3 3\" />\n\n          <Line dataKey=\"y_line\" stroke=\"blue\" dot={false} />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </Row>\n  );\n};\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Line,\n  ResponsiveContainer,\n  ComposedChart,\n  Scatter,\n  ReferenceLine,\n  ReferenceArea,\n} from 'recharts';\nimport { range } from '../../utils';\nimport { DifficultyStatisticsDataTooltip } from './DifficultyStatisticsDataTooltip';\nimport { getRatingColor, getRatingColorCode } from '../../utils/RatingColor';\n\ninterface PlotData {\n  x: number;\n  y_scatter?: number;\n  y_line?: number;\n}\n\ninterface Props {\n  left: number;\n  right: number;\n  difficulty: number;\n  scatterData: PlotData[];\n  lineData: PlotData[];\n}\n\nexport const DifficultyScatterChart: React.FC<Props> = (props) => {\n  const { left, right, difficulty, scatterData, lineData } = props;\n\n  const ticks = range(left / 400, right / 400).map((x) => 400 * x);\n  const data = [...scatterData, ...lineData];\n\n  return (\n    <Row className=\"my-3\">\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <ComposedChart\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"x\"\n            type=\"number\"\n            domain={[left, right]}\n            allowDecimals={false}\n            ticks={ticks}\n          />\n          <YAxis />\n          <Tooltip content={<DifficultyStatisticsDataTooltip />} />\n\n          {ticks.map((x, index) => {\n            if (index === ticks.length - 1) return null;\n            const color = getRatingColorCode(getRatingColor(x));\n            return (\n              <ReferenceArea\n                key={index}\n                x1={x}\n                x2={x + 400}\n                y1={0}\n                y2={1}\n                fill={color}\n                opacity={0.3}\n              />\n            );\n          })}\n\n          <ReferenceLine x={difficulty} stroke=\"green\" strokeDasharray=\"3 3\" />\n          <ReferenceLine y={0.5} stroke=\"green\" strokeDasharray=\"3 3\" />\n\n          <Scatter\n            className={'points'}\n            dataKey=\"y_scatter\"\n            fill=\"red\"\n            opacity={0.3}\n          />\n          <Line dataKey=\"y_line\" stroke=\"blue\" dot={false} />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </Row>\n  );\n};\n","import React from 'react';\nimport { Row, ButtonGroup, Button } from 'reactstrap';\nimport { DifficultyDetailData } from '../../interfaces/Difficulty';\nimport { range } from '../../utils';\nimport { useLocalStorage } from '../../utils/LocalStorage';\nimport { DifficultyBarChart } from './DifficultyBarChart';\nimport { DifficultyScatterChart } from './DifficultyScatterChart';\n\ninterface Props {\n  difficultyDetailData: DifficultyDetailData;\n}\n\nconst fixFloat = (rating: number): number => {\n  if (rating < 400) return 400.0 / Math.exp((400 - rating) / 400.0);\n  return rating;\n};\nconst fixFloatInv = (rating: number): number => {\n  if (rating < 0.01) rating = 0.01;\n  if (rating < 400) return 400.0 * (1.0 - Math.log(400 / rating));\n  return rating;\n};\n\nconst solveProb = (x: number, coef: number, bias: number): number => {\n  const solved_prob = x * coef + bias;\n  return 1.0 / (1.0 + Math.exp(-solved_prob));\n};\n\ninterface PlotData {\n  x: number;\n  y_scatter?: number;\n  y_line?: number;\n}\n\nexport const TabbedDifficultyChart: React.FC<Props> = (props) => {\n  const [showMode, setShowMode] = useLocalStorage<'Scatter' | 'Bar'>(\n    'ProblemDetailPage_TabbedDifficultyChart_showMode',\n    'Scatter'\n  );\n\n  const { coef, bias, difficulty, detail } = props.difficultyDetailData;\n  if (detail.length === 0) return <div>(Not Avaliable)</div>;\n\n  const scatterData: PlotData[] = detail.map((detailEntry) => {\n    return {\n      x: fixFloat(detailEntry.inner_rating),\n      y_scatter: detailEntry.solved,\n    };\n  });\n\n  // 左端・右端の（補正後）内部レーティングを決める\n  const [mi, ma] = detail.reduce(\n    (prev, curr) => {\n      return [\n        Math.min(prev[0], curr.inner_rating),\n        Math.max(prev[1], curr.inner_rating),\n      ];\n    },\n    [difficulty, difficulty]\n  );\n  const left = Math.floor(fixFloat(mi) / 400) * 400;\n  const right = Math.ceil(fixFloat(ma) / 400) * 400;\n\n  const lineData: PlotData[] = range(left, right).map((x) => {\n    return {\n      x,\n      y_line: solveProb(fixFloatInv(x), coef, bias),\n      ff: fixFloatInv(x),\n    };\n  });\n\n  return (\n    <>\n      <Row className=\"my-3\">\n        <ButtonGroup className=\"mr-3\">\n          <Button\n            onClick={() => setShowMode('Scatter')}\n            active={showMode === 'Scatter'}\n          >\n            Scatter\n          </Button>\n          <Button\n            onClick={() => setShowMode('Bar')}\n            active={showMode === 'Bar'}\n          >\n            Bar\n          </Button>\n        </ButtonGroup>\n      </Row>\n      {showMode === 'Scatter' && (\n        <DifficultyScatterChart\n          left={left}\n          right={right}\n          difficulty={difficulty}\n          scatterData={scatterData}\n          lineData={lineData}\n        />\n      )}\n      {showMode === 'Bar' && (\n        <DifficultyBarChart\n          left={left}\n          right={right}\n          difficulty={difficulty}\n          scatterData={scatterData}\n          lineData={lineData}\n        />\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Table,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Row,\n  Spinner,\n  UncontrolledDropdown,\n} from 'reactstrap';\nimport dataFormat from 'dateformat';\nimport {\n  ProblemLink,\n  ProblemLinkColorMode,\n} from '../../components/ProblemLink';\nimport { Problem, ProblemId, ProblemNo } from '../../interfaces/Problem';\nimport { useLocalStorage } from '../../utils/LocalStorage';\nimport * as TypedCachedApiClient from '../../utils/TypedCachedApiClient';\nimport * as DifficultyDataClient from '../../utils/DifficultyDataClient';\nimport { DifficultyStars } from '../../components/DifficultyStars';\nimport { SubmissionLink } from '../../components/SubmissionLink';\nimport { Contest, ContestId } from '../../interfaces/Contest';\nimport { RankingProblem } from '../../interfaces/RankingProblem';\nimport { ContestLink } from '../../components/ContestLink';\nimport { ProblemTypeIconSpanWithName } from '../../components/ProblemTypeIcon';\nimport { TabbedDifficultyChart } from './TabbedDifficultyChart';\nimport { useResetScroll } from '../../utils/UseResetScroll';\nimport { bytesLengthToString, getHeader } from '../../utils';\n\nconst initialUniversalState = {\n  problem: {} as Problem,\n  contestMap: new Map<ContestId, Contest>(),\n  problemContestMap: new Map<ProblemId, ContestId>(),\n  golferProblemMap: new Map<ProblemNo, RankingProblem>(),\n  golferPureProblemMap: new Map<ProblemNo, RankingProblem>(),\n  difficultyDetailData: DifficultyDataClient.difficultyDetailDataUnit,\n};\n\nexport const ProblemDetailPage: React.FC = () => {\n  const { problemIdString } = useParams() as {\n    problemIdString: string;\n  };\n  const problemId = Number(problemIdString);\n\n  const [universalState, setUniversalState] = useState(initialUniversalState);\n  const [universalStateLoaded, setUniversalStateLoaded] = useState(false);\n\n  useResetScroll();\n  useEffect(() => {\n    let unmounted = false;\n    const getUniversalInfo = async () => {\n      setUniversalStateLoaded(false);\n      const [\n        problem,\n        contestMap,\n        problemContestMap,\n        golferProblemMap,\n        golferPureProblemMap,\n        difficultyDetailData,\n      ] = await Promise.all([\n        TypedCachedApiClient.cachedSingleProblem(problemId),\n        TypedCachedApiClient.cachedContestMap(),\n        TypedCachedApiClient.cachedProblemContestMap(),\n        TypedCachedApiClient.cachedGolferRankingProblemMap(),\n        TypedCachedApiClient.cachedGolferRankingPureProblemMap(),\n        DifficultyDataClient.cachedDifficultyDetailData(problemId),\n      ]);\n\n      if (!unmounted) {\n        setUniversalState({\n          problem,\n          contestMap,\n          problemContestMap,\n          golferProblemMap,\n          golferPureProblemMap,\n          difficultyDetailData,\n        });\n        setUniversalStateLoaded(true);\n      }\n    };\n    void getUniversalInfo();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, [problemId]);\n\n  const {\n    problem,\n    contestMap,\n    problemContestMap,\n    golferProblemMap,\n    golferPureProblemMap,\n    difficultyDetailData,\n  } = universalState;\n\n  const contestId = problemContestMap.get(problemId);\n  const contest = contestId ? contestMap.get(contestId) : undefined;\n  const header = contest\n    ? `${getHeader(\n        contest.ProblemIdList.findIndex((pid) => pid === problem.ProblemId)\n      )}. `\n    : '';\n\n  const shortestRankingProblem =\n    problem.No !== null ? golferProblemMap.get(problem.No) : undefined;\n  const pureShortestRankingProblem =\n    problem.No !== null ? golferPureProblemMap.get(problem.No) : undefined;\n\n  const [colorMode, setColorMode] = useLocalStorage<ProblemLinkColorMode>(\n    'TablePage_colorMode',\n    'Level'\n  );\n\n  return (\n    <>\n      <Row className=\"my-2 border-bottom\">\n        {universalStateLoaded ? (\n          <h2>{problem.Title}</h2>\n        ) : (\n          <Spinner\n            style={{ width: '3rem', height: '3rem', marginLeft: '0.8rem' }}\n          />\n        )}\n      </Row>\n\n      <Row className=\"my-2 border-bottom\">\n        <h3>Solve Probability Chart</h3>\n      </Row>\n      <TabbedDifficultyChart difficultyDetailData={difficultyDetailData} />\n\n      <Row className=\"my-2 border-bottom\">\n        <h3>Info</h3>\n      </Row>\n      <Row className=\"my-4\">\n        <UncontrolledDropdown>\n          <DropdownToggle caret>\n            {\n              {\n                None: 'Color By',\n                Level: 'Level',\n                Difficulty: 'Difficulty (experimental)',\n              }[colorMode]\n            }\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem header>Color By</DropdownItem>\n            <DropdownItem onClick={(): void => setColorMode('None')}>\n              None\n            </DropdownItem>\n            <DropdownItem onClick={(): void => setColorMode('Level')}>\n              Level\n            </DropdownItem>\n            <DropdownItem onClick={(): void => setColorMode('Difficulty')}>\n              Difficulty (experimental)\n            </DropdownItem>\n          </DropdownMenu>\n        </UncontrolledDropdown>\n      </Row>\n      <Row className=\"my-3\">\n        <Table striped bordered hover responsive>\n          <tbody>\n            <tr key=\"problem-title\">\n              <th>Title</th>\n              <td>\n                <ProblemLink\n                  problemTitle={`${header}${problem.Title}`}\n                  problemNo={problem.No as ProblemNo}\n                  level={problem.Level}\n                  problemLinkColorMode={colorMode}\n                  difficulty={difficultyDetailData.difficulty}\n                  augmented={difficultyDetailData.augmented}\n                />\n              </td>\n            </tr>\n            <tr key=\"problem-date\">\n              <th>Date</th>\n              <td>\n                {problem.Date\n                  ? dataFormat(new Date(problem.Date), 'yyyy/mm/dd HH:MM')\n                  : '-'}\n              </td>\n            </tr>\n            <tr key=\"problem-level\">\n              <th>Level</th>\n              <td>\n                <DifficultyStars\n                  level={problem.Level}\n                  showDifficultyLevel={true}\n                  color={colorMode === 'Level'}\n                />\n              </td>\n            </tr>\n            <tr key=\"problem-contest\">\n              <th>Contest</th>\n              <td>\n                {contest && (\n                  <ContestLink\n                    contestId={contest.Id}\n                    contestName={contest.Name}\n                  />\n                )}\n              </td>\n            </tr>\n            <tr key=\"problem-tags\">\n              <th>Tags</th>\n              <td>{problem.Tags}</td>\n            </tr>\n            <tr key=\"problem-difficulty\">\n              <th>Difficulty</th>\n              <td>\n                {difficultyDetailData.difficulty === -1\n                  ? '-'\n                  : difficultyDetailData.difficulty}\n              </td>\n            </tr>\n            <tr key=\"problem-solved-users\">\n              <th>Solved Users</th>\n              <td>\n                {problem.Statistics ? `${problem.Statistics.Solved}` : '-'}\n              </td>\n            </tr>\n            <tr key=\"problem-submitters\">\n              <th>Submitters</th>\n              <td>\n                {problem.Statistics ? `${problem.Statistics.Total}` : '-'}\n              </td>\n            </tr>\n            <tr key=\"problem-shortest\">\n              <th>Shortest</th>\n              <td>\n                {shortestRankingProblem ? (\n                  <SubmissionLink\n                    submissionId={shortestRankingProblem.SubmissionId}\n                    submissionTitle={`#${\n                      shortestRankingProblem.SubmissionId\n                    } (${\n                      shortestRankingProblem.UserName\n                    }, ${bytesLengthToString(shortestRankingProblem.Length)})`}\n                  />\n                ) : problem.Statistics &&\n                  problem.Statistics.ShortCodeSubmissionId > 0 ? (\n                  <SubmissionLink\n                    submissionId={problem.Statistics.ShortCodeSubmissionId}\n                    submissionTitle={`#${problem.Statistics.ShortCodeSubmissionId}`}\n                  />\n                ) : (\n                  <></>\n                )}\n              </td>\n            </tr>\n            <tr key=\"problem-pure-shortest\">\n              <th>Pure Shortest</th>\n              <td>\n                {pureShortestRankingProblem ? (\n                  <SubmissionLink\n                    submissionId={pureShortestRankingProblem.SubmissionId}\n                    submissionTitle={`#${\n                      pureShortestRankingProblem.SubmissionId\n                    } (${\n                      pureShortestRankingProblem.UserName\n                    }, ${bytesLengthToString(\n                      pureShortestRankingProblem.Length\n                    )})`}\n                  />\n                ) : problem.Statistics &&\n                  problem.Statistics.PureShortCodeSubmissionId > 0 ? (\n                  <SubmissionLink\n                    submissionId={problem.Statistics.PureShortCodeSubmissionId}\n                    submissionTitle={`#${problem.Statistics.PureShortCodeSubmissionId}`}\n                  />\n                ) : (\n                  <></>\n                )}\n              </td>\n            </tr>\n            <tr key=\"problem-first-accepted\">\n              <th>First Accepted</th>\n              <td>\n                {problem.Statistics &&\n                problem.Statistics.FirstACSubmissionId > 0 ? (\n                  <SubmissionLink\n                    submissionId={problem.Statistics.FirstACSubmissionId}\n                    submissionTitle={`#${problem.Statistics.FirstACSubmissionId} (${problem.Statistics.FirstAcceptedTimeSecond} seconds)`}\n                  />\n                ) : (\n                  <></>\n                )}\n              </td>\n            </tr>\n            <tr key=\"problem-fastest\">\n              <th>Fastest</th>\n              <td>\n                {problem.Statistics &&\n                problem.Statistics.FastSubmissionId > 0 ? (\n                  <SubmissionLink\n                    submissionId={problem.Statistics.FastSubmissionId}\n                    submissionTitle={`#${problem.Statistics.FastSubmissionId}`}\n                  />\n                ) : (\n                  <></>\n                )}\n              </td>\n            </tr>\n            <tr key=\"problem-type\">\n              <th>Problem Type</th>\n              <td>\n                <ProblemTypeIconSpanWithName\n                  problemType={problem.ProblemType}\n                />\n              </td>\n            </tr>\n            <tr key=\"problem-no\">\n              <th>No</th>\n              <td>{problem.No}</td>\n            </tr>\n            <tr key=\"problem-id\">\n              <th>ProblemId</th>\n              <td>{problem.ProblemId}</td>\n            </tr>\n          </tbody>\n        </Table>\n      </Row>\n    </>\n  );\n};\n","import React from 'react';\nimport { useLocation, useNavigate } from 'react-router';\n\nexport const useResetScroll = (): void => {\n  const navigate = useNavigate();\n  const { pathname, state } = useLocation();\n\n  const updateState = React.useCallback(() => {\n    navigate(pathname, {\n      state: { ...state, scrolled: true },\n      replace: true,\n    });\n    window.scrollTo(0, 0);\n  }, [pathname, state, navigate]);\n\n  React.useLayoutEffect(() => {\n    // if (state && ((state as { scrolled: boolean }).scrolled))\n    updateState();\n  }, [state, updateState]);\n};\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Routes,\n  Navigate,\n} from 'react-router-dom';\nimport { Container } from 'reactstrap';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faStar,\n  faStarHalf,\n  faSchool,\n  faCalculator,\n  faLaughBeam,\n  faExclamationTriangle,\n  faCheck,\n} from '@fortawesome/free-solid-svg-icons';\nimport { NavigationBar } from './components/NavigationBar';\nimport { ShortRanking } from './pages/ShortRanking';\nimport { PureShortRanking } from './pages/PureShortRanking';\nimport { FastestRanking } from './pages/FastestRanking';\nimport { TablePage } from './pages/TablePage';\nimport { ListPage } from './pages/ListPage';\nimport { UserPage } from './pages/UserPage';\n// import logo from './logo.svg';\nimport './App.css';\nimport { ProblemDetailPage } from './pages/ProblemDetailPage';\n\nlibrary.add(\n  faStar,\n  faStarHalf,\n  faSchool,\n  faCalculator,\n  faLaughBeam,\n  faExclamationTriangle,\n  faCheck\n);\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <NavigationBar />\n      <Container style={{ width: '100%', maxWidth: '90%' }}>\n        <Routes>\n          <Route path=\"/fast\" element={<FastestRanking />} />\n          <Route path=\"/short\" element={<ShortRanking />} />\n          <Route path=\"/pureshort\" element={<PureShortRanking />} />\n          <Route path=\"/table/:param/:user\" element={<TablePage />} />\n          <Route path=\"/table/\" element={<TablePage />} />\n          <Route path=\"/list/:param/:user\" element={<ListPage />} />\n          <Route path=\"/list/\" element={<ListPage />} />\n          <Route path=\"/user/:param/:user\" element={<UserPage />} />\n          <Route\n            path=\"/problem-detail/:problemIdString\"\n            element={<ProblemDetailPage />}\n          />\n          <Route path=\"/\" element={<Navigate to=\"/table/\" />} />\n        </Routes>\n      </Container>\n    </Router>\n  );\n};\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}